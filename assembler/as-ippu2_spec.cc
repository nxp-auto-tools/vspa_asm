// Pre-processed
#define _Enable_shared static _Enable_shared

/*
	
	Assembler code implementation file for ppc generated by ADL.
	
	*/

#include <stdio.h>
#include <sstream>
#include <string>
extern "C" {
  #  include "as.h"
  #  include "bfd/elf-bfd.h"
}

#define __NO_RNUMBER__

#include "adl-asm-impl.h"
#include "adl-asm-info.h"

#define bits le_intbv
#define sbits le_sintbv

#define ns_bits le_intbv
#define ns_sbits le_ sintbv

extern "C" {
  #include "tc-ppc.h"
}




/* Figure out the BFD architecture to use.  These functions 
   are called well before ippu_md_begin, when the output file is opened.  */ 

enum bfd_architecture ippu_ppc_arch () 
{
  return ADL_TARGET_ARCH;
}

const char packet_begin_chars[] = "{\n";
  const char packet_end_chars[] = "}\n";
static const char *init_comment_strs[] = {"//",};
static int init_num_comment_strs = 1;
static const char *init_line_comment_strs[] = {"//",};
static int init_num_line_comment_strs = 1;
static int init_queue_size = 2;
unsigned long ippu_ppc_mach ()
{
  return default_adl_mach();
}

extern char*
ippu_ppc_target_format ()
{
  return default_adl_target_format();
}

static const char instr_separator_chars[] = ";";


enum InstrAttrs {
  instr_ippu = 0x0,
  instr_loop_begin = 0x1,
  instr_loop_end = 0x2,
  instr_loop_1 = 0x3,
};

static void error(const char *msg,int pos ATTRIBUTE_UNUSED,int current_position ATTRIBUTE_UNUSED) ATTRIBUTE_UNUSED;
static void error(const char *msg,int pos ATTRIBUTE_UNUSED,int current_position ATTRIBUTE_UNUSED)
{
  adl_error(msg,pos,current_position);
}

static void info(const char *msg,int pos ATTRIBUTE_UNUSED,int current_position ATTRIBUTE_UNUSED) ATTRIBUTE_UNUSED;
static void info(const char *msg,int pos ATTRIBUTE_UNUSED,int current_position ATTRIBUTE_UNUSED)
{
  adl_info(msg,pos,current_position);
}

// Prefix variables.
static struct adl_prefix_field *pfx_fields0[] = { 0 };
static struct adl_prefix_field *pfx_fields1[] = { 0 };
static struct adl_prefix_fields pfx_queue[] = {{pfx_fields0},{pfx_fields1},};
// Prefix counters.

static void reset_prefix_counters()
{
}

//
// Instruction field inserter functions.
//

static  void set_AA_imp_bits__20_20__width_32(unsigned *x, bfd_uint64_t val) {
  x[0] |= ((val&0x1) << 20);
}

static  void set_AS2_imp_bits__23_22__width_32(unsigned *x, bfd_uint64_t val) {
  x[0] |= ((val&0x3) << 22);
}

static  void set_AS_imp_bits__25_24__width_32(unsigned *x, bfd_uint64_t val) {
  x[0] |= ((val&0x3) << 24);
}

static  void set_BR_MODE_imp_bits__7_4__width_32(unsigned *x, bfd_uint64_t val) {
  x[0] |= ((val&0xf) << 4);
}

static  void set_CLR_DST_imp_bits__21_20__width_32(unsigned *x, bfd_uint64_t val) {
  x[0] |= ((val&0x3) << 20);
}

static  void set_DIGIT_INDEX_imp_bits__23_20__width_32(unsigned *x, bfd_uint64_t val) {
  x[0] |= ((val&0xf) << 20);
}

static  void set_DST_REG_MX_imp_bits__22_22__width_32(unsigned *x, bfd_uint64_t val) {
  x[0] |= ((val&0x1) << 22);
}

static  void set_DST_REG_NON_MX_imp_bits__25_22__width_32(unsigned *x, bfd_uint64_t val) {
  x[0] |= ((val&0xf) << 22);
}

static  void set_DST_REG_imp_bits__25_22__width_32(unsigned *x, bfd_uint64_t val) {
  x[0] |= ((val&0xf) << 22);
}

static  void set_ELEM_OFFSET_imp_bits__18_16__width_32(unsigned *x, bfd_uint64_t val) {
  x[0] |= ((val&0x7) << 16);
}

static  void set_IM11_imp_bits__14_4__width_32(unsigned *x, bfd_uint64_t val) {
  x[0] |= ((val&0x7ff) << 4);
}

static  void set_IM12_imp_bits__15_4__width_32(unsigned *x, bfd_uint64_t val) {
  x[0] |= ((val&0xfff) << 4);
}

static  void set_IM12s_imp_bits__15_4__width_32(unsigned *x, bfd_uint64_t val) {
  x[0] |= ((val&0xfff) << 4);
}

static  void set_IM16R16_imp_bits__19_4__width_32(unsigned *x, bfd_uint64_t val) {
  x[0] |= ((val&0xffff) << 4);
}

static  void set_IM19R17_imp_bits__3_3_x_21_4__width_32(unsigned *x, bfd_uint64_t val) {
  x[0] |= ((val&0x3ffff) << 4);
  val >>=   0x12;
  x[0] |= ((val&0x1) << 3);
}

static  void set_IM19_imp_bits__22_21_x_19_3__width_32(unsigned *x, bfd_uint64_t val) {
  x[0] |= ((val&0x1ffff) << 3);
  val >>=   0x11;
  x[0] |= ((val&0x3) << 21);
}

static  void set_IM19sR17_imp_bits__3_3_x_21_4__width_32(unsigned *x, bfd_uint64_t val) {
  x[0] |= ((val&0x3ffff) << 4);
  val >>=   0x12;
  x[0] |= ((val&0x1) << 3);
}

static  void set_IM3_imp_bits__18_16__width_32(unsigned *x, bfd_uint64_t val) {
  x[0] |= ((val&0x7) << 16);
}

static  void set_IM4s_imp_bits__24_21__width_32(unsigned *x, bfd_uint64_t val) {
  x[0] |= ((val&0xf) << 21);
}

static  void set_IM5s_imp_bits__25_21__width_32(unsigned *x, bfd_uint64_t val) {
  x[0] |= ((val&0x1f) << 21);
}

static  void set_IM6_imp_bits__9_4__width_32(unsigned *x, bfd_uint64_t val) {
  x[0] |= ((val&0x3f) << 4);
}

static  void set_IM8_imp_bits__11_4__width_32(unsigned *x, bfd_uint64_t val) {
  x[0] |= ((val&0xff) << 4);
}

static  void set_IM8s_imp_bits__28_21__width_32(unsigned *x, bfd_uint64_t val) {
  x[0] |= ((val&0xff) << 21);
}

static  void set_IM9s_imp_bits__15_7__width_32(unsigned *x, bfd_uint64_t val) {
  x[0] |= ((val&0x1ff) << 7);
}

static  void set_IPPU_VCPU_imp_bits__19_19__width_32(unsigned *x, bfd_uint64_t val) {
  x[0] |= ((val&0x1) << 19);
}

static  void set_IY_imp_bits__25_25__width_32(unsigned *x, bfd_uint64_t val) {
  x[0] |= ((val&0x1) << 25);
}

static  void set_JMP_CC_imp_bits__23_20__width_32(unsigned *x, bfd_uint64_t val) {
  x[0] |= ((val&0xf) << 20);
}

static  void set_LATCH_MODE_imp_bits__6_3__width_32(unsigned *x, bfd_uint64_t val) {
  x[0] |= ((val&0xf) << 3);
}

static  void set_LD_MODE_imp_bits__26_24__width_32(unsigned *x, bfd_uint64_t val) {
  x[0] |= ((val&0x7) << 24);
}

static  void set_LD_MODE_imp_bits__28_26__width_32(unsigned *x, bfd_uint64_t val) {
  x[0] |= ((val&0x7) << 26);
}

static  void set_LOOP_AS_IMM_imp_bits__26_26__width_32(unsigned *x, bfd_uint64_t val) {
  x[0] |= ((val&0x1) << 26);
}

static  void set_LOOP_END_imp_bits__0_0__width_32(unsigned *x, bfd_uint64_t val) {
  x[0] |= ((val&0x1));
}

static  void set_LOOP_INDEX_imp_bits__2_2__width_32(unsigned *x, bfd_uint64_t val) {
  x[0] |= ((val&0x1) << 2);
}

static  void set_LOOP_START_imp_bits__1_1__width_32(unsigned *x, bfd_uint64_t val) {
  x[0] |= ((val&0x1) << 1);
}

static  void set_MM_imp_bits__22_22__width_32(unsigned *x, bfd_uint64_t val) {
  x[0] |= ((val&0x1) << 22);
}

static  void set_PLUS_MINUS_imp_bits__23_23__width_32(unsigned *x, bfd_uint64_t val) {
  x[0] |= ((val&0x1) << 23);
}

static  void set_RADIX_imp_bits__18_16__width_32(unsigned *x, bfd_uint64_t val) {
  x[0] |= ((val&0x7) << 16);
}

static  void set_RD_OFFSET_imp_bits__15_7__width_32(unsigned *x, bfd_uint64_t val) {
  x[0] |= ((val&0x1ff) << 7);
}

static  void set_SET_LOOP_INDEX_imp_bits__23_23__width_32(unsigned *x, bfd_uint64_t val) {
  x[0] |= ((val&0x1) << 23);
}

static  void set_SRC_REG_imp_bits__21_18__width_32(unsigned *x, bfd_uint64_t val) {
  x[0] |= ((val&0xf) << 18);
}

static  void set_ST_MODE_imp_bits__28_26__width_32(unsigned *x, bfd_uint64_t val) {
  x[0] |= ((val&0x7) << 26);
}

static  void set_WRITE_MODE_imp_bits__5_3__width_32(unsigned *x, bfd_uint64_t val) {
  x[0] |= ((val&0x7) << 3);
}

static  void set_WR_OFFSET_imp_bits__15_7__width_32(unsigned *x, bfd_uint64_t val) {
  x[0] |= ((val&0x1ff) << 7);
}


//
// Instruction field clearer functions.
//

static  void clear_AA_imp_bits__20_20__width_32(unsigned *x ATTRIBUTE_UNUSED) {
    x[0] = x[0] & (~0x100000);
  
}

static  void clear_AS2_imp_bits__23_22__width_32(unsigned *x ATTRIBUTE_UNUSED) {
    x[0] = x[0] & (~0xc00000);
  
}

static  void clear_AS_imp_bits__25_24__width_32(unsigned *x ATTRIBUTE_UNUSED) {
    x[0] = x[0] & (~0x3000000);
  
}

static  void clear_BR_MODE_imp_bits__7_4__width_32(unsigned *x ATTRIBUTE_UNUSED) {
    x[0] = x[0] & (~0xf0);
  
}

static  void clear_CLR_DST_imp_bits__21_20__width_32(unsigned *x ATTRIBUTE_UNUSED) {
    x[0] = x[0] & (~0x300000);
  
}

static  void clear_DIGIT_INDEX_imp_bits__23_20__width_32(unsigned *x ATTRIBUTE_UNUSED) {
    x[0] = x[0] & (~0xf00000);
  
}

static  void clear_DST_REG_MX_imp_bits__22_22__width_32(unsigned *x ATTRIBUTE_UNUSED) {
    x[0] = x[0] & (~0x400000);
  
}

static  void clear_DST_REG_NON_MX_imp_bits__25_22__width_32(unsigned *x ATTRIBUTE_UNUSED) {
    x[0] = x[0] & (~0x3c00000);
  
}

static  void clear_DST_REG_imp_bits__25_22__width_32(unsigned *x ATTRIBUTE_UNUSED) {
    x[0] = x[0] & (~0x3c00000);
  
}

static  void clear_ELEM_OFFSET_imp_bits__18_16__width_32(unsigned *x ATTRIBUTE_UNUSED) {
    x[0] = x[0] & (~0x70000);
  
}

static  void clear_IM11_imp_bits__14_4__width_32(unsigned *x ATTRIBUTE_UNUSED) {
    x[0] = x[0] & (~0x7ff0);
  
}

static  void clear_IM12_imp_bits__15_4__width_32(unsigned *x ATTRIBUTE_UNUSED) {
    x[0] = x[0] & (~0xfff0);
  
}

static  void clear_IM12s_imp_bits__15_4__width_32(unsigned *x ATTRIBUTE_UNUSED) {
    x[0] = x[0] & (~0xfff0);
  
}

static  void clear_IM16R16_imp_bits__19_4__width_32(unsigned *x ATTRIBUTE_UNUSED) {
    x[0] = x[0] & (~0xffff0);
  
}

static  void clear_IM19R17_imp_bits__3_3_x_21_4__width_32(unsigned *x ATTRIBUTE_UNUSED) {
    x[0] = x[0] & (~0x3ffff8);
  
}

static  void clear_IM19_imp_bits__22_21_x_19_3__width_32(unsigned *x ATTRIBUTE_UNUSED) {
    x[0] = x[0] & (~0x6ffff8);
  
}

static  void clear_IM19sR17_imp_bits__3_3_x_21_4__width_32(unsigned *x ATTRIBUTE_UNUSED) {
    x[0] = x[0] & (~0x3ffff8);
  
}

static  void clear_IM3_imp_bits__18_16__width_32(unsigned *x ATTRIBUTE_UNUSED) {
    x[0] = x[0] & (~0x70000);
  
}

static  void clear_IM4s_imp_bits__24_21__width_32(unsigned *x ATTRIBUTE_UNUSED) {
    x[0] = x[0] & (~0x1e00000);
  
}

static  void clear_IM5s_imp_bits__25_21__width_32(unsigned *x ATTRIBUTE_UNUSED) {
    x[0] = x[0] & (~0x3e00000);
  
}

static  void clear_IM6_imp_bits__9_4__width_32(unsigned *x ATTRIBUTE_UNUSED) {
    x[0] = x[0] & (~0x3f0);
  
}

static  void clear_IM8_imp_bits__11_4__width_32(unsigned *x ATTRIBUTE_UNUSED) {
    x[0] = x[0] & (~0xff0);
  
}

static  void clear_IM8s_imp_bits__28_21__width_32(unsigned *x ATTRIBUTE_UNUSED) {
    x[0] = x[0] & (~0x1fe00000);
  
}

static  void clear_IM9s_imp_bits__15_7__width_32(unsigned *x ATTRIBUTE_UNUSED) {
    x[0] = x[0] & (~0xff80);
  
}

static  void clear_IPPU_VCPU_imp_bits__19_19__width_32(unsigned *x ATTRIBUTE_UNUSED) {
    x[0] = x[0] & (~0x80000);
  
}

static  void clear_IY_imp_bits__25_25__width_32(unsigned *x ATTRIBUTE_UNUSED) {
    x[0] = x[0] & (~0x2000000);
  
}

static  void clear_JMP_CC_imp_bits__23_20__width_32(unsigned *x ATTRIBUTE_UNUSED) {
    x[0] = x[0] & (~0xf00000);
  
}

static  void clear_LATCH_MODE_imp_bits__6_3__width_32(unsigned *x ATTRIBUTE_UNUSED) {
    x[0] = x[0] & (~0x78);
  
}

static  void clear_LD_MODE_imp_bits__26_24__width_32(unsigned *x ATTRIBUTE_UNUSED) {
    x[0] = x[0] & (~0x7000000);
  
}

static  void clear_LD_MODE_imp_bits__28_26__width_32(unsigned *x ATTRIBUTE_UNUSED) {
    x[0] = x[0] & (~0x1c000000);
  
}

static  void clear_LOOP_AS_IMM_imp_bits__26_26__width_32(unsigned *x ATTRIBUTE_UNUSED) {
    x[0] = x[0] & (~0x4000000);
  
}

static  void clear_LOOP_END_imp_bits__0_0__width_32(unsigned *x ATTRIBUTE_UNUSED) {
    x[0] = x[0] & (~0x1);
  
}

static  void clear_LOOP_INDEX_imp_bits__2_2__width_32(unsigned *x ATTRIBUTE_UNUSED) {
    x[0] = x[0] & (~0x4);
  
}

static  void clear_LOOP_START_imp_bits__1_1__width_32(unsigned *x ATTRIBUTE_UNUSED) {
    x[0] = x[0] & (~0x2);
  
}

static  void clear_MM_imp_bits__22_22__width_32(unsigned *x ATTRIBUTE_UNUSED) {
    x[0] = x[0] & (~0x400000);
  
}

static  void clear_PLUS_MINUS_imp_bits__23_23__width_32(unsigned *x ATTRIBUTE_UNUSED) {
    x[0] = x[0] & (~0x800000);
  
}

static  void clear_RADIX_imp_bits__18_16__width_32(unsigned *x ATTRIBUTE_UNUSED) {
    x[0] = x[0] & (~0x70000);
  
}

static  void clear_RD_OFFSET_imp_bits__15_7__width_32(unsigned *x ATTRIBUTE_UNUSED) {
    x[0] = x[0] & (~0xff80);
  
}

static  void clear_SET_LOOP_INDEX_imp_bits__23_23__width_32(unsigned *x ATTRIBUTE_UNUSED) {
    x[0] = x[0] & (~0x800000);
  
}

static  void clear_SRC_REG_imp_bits__21_18__width_32(unsigned *x ATTRIBUTE_UNUSED) {
    x[0] = x[0] & (~0x3c0000);
  
}

static  void clear_ST_MODE_imp_bits__28_26__width_32(unsigned *x ATTRIBUTE_UNUSED) {
    x[0] = x[0] & (~0x1c000000);
  
}

static  void clear_WRITE_MODE_imp_bits__5_3__width_32(unsigned *x ATTRIBUTE_UNUSED) {
    x[0] = x[0] & (~0x38);
  
}

static  void clear_WR_OFFSET_imp_bits__15_7__width_32(unsigned *x ATTRIBUTE_UNUSED) {
    x[0] = x[0] & (~0xff80);
  
}


static bfd_uint64_t IM4n_checker(bfd_uint64_t n, bool check_only){
  bfd_boolean result1 = FALSE;
  bfd_boolean result2 = FALSE;
  if (n <= 8UL) {
      result1 = TRUE;
  } 
  result2 = TRUE;
  
  if (check_only) {
       return (result1 && result2) ? 1 : 0;}
  
  if (!(result1 && result2)) {
      as_fatal(_("Operand IM4n is out of bounds"));
      return -1;
  }
  return n;
};
static bfd_uint64_t IM5n_checker(bfd_uint64_t n, bool check_only){
  bfd_boolean result1 = FALSE;
  bfd_boolean result2 = FALSE;
  if (n <= 16UL) {
      result1 = TRUE;
  } 
  result2 = TRUE;
  
  if (check_only) {
       return (result1 && result2) ? 1 : 0;}
  
  if (!(result1 && result2)) {
      as_fatal(_("Operand IM5n is out of bounds"));
      return -1;
  }
  return n;
};
static bfd_uint64_t IM8n_checker(bfd_uint64_t n, bool check_only){
  bfd_boolean result1 = FALSE;
  bfd_boolean result2 = FALSE;
  if (n <= 128UL) {
      result1 = TRUE;
  } 
  result2 = TRUE;
  
  if (check_only) {
       return (result1 && result2) ? 1 : 0;}
  
  if (!(result1 && result2)) {
      as_fatal(_("Operand IM8n is out of bounds"));
      return -1;
  }
  return n;
};
static bfd_uint64_t IM9_1_256_checker(bfd_uint64_t n, bool check_only){
  bfd_boolean result1 = FALSE;
  bfd_boolean result2 = FALSE;
  if (1ULL <= n && n <= 256ULL) {
      result1 = TRUE;
  } 
  result2 = TRUE;
  
  if (check_only) {
       return (result1 && result2) ? 1 : 0;}
  
  if (!(result1 && result2)) {
      as_fatal(_("Operand IM9_1_256 is out of bounds"));
      return -1;
  }
  return n;
};
static bfd_uint64_t IM9n_checker(bfd_uint64_t n, bool check_only){
  bfd_boolean result1 = FALSE;
  bfd_boolean result2 = FALSE;
  if (n <= 256UL) {
      result1 = TRUE;
  } 
  result2 = TRUE;
  
  if (check_only) {
       return (result1 && result2) ? 1 : 0;}
  
  if (!(result1 && result2)) {
      as_fatal(_("Operand IM9n is out of bounds"));
      return -1;
  }
  return n;
};
// For field AA
static enum_field _sym1[] = { { "a0", 0 }, { "a1", 1 }, };
static enum_fields _sym2 = { _sym1 , 2 };

// For field AA_imp_bits__20_20_
static enum_field _sym3[] = { { "a0", 0 }, { "a1", 1 }, };
static enum_fields _sym4 = { _sym3 , 2 };

// For field AS
static enum_field _sym5[] = { { "as0", 0 }, { "as1", 1 }, { "as2", 2 }, { "as3", 3 }, };
static enum_fields _sym6 = { _sym5 , 4 };

// For field AS2
static enum_field _sym7[] = { { "as0", 0 }, { "as1", 1 }, { "as2", 2 }, { "as3", 3 }, };
static enum_fields _sym8 = { _sym7 , 4 };

// For field AS2_imp_bits__23_22_
static enum_field _sym9[] = { { "as0", 0 }, { "as1", 1 }, { "as2", 2 }, { "as3", 3 }, };
static enum_fields _sym10 = { _sym9 , 4 };

// For field AS_imp_bits__25_24_
static enum_field _sym11[] = { { "as0", 0 }, { "as1", 1 }, { "as2", 2 }, { "as3", 3 }, };
static enum_fields _sym12 = { _sym11 , 4 };

// For field BR_MODE
static enum_field _sym13[] = { { "fft1024", 5 }, { "fft128", 2 }, { "fft16384", 9 }, { "fft2048", 6 }, { "fft256", 3 }, { "fft32", 0 }, { "fft4096", 7 }, { "fft512", 4 }, { "fft64", 1 }, { "fft8192", 8 }, };
static enum_fields _sym14 = { _sym13 , 10 };

// For field BR_MODE_imp_bits__7_4_
static enum_field _sym15[] = { { "fft1024", 5 }, { "fft128", 2 }, { "fft16384", 9 }, { "fft2048", 6 }, { "fft256", 3 }, { "fft32", 0 }, { "fft4096", 7 }, { "fft512", 4 }, { "fft64", 1 }, { "fft8192", 8 }, };
static enum_fields _sym16 = { _sym15 , 10 };

// For field CFG_TYPE
static enum_field _sym17[] = { { "br", 1 }, { "br_dr", 3 }, { "dr", 2 }, };
static enum_fields _sym18 = { _sym17 , 3 };

// For field CLR_DST
static enum_field _sym19[] = { { "r0", 1 }, { "r0, r1", 3 }, { "r0,r1", 3 }, { "r1", 2 }, { "r1, r0", 3 }, { "r1,r0", 3 }, };
static enum_fields _sym20 = { _sym19 , 6 };

// For field CLR_DST_imp_bits__21_20_
static enum_field _sym21[] = { { "r0", 1 }, { "r0, r1", 3 }, { "r0,r1", 3 }, { "r1", 2 }, { "r1, r0", 3 }, { "r1,r0", 3 }, };
static enum_fields _sym22 = { _sym21 , 6 };

// For field DIGIT_INDEX
static enum_field _sym23[] = { { "1", 1 }, { "10", 10 }, { "2", 2 }, { "3", 3 }, { "4", 4 }, { "5", 5 }, { "6", 6 }, { "7", 7 }, { "8", 8 }, { "9", 9 }, };
static enum_fields _sym24 = { _sym23 , 10 };

// For field DIGIT_INDEX_imp_bits__23_20_
static enum_field _sym25[] = { { "1", 1 }, { "10", 10 }, { "2", 2 }, { "3", 3 }, { "4", 4 }, { "5", 5 }, { "6", 6 }, { "7", 7 }, { "8", 8 }, { "9", 9 }, };
static enum_fields _sym26 = { _sym25 , 10 };

// For field DST_PTR
static enum_field _sym27[] = { { "a0", 0 }, { "a1", 1 }, { "as0", 4 }, { "as1", 5 }, { "as2", 6 }, { "as3", 7 }, { "di_d", 9 }, { "di_offset_unit", 10 }, { "elem_mask_ptr", 13 }, { "m0", 2 }, { "m1", 3 }, { "mem_elem_rd_ptr", 14 }, { "mem_elem_wr_ptr", 15 }, { "r_rd_ptr", 11 }, { "r_wr_ptr", 12 }, { "vindx_ptr", 8 }, };
static enum_fields _sym28 = { _sym27 , 16 };

// For field DST_REG
static enum_field _sym29[] = { { "a0", 0 }, { "a1", 1 }, { "as0", 4 }, { "as1", 5 }, { "as2", 6 }, { "as3", 7 }, { "di_d", 9 }, { "di_offset_unit", 10 }, { "elem_mask_ptr", 13 }, { "m0", 2 }, { "m1", 3 }, { "mem_elem_rd_ptr", 14 }, { "mem_elem_wr_ptr", 15 }, { "r_rd_ptr", 11 }, { "r_wr_ptr", 12 }, { "vindx_ptr", 8 }, };
static enum_fields _sym30 = { _sym29 , 16 };

// For field DST_REG_MX
static enum_field _sym31[] = { { "m0", 0 }, { "m1", 1 }, };
static enum_fields _sym32 = { _sym31 , 2 };

// For field DST_REG_MX_imp_bits__22_22_
static enum_field _sym33[] = { { "m0", 0 }, { "m1", 1 }, };
static enum_fields _sym34 = { _sym33 , 2 };

// For field DST_REG_NON_MX
static enum_field _sym35[] = { { "a0", 0 }, { "a1", 1 }, { "as0", 4 }, { "as1", 5 }, { "as2", 6 }, { "as3", 7 }, { "di_d", 9 }, { "di_offset_unit", 10 }, { "elem_mask_ptr", 13 }, { "mem_elem_rd_ptr", 14 }, { "mem_elem_wr_ptr", 15 }, { "r_rd_ptr", 11 }, { "r_wr_ptr", 12 }, { "vindx_ptr", 8 }, };
static enum_fields _sym36 = { _sym35 , 14 };

// For field DST_REG_NON_MX_imp_bits__25_22_
static enum_field _sym37[] = { { "a0", 0 }, { "a1", 1 }, { "as0", 4 }, { "as1", 5 }, { "as2", 6 }, { "as3", 7 }, { "di_d", 9 }, { "di_offset_unit", 10 }, { "elem_mask_ptr", 13 }, { "mem_elem_rd_ptr", 14 }, { "mem_elem_wr_ptr", 15 }, { "r_rd_ptr", 11 }, { "r_wr_ptr", 12 }, { "vindx_ptr", 8 }, };
static enum_fields _sym38 = { _sym37 , 14 };

// For field DST_REG_imp_bits__25_22_
static enum_field _sym39[] = { { "a0", 0 }, { "a1", 1 }, { "as0", 4 }, { "as1", 5 }, { "as2", 6 }, { "as3", 7 }, { "di_d", 9 }, { "di_offset_unit", 10 }, { "elem_mask_ptr", 13 }, { "m0", 2 }, { "m1", 3 }, { "mem_elem_rd_ptr", 14 }, { "mem_elem_wr_ptr", 15 }, { "r_rd_ptr", 11 }, { "r_wr_ptr", 12 }, { "vindx_ptr", 8 }, };
static enum_fields _sym40 = { _sym39 , 16 };

// For field IPPU_VCPU
static enum_field _sym41[] = { { ".ippu", 0 }, { ".vcpu", 1 }, };
static enum_fields _sym42 = { _sym41 , 2 };

// For field IPPU_VCPU_imp_bits__19_19_
static enum_field _sym43[] = { { ".ippu", 0 }, { ".vcpu", 1 }, };
static enum_fields _sym44 = { _sym43 , 2 };

// For field IY
static enum_field _sym45[] = { { "i0", 0 }, { "i1", 1 }, };
static enum_fields _sym46 = { _sym45 , 2 };

// For field IY_imp_bits__25_25_
static enum_field _sym47[] = { { "i0", 0 }, { "i1", 1 }, };
static enum_fields _sym48 = { _sym47 , 2 };

// For field JMP_CC
static enum_field _sym49[] = { { "jmp", 3 }, { "jmp.nz", 2 }, { "jmp.z", 1 }, { "jsr", 7 }, { "jsr.nz", 6 }, { "jsr.z", 5 }, { "ret", 15 }, { "ret.nz", 14 }, { "ret.z", 13 }, };
static enum_fields _sym50 = { _sym49 , 9 };

// For field JMP_CC_imp_bits__23_20_
static enum_field _sym51[] = { { "jmp", 3 }, { "jmp.nz", 2 }, { "jmp.z", 1 }, { "jsr", 7 }, { "jsr.nz", 6 }, { "jsr.z", 5 }, { "ret", 15 }, { "ret.nz", 14 }, { "ret.z", 13 }, };
static enum_fields _sym52 = { _sym51 , 9 };

// For field LATCH_MODE
static enum_field _sym53[] = { { "H2H", 11 }, { "H2L", 9 }, { "L2H", 8 }, { "L2L", 10 }, { "e128", 2 }, { "e16", 5 }, { "e256", 1 }, { "e32", 4 }, { "e4", 7 }, { "e64", 3 }, { "e8", 6 }, { "normal", 0 }, };
static enum_fields _sym54 = { _sym53 , 12 };

// For field LATCH_MODE_imp_bits__6_3_
static enum_field _sym55[] = { { "H2H", 11 }, { "H2L", 9 }, { "L2H", 8 }, { "L2L", 10 }, { "e128", 2 }, { "e16", 5 }, { "e256", 1 }, { "e32", 4 }, { "e4", 7 }, { "e64", 3 }, { "e8", 6 }, { "normal", 0 }, };
static enum_fields _sym56 = { _sym55 , 12 };

// For field LD_MODE
static enum_field _sym57[] = { { "br", 1 }, { "br_dr", 3 }, { "dr", 2 }, { "indirect", 5 }, { "normal", 0 }, { "vindirect", 4 }, };
static enum_fields _sym58 = { _sym57 , 6 };

// For field LD_MODE_imp_bits__26_24_
static enum_field _sym59[] = { { "br", 1 }, { "br_dr", 3 }, { "dr", 2 }, { "indirect", 5 }, { "normal", 0 }, { "vindirect", 4 }, };
static enum_fields _sym60 = { _sym59 , 6 };

// For field LD_MODE_imp_bits__28_26_
static enum_field _sym61[] = { { "br", 1 }, { "br_dr", 3 }, { "dr", 2 }, { "indirect", 5 }, { "normal", 0 }, { "vindirect", 4 }, };
static enum_fields _sym62 = { _sym61 , 6 };

// For field LOOP_AS_IMM
static enum_field _sym63[] = { { "as", 0 }, { "imm", 1 }, };
static enum_fields _sym64 = { _sym63 , 2 };

// For field LOOP_AS_IMM_imp_bits__26_26_
static enum_field _sym65[] = { { "as", 0 }, { "imm", 1 }, };
static enum_fields _sym66 = { _sym65 , 2 };

// For field MM
static enum_field _sym67[] = { { "m0", 0 }, { "m1", 1 }, };
static enum_fields _sym68 = { _sym67 , 2 };

// For field MM_imp_bits__22_22_
static enum_field _sym69[] = { { "m0", 0 }, { "m1", 1 }, };
static enum_fields _sym70 = { _sym69 , 2 };

// For field PLUS_MINUS
static enum_field _sym71[] = { { "+", 0 }, { "-", 1 }, };
static enum_fields _sym72 = { _sym71 , 2 };

// For field PLUS_MINUS_imp_bits__23_23_
static enum_field _sym73[] = { { "+", 0 }, { "-", 1 }, };
static enum_fields _sym74 = { _sym73 , 2 };

// For field SRC_REG
static enum_field _sym75[] = { { "a0", 0 }, { "a1", 1 }, { "as0", 4 }, { "as1", 5 }, { "as2", 6 }, { "as3", 7 }, { "di_d", 9 }, { "di_offset_unit", 10 }, { "elem_mask_ptr", 13 }, { "m0", 2 }, { "m1", 3 }, { "mem_elem_rd_ptr", 14 }, { "mem_elem_wr_ptr", 15 }, { "r_rd_ptr", 11 }, { "r_wr_ptr", 12 }, { "vindx_ptr", 8 }, };
static enum_fields _sym76 = { _sym75 , 16 };

// For field SRC_REG_imp_bits__21_18_
static enum_field _sym77[] = { { "a0", 0 }, { "a1", 1 }, { "as0", 4 }, { "as1", 5 }, { "as2", 6 }, { "as3", 7 }, { "di_d", 9 }, { "di_offset_unit", 10 }, { "elem_mask_ptr", 13 }, { "m0", 2 }, { "m1", 3 }, { "mem_elem_rd_ptr", 14 }, { "mem_elem_wr_ptr", 15 }, { "r_rd_ptr", 11 }, { "r_wr_ptr", 12 }, { "vindx_ptr", 8 }, };
static enum_fields _sym78 = { _sym77 , 16 };

// For field ST_MODE
static enum_field _sym79[] = { { "br", 1 }, { "br_dr", 3 }, { "dr", 2 }, { "indirect", 5 }, { "normal", 0 }, };
static enum_fields _sym80 = { _sym79 , 5 };

// For field ST_MODE_imp_bits__28_26_
static enum_field _sym81[] = { { "br", 1 }, { "br_dr", 3 }, { "dr", 2 }, { "indirect", 5 }, { "normal", 0 }, };
static enum_fields _sym82 = { _sym81 , 5 };

// For field WRITE_MODE
static enum_field _sym83[] = { { "e16", 2 }, { "e32", 1 }, { "e4", 4 }, { "e8", 3 }, { "normal", 0 }, };
static enum_fields _sym84 = { _sym83 , 5 };

// For field WRITE_MODE_imp_bits__5_3_
static enum_field _sym85[] = { { "e16", 2 }, { "e32", 1 }, { "e4", 4 }, { "e8", 3 }, { "normal", 0 }, };
static enum_fields _sym86 = { _sym85 , 5 };

// Instruction operands.
static struct adl_field ppc_operands [] = {
  {"AA_imp_bits__20_20__width_32",0,43,1,set_AA_imp_bits__20_20__width_32,clear_AA_imp_bits__20_20__width_32,-1,-1,-1,0,&_sym4,0},	// 0
  {"AS2_imp_bits__23_22__width_32",3,45,2,set_AS2_imp_bits__23_22__width_32,clear_AS2_imp_bits__23_22__width_32,-1,-1,-1,0,&_sym10,0},	// 1
  {"AS_imp_bits__25_24__width_32",2,44,2,set_AS_imp_bits__25_24__width_32,clear_AS_imp_bits__25_24__width_32,-1,-1,-1,0,&_sym12,0},	// 2
  {"BR_MODE_imp_bits__7_4__width_32",7,47,4,set_BR_MODE_imp_bits__7_4__width_32,clear_BR_MODE_imp_bits__7_4__width_32,-1,-1,-1,0,&_sym16,0},	// 3
  {"CLR_DST_imp_bits__21_20__width_32",10,49,2,set_CLR_DST_imp_bits__21_20__width_32,clear_CLR_DST_imp_bits__21_20__width_32,-1,-1,-1,0,&_sym22,0},	// 4
  {"DIGIT_INDEX_imp_bits__23_20__width_32",12,50,4,set_DIGIT_INDEX_imp_bits__23_20__width_32,clear_DIGIT_INDEX_imp_bits__23_20__width_32,-1,-1,-1,0,&_sym26,0},	// 5
  {"DST_REG_MX_imp_bits__22_22__width_32",16,53,1,set_DST_REG_MX_imp_bits__22_22__width_32,clear_DST_REG_MX_imp_bits__22_22__width_32,-1,-1,-1,0,&_sym34,0},	// 6
  {"DST_REG_NON_MX_imp_bits__25_22__width_32",18,54,4,set_DST_REG_NON_MX_imp_bits__25_22__width_32,clear_DST_REG_NON_MX_imp_bits__25_22__width_32,-1,-1,-1,0,&_sym38,0},	// 7
  {"DST_REG_imp_bits__25_22__width_32",15,52,4,set_DST_REG_imp_bits__25_22__width_32,clear_DST_REG_imp_bits__25_22__width_32,-1,-1,-1,0,&_sym40,0},	// 8
  {"ELEM_OFFSET_imp_bits__18_16__width_32",21,55,3,set_ELEM_OFFSET_imp_bits__18_16__width_32,clear_ELEM_OFFSET_imp_bits__18_16__width_32,-1,-1,-1,0,0,0},	// 9
  {"IM11_imp_bits__14_4__width_32",25,58,11,set_IM11_imp_bits__14_4__width_32,clear_IM11_imp_bits__14_4__width_32,-1,-1,-1,0,0,0},	// 10
  {"IM12_imp_bits__15_4__width_32",27,59,12,set_IM12_imp_bits__15_4__width_32,clear_IM12_imp_bits__15_4__width_32,-1,-1,-1,0,0,0},	// 11
  {"IM12s_imp_bits__15_4__width_32",29,60,12,set_IM12s_imp_bits__15_4__width_32,clear_IM12s_imp_bits__15_4__width_32,-1,-1,-1,0,0,0},	// 12
  {"IM16R16_imp_bits__19_4__width_32",32,62,16,set_IM16R16_imp_bits__19_4__width_32,clear_IM16R16_imp_bits__19_4__width_32,-1,16,32,0,0,0},	// 13
  {"IM19R17_imp_bits__3_3_x_21_4__width_32",38,67,19,set_IM19R17_imp_bits__3_3_x_21_4__width_32,clear_IM19R17_imp_bits__3_3_x_21_4__width_32,-1,17,32,0,0,0},	// 14
  {"IM19_imp_bits__22_21_x_19_3__width_32",37,66,19,set_IM19_imp_bits__22_21_x_19_3__width_32,clear_IM19_imp_bits__22_21_x_19_3__width_32,-1,-1,-1,0,0,0},	// 15
  {"IM19sR17_imp_bits__3_3_x_21_4__width_32",41,68,19,set_IM19sR17_imp_bits__3_3_x_21_4__width_32,clear_IM19sR17_imp_bits__3_3_x_21_4__width_32,-1,17,32,0,0,0},	// 16
  {"IM3_imp_bits__18_16__width_32",43,69,3,set_IM3_imp_bits__18_16__width_32,clear_IM3_imp_bits__18_16__width_32,-1,-1,-1,0,0,0},	// 17
  {"IM4s_imp_bits__24_21__width_32",46,71,4,set_IM4s_imp_bits__24_21__width_32,clear_IM4s_imp_bits__24_21__width_32,-1,-1,-1,0,0,0},	// 18
  {"IM5s_imp_bits__25_21__width_32",49,73,5,set_IM5s_imp_bits__25_21__width_32,clear_IM5s_imp_bits__25_21__width_32,-1,-1,-1,0,0,0},	// 19
  {"IM6_imp_bits__9_4__width_32",51,74,6,set_IM6_imp_bits__9_4__width_32,clear_IM6_imp_bits__9_4__width_32,-1,-1,-1,0,0,0},	// 20
  {"IM8_imp_bits__11_4__width_32",53,75,8,set_IM8_imp_bits__11_4__width_32,clear_IM8_imp_bits__11_4__width_32,-1,-1,-1,0,0,0},	// 21
  {"IM8s_imp_bits__28_21__width_32",56,77,8,set_IM8s_imp_bits__28_21__width_32,clear_IM8s_imp_bits__28_21__width_32,-1,-1,-1,0,0,0},	// 22
  {"IM9s_imp_bits__15_7__width_32",60,80,9,set_IM9s_imp_bits__15_7__width_32,clear_IM9s_imp_bits__15_7__width_32,-1,-1,-1,0,0,0},	// 23
  {"IPPU_VCPU_imp_bits__19_19__width_32",62,81,1,set_IPPU_VCPU_imp_bits__19_19__width_32,clear_IPPU_VCPU_imp_bits__19_19__width_32,-1,-1,-1,0,&_sym44,0},	// 24
  {"IY_imp_bits__25_25__width_32",64,82,1,set_IY_imp_bits__25_25__width_32,clear_IY_imp_bits__25_25__width_32,-1,-1,-1,0,&_sym48,0},	// 25
  {"JMP_CC_imp_bits__23_20__width_32",66,83,4,set_JMP_CC_imp_bits__23_20__width_32,clear_JMP_CC_imp_bits__23_20__width_32,-1,-1,-1,0,&_sym52,0},	// 26
  {"LATCH_MODE_imp_bits__6_3__width_32",68,84,4,set_LATCH_MODE_imp_bits__6_3__width_32,clear_LATCH_MODE_imp_bits__6_3__width_32,-1,-1,-1,0,&_sym56,0},	// 27
  {"LD_MODE_imp_bits__26_24__width_32",70,85,3,set_LD_MODE_imp_bits__26_24__width_32,clear_LD_MODE_imp_bits__26_24__width_32,-1,-1,-1,0,&_sym60,0},	// 28
  {"LD_MODE_imp_bits__28_26__width_32",70,85,3,set_LD_MODE_imp_bits__28_26__width_32,clear_LD_MODE_imp_bits__28_26__width_32,-1,-1,-1,0,&_sym62,0},	// 29
  {"LOOP_AS_IMM_imp_bits__26_26__width_32",73,86,1,set_LOOP_AS_IMM_imp_bits__26_26__width_32,clear_LOOP_AS_IMM_imp_bits__26_26__width_32,-1,-1,-1,0,&_sym66,0},	// 30
  {"LOOP_END_imp_bits__0_0__width_32",75,87,1,set_LOOP_END_imp_bits__0_0__width_32,clear_LOOP_END_imp_bits__0_0__width_32,0,-1,-1,1,0,0},	// 31
  {"LOOP_INDEX_imp_bits__2_2__width_32",77,88,1,set_LOOP_INDEX_imp_bits__2_2__width_32,clear_LOOP_INDEX_imp_bits__2_2__width_32,0,-1,-1,1,0,0},	// 32
  {"LOOP_START_imp_bits__1_1__width_32",79,89,1,set_LOOP_START_imp_bits__1_1__width_32,clear_LOOP_START_imp_bits__1_1__width_32,0,-1,-1,1,0,0},	// 33
  {"MM_imp_bits__22_22__width_32",81,90,1,set_MM_imp_bits__22_22__width_32,clear_MM_imp_bits__22_22__width_32,-1,-1,-1,0,&_sym70,0},	// 34
  {"PLUS_MINUS_imp_bits__23_23__width_32",83,91,1,set_PLUS_MINUS_imp_bits__23_23__width_32,clear_PLUS_MINUS_imp_bits__23_23__width_32,-1,-1,-1,0,&_sym74,0},	// 35
  {"RADIX_imp_bits__18_16__width_32",85,92,3,set_RADIX_imp_bits__18_16__width_32,clear_RADIX_imp_bits__18_16__width_32,-1,-1,-1,0,0,0},	// 36
  {"RD_OFFSET_imp_bits__15_7__width_32",87,93,9,set_RD_OFFSET_imp_bits__15_7__width_32,clear_RD_OFFSET_imp_bits__15_7__width_32,-1,-1,-1,0,0,0},	// 37
  {"SET_LOOP_INDEX_imp_bits__23_23__width_32",89,94,1,set_SET_LOOP_INDEX_imp_bits__23_23__width_32,clear_SET_LOOP_INDEX_imp_bits__23_23__width_32,-1,-1,-1,0,0,0},	// 38
  {"SRC_REG_imp_bits__21_18__width_32",91,95,4,set_SRC_REG_imp_bits__21_18__width_32,clear_SRC_REG_imp_bits__21_18__width_32,-1,-1,-1,0,&_sym78,0},	// 39
  {"ST_MODE_imp_bits__28_26__width_32",93,96,3,set_ST_MODE_imp_bits__28_26__width_32,clear_ST_MODE_imp_bits__28_26__width_32,-1,-1,-1,0,&_sym82,0},	// 40
  {"WRITE_MODE_imp_bits__5_3__width_32",107,97,3,set_WRITE_MODE_imp_bits__5_3__width_32,clear_WRITE_MODE_imp_bits__5_3__width_32,-1,-1,-1,0,&_sym86,0},	// 41
  {"WR_OFFSET_imp_bits__15_7__width_32",109,98,9,set_WR_OFFSET_imp_bits__15_7__width_32,clear_WR_OFFSET_imp_bits__15_7__width_32,-1,-1,-1,0,0,0},	// 42
};

static const int num_ppc_operands = 43;

static struct adl_name_pair ppc_operands_by_index [] = {
  { "AA", 43 },
  { "AS", 44 },
  { "AS2", 45 },
  { "BR_MODE", 47 },
  { "CLR_DST", 49 },
  { "DIGIT_INDEX", 50 },
  { "DST_REG", 52 },
  { "DST_REG_MX", 53 },
  { "DST_REG_NON_MX", 54 },
  { "ELEM_OFFSET", 55 },
  { "IM11", 58 },
  { "IM12", 59 },
  { "IM12s", 60 },
  { "IM16R16", 62 },
  { "IM19", 66 },
  { "IM19R17", 67 },
  { "IM19sR17", 68 },
  { "IM3", 69 },
  { "IM4s", 71 },
  { "IM5s", 73 },
  { "IM6", 74 },
  { "IM8", 75 },
  { "IM8s", 77 },
  { "IM9s", 80 },
  { "IPPU_VCPU", 81 },
  { "IY", 82 },
  { "JMP_CC", 83 },
  { "LATCH_MODE", 84 },
  { "LD_MODE", 85 },
  { "LOOP_AS_IMM", 86 },
  { "LOOP_END", 87 },
  { "LOOP_INDEX", 88 },
  { "LOOP_START", 89 },
  { "MM", 90 },
  { "PLUS_MINUS", 91 },
  { "RADIX", 92 },
  { "RD_OFFSET", 93 },
  { "SET_LOOP_INDEX", 94 },
  { "SRC_REG", 95 },
  { "ST_MODE", 96 },
  { "WRITE_MODE", 97 },
  { "WR_OFFSET", 98 },
};

static const int num_ppc_operands_by_index = 42;

enum InstrBlocks {
};


// Instruction add_aX_Is8
static adl_instr_attrs _sym88 = { ((uint64_t)(1ULL << instr_ippu)) , 0 };

// Instruction add_aX_Is8
static struct adl_operand _sym87_operands[] = { {0, 0, ADL_REGISTER, 0, 11, 0ull, 0x1ull, 0ull, 0, 0, 0, 0,-1,-1,},{22, 1, ADL_SIGNED, 0, 3, 18446744073709551489ull-1, 127ull, 0ull, 0, 0, 0, 0,-1,-1,},{32, 2, 0, 0, 29, 0ull, 0x1ull, 0ull, 0, 0, 0, 0,-1,-1,},{33, 3, 0, 0, 30, 0ull, 0x1ull, 0ull, 0, 0, 0, 0,-1,-1,},{31, 4, 0, 0, 31, 0ull, 0x1ull, 0ull, 0, 0, 0, 0,-1,-1,},};
static struct enum_fields *_sym89[] = { &_sym2, 0,  (struct enum_fields *) -1,};

// Instruction add_aX_mY
static adl_instr_attrs _sym91 = { ((uint64_t)(1ULL << instr_ippu)) , 0 };

// Instruction add_aX_mY
static struct adl_operand _sym90_operands[] = { {0, 0, ADL_REGISTER, 0, 11, 0ull, 0x1ull, 0ull, 0, 0, 0, 0,-1,-1,},{34, 1, ADL_REGISTER, 0, 9, 0ull, 0x1ull, 0ull, 0, 0, 0, 0,-1,-1,},{32, 2, 0, 0, 29, 0ull, 0x1ull, 0ull, 0, 0, 0, 0,-1,-1,},{33, 3, 0, 0, 30, 0ull, 0x1ull, 0ull, 0, 0, 0, 0,-1,-1,},{31, 4, 0, 0, 31, 0ull, 0x1ull, 0ull, 0, 0, 0, 0,-1,-1,},};
static struct enum_fields *_sym92[] = { &_sym2, &_sym68,  (struct enum_fields *) -1,};

// Instruction add_cb_aX_Is8
static adl_instr_attrs _sym94 = { ((uint64_t)(1ULL << instr_ippu)) , 0 };

// Instruction add_cb_aX_Is8
static struct adl_operand _sym93_operands[] = { {0, 0, ADL_REGISTER, 0, 11, 0ull, 0x1ull, 0ull, 0, 0, 0, 0,-1,-1,},{22, 1, ADL_SIGNED, 0, 3, 18446744073709551489ull-1, 127ull, 0ull, 0, 0, 0, 0,-1,-1,},{32, 2, 0, 0, 29, 0ull, 0x1ull, 0ull, 0, 0, 0, 0,-1,-1,},{33, 3, 0, 0, 30, 0ull, 0x1ull, 0ull, 0, 0, 0, 0,-1,-1,},{31, 4, 0, 0, 31, 0ull, 0x1ull, 0ull, 0, 0, 0, 0,-1,-1,},};
static struct enum_fields *_sym95[] = { &_sym2, 0,  (struct enum_fields *) -1,};

// Instruction add_cb_aX_mY
static adl_instr_attrs _sym97 = { ((uint64_t)(1ULL << instr_ippu)) , 0 };

// Instruction add_cb_aX_mY
static struct adl_operand _sym96_operands[] = { {0, 0, ADL_REGISTER, 0, 11, 0ull, 0x1ull, 0ull, 0, 0, 0, 0,-1,-1,},{34, 1, ADL_REGISTER, 0, 9, 0ull, 0x1ull, 0ull, 0, 0, 0, 0,-1,-1,},{32, 2, 0, 0, 29, 0ull, 0x1ull, 0ull, 0, 0, 0, 0,-1,-1,},{33, 3, 0, 0, 30, 0ull, 0x1ull, 0ull, 0, 0, 0, 0,-1,-1,},{31, 4, 0, 0, 31, 0ull, 0x1ull, 0ull, 0, 0, 0, 0,-1,-1,},};
static struct enum_fields *_sym98[] = { &_sym2, &_sym68,  (struct enum_fields *) -1,};

// Instruction clr_Rx
static adl_instr_attrs _sym100 = { ((uint64_t)(1ULL << instr_ippu)) , 0 };

// Instruction clr_Rx
static struct adl_operand _sym99_operands[] = { {4, 0, 0, 0, 10, 0ull, 0x3ull, 0ull, 0, 0, 0, 0,-1,-1,},{32, 1, 0, 0, 29, 0ull, 0x1ull, 0ull, 0, 0, 0, 0,-1,-1,},{33, 2, 0, 0, 30, 0ull, 0x1ull, 0ull, 0, 0, 0, 0,-1,-1,},{31, 3, 0, 0, 31, 0ull, 0x1ull, 0ull, 0, 0, 0, 0,-1,-1,},};
static struct enum_fields *_sym101[] = { &_sym20,  (struct enum_fields *) -1,};

// Instruction clr_mask_all
static adl_instr_attrs _sym103 = { ((uint64_t)(1ULL << instr_ippu)) , 0 };

// Instruction clr_mask_all
static struct adl_operand _sym102_operands[] = { {32, 0, 0, 0, 29, 0ull, 0x1ull, 0ull, 0, 0, 0, 0,-1,-1,},{33, 1, 0, 0, 30, 0ull, 0x1ull, 0ull, 0, 0, 0, 0,-1,-1,},{31, 2, 0, 0, 31, 0ull, 0x1ull, 0ull, 0, 0, 0, 0,-1,-1,},};
static struct enum_fields *_sym104[] = {  (struct enum_fields *) -1,};

// Instruction clr_mask_bit
static adl_instr_attrs _sym106 = { ((uint64_t)(1ULL << instr_ippu)) , 0 };

// Instruction clr_mask_bit
static struct adl_operand _sym105_operands[] = { {11, 0, 0, 0, 16, 0ull, 0xfffull, 0ull, 0, 0, 0, 0,-1,-1,},{32, 1, 0, 0, 29, 0ull, 0x1ull, 0ull, 0, 0, 0, 0,-1,-1,},{33, 2, 0, 0, 30, 0ull, 0x1ull, 0ull, 0, 0, 0, 0,-1,-1,},{31, 3, 0, 0, 31, 0ull, 0x1ull, 0ull, 0, 0, 0, 0,-1,-1,},};
static struct enum_fields *_sym107[] = { 0,  (struct enum_fields *) -1,};

// Instruction cmp_bit
static adl_instr_attrs _sym109 = { ((uint64_t)(1ULL << instr_ippu)) , 0 };

// Instruction cmp_bit
static struct adl_operand _sym108_operands[] = { {12, 0, ADL_EXT_SIGNED, 0, 16, 18446744073709549569ull-1, 4095ull, 0ull, 0, 0, 0, 0,-1,-1,},{32, 1, 0, 0, 29, 0ull, 0x1ull, 0ull, 0, 0, 0, 0,-1,-1,},{33, 2, 0, 0, 30, 0ull, 0x1ull, 0ull, 0, 0, 0, 0,-1,-1,},{31, 3, 0, 0, 31, 0ull, 0x1ull, 0ull, 0, 0, 0, 0,-1,-1,},};
static struct enum_fields *_sym110[] = { 0,  (struct enum_fields *) -1,};

// Instruction done
static adl_instr_attrs _sym112 = { ((uint64_t)(1ULL << instr_ippu)) , 0 };

// Instruction done
static struct adl_operand _sym111_operands[] = { {32, 0, 0, 0, 29, 0ull, 0x1ull, 0ull, 0, 0, 0, 0,-1,-1,},{33, 1, 0, 0, 30, 0ull, 0x1ull, 0ull, 0, 0, 0, 0,-1,-1,},{31, 2, 0, 0, 31, 0ull, 0x1ull, 0ull, 0, 0, 0, 0,-1,-1,},};
static struct enum_fields *_sym113[] = {  (struct enum_fields *) -1,};

// Instruction jmp
static adl_instr_attrs _sym115 = { ((uint64_t)(1ULL << instr_ippu)) , 0 };

// Instruction jmp
static struct adl_operand _sym114_operands[] = { {26, 0, 0, 0, 8, 0ull, 0xfull, 0ull, 0, 0, 0, 0,-1,-1,},{13, 1, ADL_ABSOLUTE, 0, 12, 0ull, 0xffffull, 0ull, 0, 0, 0, 0,-1,-1,},{32, 2, 0, 0, 29, 0ull, 0x1ull, 0ull, 0, 0, 0, 0,-1,-1,},{33, 3, 0, 0, 30, 0ull, 0x1ull, 0ull, 0, 0, 0, 0,-1,-1,},{31, 4, 0, 0, 31, 0ull, 0x1ull, 0ull, 0, 0, 0, 0,-1,-1,},};
static struct enum_fields *_sym116[] = { &_sym52, 0, 0, 0, 0,  (struct enum_fields *) -1,};

// Instruction jmp_jmp
static adl_instr_attrs _sym118 = { ((uint64_t)(1ULL << instr_ippu)) , 0 };

// Shorthand:  jmp_jmp -> jmp;
static struct adl_operand _sym119_operands[] = { {13, 0, ADL_ABSOLUTE, 0, 12, 0ull, 0xffffull, 0ull, 0, 0, 0, 0,-1,-1,},{32, 1, 0, 0, 29, 0ull, 0x1ull, 0ull, 0, 0, 0, 0,-1,-1,},{33, 2, 0, 0, 30, 0ull, 0x1ull, 0ull, 0, 0, 0, 0,-1,-1,},{31, 3, 0, 0, 31, 0ull, 0x1ull, 0ull, 0, 0, 0, 0,-1,-1,},};

// Instruction jmp_jmp
static struct adl_operand _sym117_operands[] = { {62, 0, ADL_ABSOLUTE, 0, 31, 0ull, 0xffffull, 0ull, 0, 0, 0, 0,-1,-1,},{88, 1, 0, 0, 31, 0ull, 0x1ull, 0ull, 0, 0, 0, 0,-1,-1,},{89, 2, 0, 0, 31, 0ull, 0x1ull, 0ull, 0, 0, 0, 0,-1,-1,},{87, 3, 0, 0, 31, 0ull, 0x1ull, 0ull, 0, 0, 0, 0,-1,-1,},};
static struct adl_opcode _sym120[] = {
  // jmp    (0)
  { "jmp", 4, 32, 32,  0x3, { 0x10300000,},0, "", 0, 4, 4, 0, 0, _sym119_operands,0,0,0, 0,&_sym118,0,{}, 0,0,0,0,0,-1, },
};

static struct enum_fields *_sym121[] = { 0,  (struct enum_fields *) -1,};

// Instruction jmp_nz
static adl_instr_attrs _sym123 = { ((uint64_t)(1ULL << instr_ippu)) , 0 };

// Shorthand:  jmp_nz -> jmp;
static struct adl_operand _sym124_operands[] = { {13, 0, ADL_ABSOLUTE, 0, 12, 0ull, 0xffffull, 0ull, 0, 0, 0, 0,-1,-1,},{32, 1, 0, 0, 29, 0ull, 0x1ull, 0ull, 0, 0, 0, 0,-1,-1,},{33, 2, 0, 0, 30, 0ull, 0x1ull, 0ull, 0, 0, 0, 0,-1,-1,},{31, 3, 0, 0, 31, 0ull, 0x1ull, 0ull, 0, 0, 0, 0,-1,-1,},};

// Instruction jmp_nz
static struct adl_operand _sym122_operands[] = { {62, 0, ADL_ABSOLUTE, 0, 31, 0ull, 0xffffull, 0ull, 0, 0, 0, 0,-1,-1,},{88, 1, 0, 0, 31, 0ull, 0x1ull, 0ull, 0, 0, 0, 0,-1,-1,},{89, 2, 0, 0, 31, 0ull, 0x1ull, 0ull, 0, 0, 0, 0,-1,-1,},{87, 3, 0, 0, 31, 0ull, 0x1ull, 0ull, 0, 0, 0, 0,-1,-1,},};
static struct adl_opcode _sym125[] = {
  // jmp    (0)
  { "jmp", 4, 32, 32,  0x3, { 0x10200000,},0, "", 0, 4, 4, 0, 0, _sym124_operands,0,0,0, 0,&_sym123,0,{}, 0,0,0,0,0,-1, },
};

static struct enum_fields *_sym126[] = { 0,  (struct enum_fields *) -1,};

// Instruction jmp_z
static adl_instr_attrs _sym128 = { ((uint64_t)(1ULL << instr_ippu)) , 0 };

// Shorthand:  jmp_z -> jmp;
static struct adl_operand _sym129_operands[] = { {13, 0, ADL_ABSOLUTE, 0, 12, 0ull, 0xffffull, 0ull, 0, 0, 0, 0,-1,-1,},{32, 1, 0, 0, 29, 0ull, 0x1ull, 0ull, 0, 0, 0, 0,-1,-1,},{33, 2, 0, 0, 30, 0ull, 0x1ull, 0ull, 0, 0, 0, 0,-1,-1,},{31, 3, 0, 0, 31, 0ull, 0x1ull, 0ull, 0, 0, 0, 0,-1,-1,},};

// Instruction jmp_z
static struct adl_operand _sym127_operands[] = { {62, 0, ADL_ABSOLUTE, 0, 31, 0ull, 0xffffull, 0ull, 0, 0, 0, 0,-1,-1,},{88, 1, 0, 0, 31, 0ull, 0x1ull, 0ull, 0, 0, 0, 0,-1,-1,},{89, 2, 0, 0, 31, 0ull, 0x1ull, 0ull, 0, 0, 0, 0,-1,-1,},{87, 3, 0, 0, 31, 0ull, 0x1ull, 0ull, 0, 0, 0, 0,-1,-1,},};
static struct adl_opcode _sym130[] = {
  // jmp    (0)
  { "jmp", 4, 32, 32,  0x3, { 0x10100000,},0, "", 0, 4, 4, 0, 0, _sym129_operands,0,0,0, 0,&_sym128,0,{}, 0,0,0,0,0,-1, },
};

static struct enum_fields *_sym131[] = { 0,  (struct enum_fields *) -1,};

// Instruction jsr
static adl_instr_attrs _sym133 = { ((uint64_t)(1ULL << instr_ippu)) , 0 };

// Shorthand:  jsr -> jmp;
static struct adl_operand _sym134_operands[] = { {13, 0, ADL_ABSOLUTE, 0, 12, 0ull, 0xffffull, 0ull, 0, 0, 0, 0,-1,-1,},{32, 1, 0, 0, 29, 0ull, 0x1ull, 0ull, 0, 0, 0, 0,-1,-1,},{33, 2, 0, 0, 30, 0ull, 0x1ull, 0ull, 0, 0, 0, 0,-1,-1,},{31, 3, 0, 0, 31, 0ull, 0x1ull, 0ull, 0, 0, 0, 0,-1,-1,},};

// Instruction jsr
static struct adl_operand _sym132_operands[] = { {62, 0, ADL_ABSOLUTE, 0, 31, 0ull, 0xffffull, 0ull, 0, 0, 0, 0,-1,-1,},{88, 1, 0, 0, 31, 0ull, 0x1ull, 0ull, 0, 0, 0, 0,-1,-1,},{89, 2, 0, 0, 31, 0ull, 0x1ull, 0ull, 0, 0, 0, 0,-1,-1,},{87, 3, 0, 0, 31, 0ull, 0x1ull, 0ull, 0, 0, 0, 0,-1,-1,},};
static struct adl_opcode _sym135[] = {
  // jmp    (0)
  { "jmp", 4, 32, 32,  0x3, { 0x10700000,},0, "", 0, 4, 4, 0, 0, _sym134_operands,0,0,0, 0,&_sym133,0,{}, 0,0,0,0,0,-1, },
};

static struct enum_fields *_sym136[] = { 0,  (struct enum_fields *) -1,};

// Instruction jsr_nz
static adl_instr_attrs _sym138 = { ((uint64_t)(1ULL << instr_ippu)) , 0 };

// Shorthand:  jsr_nz -> jmp;
static struct adl_operand _sym139_operands[] = { {13, 0, ADL_ABSOLUTE, 0, 12, 0ull, 0xffffull, 0ull, 0, 0, 0, 0,-1,-1,},{32, 1, 0, 0, 29, 0ull, 0x1ull, 0ull, 0, 0, 0, 0,-1,-1,},{33, 2, 0, 0, 30, 0ull, 0x1ull, 0ull, 0, 0, 0, 0,-1,-1,},{31, 3, 0, 0, 31, 0ull, 0x1ull, 0ull, 0, 0, 0, 0,-1,-1,},};

// Instruction jsr_nz
static struct adl_operand _sym137_operands[] = { {62, 0, ADL_ABSOLUTE, 0, 31, 0ull, 0xffffull, 0ull, 0, 0, 0, 0,-1,-1,},{88, 1, 0, 0, 31, 0ull, 0x1ull, 0ull, 0, 0, 0, 0,-1,-1,},{89, 2, 0, 0, 31, 0ull, 0x1ull, 0ull, 0, 0, 0, 0,-1,-1,},{87, 3, 0, 0, 31, 0ull, 0x1ull, 0ull, 0, 0, 0, 0,-1,-1,},};
static struct adl_opcode _sym140[] = {
  // jmp    (0)
  { "jmp", 4, 32, 32,  0x3, { 0x10600000,},0, "", 0, 4, 4, 0, 0, _sym139_operands,0,0,0, 0,&_sym138,0,{}, 0,0,0,0,0,-1, },
};

static struct enum_fields *_sym141[] = { 0,  (struct enum_fields *) -1,};

// Instruction jsr_z
static adl_instr_attrs _sym143 = { ((uint64_t)(1ULL << instr_ippu)) , 0 };

// Shorthand:  jsr_z -> jmp;
static struct adl_operand _sym144_operands[] = { {13, 0, ADL_ABSOLUTE, 0, 12, 0ull, 0xffffull, 0ull, 0, 0, 0, 0,-1,-1,},{32, 1, 0, 0, 29, 0ull, 0x1ull, 0ull, 0, 0, 0, 0,-1,-1,},{33, 2, 0, 0, 30, 0ull, 0x1ull, 0ull, 0, 0, 0, 0,-1,-1,},{31, 3, 0, 0, 31, 0ull, 0x1ull, 0ull, 0, 0, 0, 0,-1,-1,},};

// Instruction jsr_z
static struct adl_operand _sym142_operands[] = { {62, 0, ADL_ABSOLUTE, 0, 31, 0ull, 0xffffull, 0ull, 0, 0, 0, 0,-1,-1,},{88, 1, 0, 0, 31, 0ull, 0x1ull, 0ull, 0, 0, 0, 0,-1,-1,},{89, 2, 0, 0, 31, 0ull, 0x1ull, 0ull, 0, 0, 0, 0,-1,-1,},{87, 3, 0, 0, 31, 0ull, 0x1ull, 0ull, 0, 0, 0, 0,-1,-1,},};
static struct adl_opcode _sym145[] = {
  // jmp    (0)
  { "jmp", 4, 32, 32,  0x3, { 0x10500000,},0, "", 0, 4, 4, 0, 0, _sym144_operands,0,0,0, 0,&_sym143,0,{}, 0,0,0,0,0,-1, },
};

static struct enum_fields *_sym146[] = { 0,  (struct enum_fields *) -1,};

// Instruction ld_aX_Is5
static adl_instr_attrs _sym148 = { ((uint64_t)(1ULL << instr_ippu)) , 0 };

// Instruction ld_aX_Is5
static struct adl_operand _sym147_operands[] = { {29, 0, 0, 0, 3, 0ull, 0x7ull, 0ull, 0, 0, 0, 0,-1,-1,},{19, 1, ADL_SIGNED, 0, 6, 18446744073709551601ull-1, 15ull, 0ull, 0, 0, 0, 0,-1,-1,},{0, 2, ADL_REGISTER, 0, 11, 0ull, 0x1ull, 0ull, 0, 0, 0, 0,-1,-1,},{24, 3, 0, 0, 12, 0ull, 0x1ull, 0ull, 0, 0, 0, 0,-1,-1,},{9, 4, ADL_SIGNED, 0, 13, 18446744073709551613ull-1, 3ull, 0ull, 0, 0, 0, 0,-1,-1,},{42, 5, ADL_SIGNED, 0, 16, 18446744073709551361ull-1, 255ull, 0ull, 0, 0, 0, 0,-1,-1,},{27, 6, 0, 0, 25, 0ull, 0xfull, 0ull, 0, 0, 0, 0,-1,-1,},{32, 7, 0, 0, 29, 0ull, 0x1ull, 0ull, 0, 0, 0, 0,-1,-1,},{33, 8, 0, 0, 30, 0ull, 0x1ull, 0ull, 0, 0, 0, 0,-1,-1,},{31, 9, 0, 0, 31, 0ull, 0x1ull, 0ull, 0, 0, 0, 0,-1,-1,},};
static struct enum_fields *_sym149[] = { &_sym62, 0, &_sym4, &_sym44, 0, 0, &_sym56, 0, 0, 0,  (struct enum_fields *) -1,};

// Instruction ld_aX_Is5_minus
static adl_instr_attrs _sym151 = { ((uint64_t)(1ULL << instr_ippu)) , 0 };

// Shorthand:  ld_aX_Is5_minus -> ld_aX_Is5;

static bfd_uint64_t _sym153_modifier (const expressionS *operands, unsigned __cia ATTRIBUTE_UNUSED) { return - (IM5n_checker((operands[2].X_add_number),FALSE)); }
static struct adl_operand _sym152_operands[] = { {29, 4, 0, 0, 3, 0ull, 0x7ull, 0ull, 0, 0, 0, 0,-1,-1,},{19, 0, 0, 0, 0, 0, 0, 0, _sym153_modifier, 0, 0,0, -1,-1,},{0, 1, ADL_REGISTER, 0, 11, 0ull, 0x1ull, 0ull, 0, 0, 0, 0,-1,-1,},{24, 0, 0, 0, 12, 0ull, 0x1ull, 0ull, 0, 0, 0, 0,-1,-1,},{9, 3, ADL_SIGNED, 0, 13, 18446744073709551613ull-1, 3ull, 0ull, 0, 0, 0, 0,-1,-1,},{42, 5, ADL_SIGNED, 0, 16, 18446744073709551361ull-1, 255ull, 0ull, 0, 0, 0, 0,-1,-1,},{27, 6, 0, 0, 25, 0ull, 0xfull, 0ull, 0, 0, 0, 0,-1,-1,},{32, 7, 0, 0, 29, 0ull, 0x1ull, 0ull, 0, 0, 0, 0,-1,-1,},{33, 8, 0, 0, 30, 0ull, 0x1ull, 0ull, 0, 0, 0, 0,-1,-1,},{31, 9, 0, 0, 31, 0ull, 0x1ull, 0ull, 0, 0, 0, 0,-1,-1,},};

// Instruction ld_aX_Is5_minus
static struct adl_operand _sym150_operands[] = { {81, 0, 0, 0, 31, 0ull, 0x1ull, 0ull, 0, 0, 0, 0,-1,-1,},{43, 1, ADL_REGISTER, 0, 31, 0ull, 0x1ull, 0ull, 0, 0, 0, 0,-1,-1,},{72, 2, 0, 0, 31, 0ull, 0x1full, 0ull, 0, 0,IM5n_checker, 0,-1,-1,},{55, 3, ADL_SIGNED, 0, 31, 18446744073709551613ull-1, 3ull, 0ull, 0, 0, 0, 0,-1,-1,},{85, 4, 0, 0, 31, 0ull, 0x7ull, 0ull, 0, 0, 0, 0,-1,-1,},{98, 5, ADL_SIGNED, 0, 31, 18446744073709551361ull-1, 255ull, 0ull, 0, 0, 0, 0,-1,-1,},{84, 6, 0, 0, 31, 0ull, 0xfull, 0ull, 0, 0, 0, 0,-1,-1,},{88, 7, 0, 0, 31, 0ull, 0x1ull, 0ull, 0, 0, 0, 0,-1,-1,},{89, 8, 0, 0, 31, 0ull, 0x1ull, 0ull, 0, 0, 0, 0,-1,-1,},{87, 9, 0, 0, 31, 0ull, 0x1ull, 0ull, 0, 0, 0, 0,-1,-1,},};
static struct adl_opcode _sym154[] = {
  // ld_aX_Is5    (0)
  { "ld_aX_Is5", 4, 32, 32,  0x3, { 0xc0000000,},0, "", 0, 10, 10, 0, 1, _sym152_operands,0,0,0, 0,&_sym151,0,{}, 0,0,0,0,0,-1, },
};

static struct enum_fields *_sym155[] = { &_sym42, &_sym2, 0, 0, &_sym58, 0, &_sym54,  (struct enum_fields *) -1,};

// Instruction ld_aX_Is5_plus
static adl_instr_attrs _sym157 = { ((uint64_t)(1ULL << instr_ippu)) , 0 };

// Shorthand:  ld_aX_Is5_plus -> ld_aX_Is5;
static struct adl_operand _sym158_operands[] = { {29, 4, 0, 0, 3, 0ull, 0x7ull, 0ull, 0, 0, 0, 0,-1,-1,},{19, 2, ADL_SIGNED, 0, 6, 18446744073709551601ull-1, 15ull, 0ull, 0, 0, 0, 0,-1,-1,},{0, 1, ADL_REGISTER, 0, 11, 0ull, 0x1ull, 0ull, 0, 0, 0, 0,-1,-1,},{24, 0, 0, 0, 12, 0ull, 0x1ull, 0ull, 0, 0, 0, 0,-1,-1,},{9, 3, ADL_SIGNED, 0, 13, 18446744073709551613ull-1, 3ull, 0ull, 0, 0, 0, 0,-1,-1,},{42, 5, ADL_SIGNED, 0, 16, 18446744073709551361ull-1, 255ull, 0ull, 0, 0, 0, 0,-1,-1,},{27, 6, 0, 0, 25, 0ull, 0xfull, 0ull, 0, 0, 0, 0,-1,-1,},{32, 7, 0, 0, 29, 0ull, 0x1ull, 0ull, 0, 0, 0, 0,-1,-1,},{33, 8, 0, 0, 30, 0ull, 0x1ull, 0ull, 0, 0, 0, 0,-1,-1,},{31, 9, 0, 0, 31, 0ull, 0x1ull, 0ull, 0, 0, 0, 0,-1,-1,},};

// Instruction ld_aX_Is5_plus
static struct adl_operand _sym156_operands[] = { {81, 0, 0, 0, 31, 0ull, 0x1ull, 0ull, 0, 0, 0, 0,-1,-1,},{43, 1, ADL_REGISTER, 0, 31, 0ull, 0x1ull, 0ull, 0, 0, 0, 0,-1,-1,},{73, 2, ADL_SIGNED, 0, 31, 18446744073709551601ull-1, 15ull, 0ull, 0, 0, 0, 0,-1,-1,},{55, 3, ADL_SIGNED, 0, 31, 18446744073709551613ull-1, 3ull, 0ull, 0, 0, 0, 0,-1,-1,},{85, 4, 0, 0, 31, 0ull, 0x7ull, 0ull, 0, 0, 0, 0,-1,-1,},{98, 5, ADL_SIGNED, 0, 31, 18446744073709551361ull-1, 255ull, 0ull, 0, 0, 0, 0,-1,-1,},{84, 6, 0, 0, 31, 0ull, 0xfull, 0ull, 0, 0, 0, 0,-1,-1,},{88, 7, 0, 0, 31, 0ull, 0x1ull, 0ull, 0, 0, 0, 0,-1,-1,},{89, 8, 0, 0, 31, 0ull, 0x1ull, 0ull, 0, 0, 0, 0,-1,-1,},{87, 9, 0, 0, 31, 0ull, 0x1ull, 0ull, 0, 0, 0, 0,-1,-1,},};
static struct adl_opcode _sym159[] = {
  // ld_aX_Is5    (0)
  { "ld_aX_Is5", 4, 32, 32,  0x3, { 0xc0000000,},0, "", 0, 10, 10, 0, 1, _sym158_operands,0,0,0, 0,&_sym157,0,{}, 0,0,0,0,0,-1, },
};

static struct enum_fields *_sym160[] = { &_sym42, &_sym2, 0, 0, &_sym58, 0, &_sym54,  (struct enum_fields *) -1,};

// Instruction ld_aX_Is8
static adl_instr_attrs _sym162 = { ((uint64_t)(1ULL << instr_ippu)) , 0 };

// Instruction ld_aX_Is8
static struct adl_operand _sym161_operands[] = { {22, 0, ADL_SIGNED, 0, 3, 18446744073709551489ull-1, 127ull, 0ull, 0, 0, 0, 0,-1,-1,},{0, 1, ADL_REGISTER, 0, 11, 0ull, 0x1ull, 0ull, 0, 0, 0, 0,-1,-1,},{24, 2, 0, 0, 12, 0ull, 0x1ull, 0ull, 0, 0, 0, 0,-1,-1,},{9, 3, ADL_SIGNED, 0, 13, 18446744073709551613ull-1, 3ull, 0ull, 0, 0, 0, 0,-1,-1,},{42, 4, ADL_SIGNED, 0, 16, 18446744073709551361ull-1, 255ull, 0ull, 0, 0, 0, 0,-1,-1,},{27, 5, 0, 0, 25, 0ull, 0xfull, 0ull, 0, 0, 0, 0,-1,-1,},{32, 6, 0, 0, 29, 0ull, 0x1ull, 0ull, 0, 0, 0, 0,-1,-1,},{33, 7, 0, 0, 30, 0ull, 0x1ull, 0ull, 0, 0, 0, 0,-1,-1,},{31, 8, 0, 0, 31, 0ull, 0x1ull, 0ull, 0, 0, 0, 0,-1,-1,},};
static struct enum_fields *_sym163[] = { 0, &_sym4, &_sym44, 0, 0, &_sym56, 0, 0, 0,  (struct enum_fields *) -1,};

// Instruction ld_aX_Is8_minus
static adl_instr_attrs _sym165 = { ((uint64_t)(1ULL << instr_ippu)) , 0 };

// Shorthand:  ld_aX_Is8_minus -> ld_aX_Is8;

static bfd_uint64_t _sym167_modifier (const expressionS *operands, unsigned __cia ATTRIBUTE_UNUSED) { return - (IM8n_checker((operands[2].X_add_number),FALSE)); }
static struct adl_operand _sym166_operands[] = { {22, 0, 0, 0, 0, 0, 0, 0, _sym167_modifier, 0, 0,0, -1,-1,},{0, 1, ADL_REGISTER, 0, 11, 0ull, 0x1ull, 0ull, 0, 0, 0, 0,-1,-1,},{24, 0, 0, 0, 12, 0ull, 0x1ull, 0ull, 0, 0, 0, 0,-1,-1,},{9, 3, ADL_SIGNED, 0, 13, 18446744073709551613ull-1, 3ull, 0ull, 0, 0, 0, 0,-1,-1,},{42, 4, ADL_SIGNED, 0, 16, 18446744073709551361ull-1, 255ull, 0ull, 0, 0, 0, 0,-1,-1,},{27, 5, 0, 0, 25, 0ull, 0xfull, 0ull, 0, 0, 0, 0,-1,-1,},{32, 6, 0, 0, 29, 0ull, 0x1ull, 0ull, 0, 0, 0, 0,-1,-1,},{33, 7, 0, 0, 30, 0ull, 0x1ull, 0ull, 0, 0, 0, 0,-1,-1,},{31, 8, 0, 0, 31, 0ull, 0x1ull, 0ull, 0, 0, 0, 0,-1,-1,},};

// Instruction ld_aX_Is8_minus
static struct adl_operand _sym164_operands[] = { {81, 0, 0, 0, 31, 0ull, 0x1ull, 0ull, 0, 0, 0, 0,-1,-1,},{43, 1, ADL_REGISTER, 0, 31, 0ull, 0x1ull, 0ull, 0, 0, 0, 0,-1,-1,},{76, 2, 0, 0, 31, 0ull, 0xffull, 0ull, 0, 0,IM8n_checker, 0,-1,-1,},{55, 3, ADL_SIGNED, 0, 31, 18446744073709551613ull-1, 3ull, 0ull, 0, 0, 0, 0,-1,-1,},{98, 4, ADL_SIGNED, 0, 31, 18446744073709551361ull-1, 255ull, 0ull, 0, 0, 0, 0,-1,-1,},{84, 5, 0, 0, 31, 0ull, 0xfull, 0ull, 0, 0, 0, 0,-1,-1,},{88, 6, 0, 0, 31, 0ull, 0x1ull, 0ull, 0, 0, 0, 0,-1,-1,},{89, 7, 0, 0, 31, 0ull, 0x1ull, 0ull, 0, 0, 0, 0,-1,-1,},{87, 8, 0, 0, 31, 0ull, 0x1ull, 0ull, 0, 0, 0, 0,-1,-1,},};
static struct adl_opcode _sym168[] = {
  // ld_aX_Is8    (0)
  { "ld_aX_Is8", 4, 32, 32,  0x3, { 0xe0000000,},0, "", 0, 9, 9, 0, 1, _sym166_operands,0,0,0, 0,&_sym165,0,{}, 0,0,0,0,0,-1, },
};

static struct enum_fields *_sym169[] = { &_sym42, &_sym2, 0, 0, 0, &_sym54,  (struct enum_fields *) -1,};

// Instruction ld_aX_Is8_plus
static adl_instr_attrs _sym171 = { ((uint64_t)(1ULL << instr_ippu)) , 0 };

// Shorthand:  ld_aX_Is8_plus -> ld_aX_Is8;
static struct adl_operand _sym172_operands[] = { {22, 2, ADL_SIGNED, 0, 3, 18446744073709551489ull-1, 127ull, 0ull, 0, 0, 0, 0,-1,-1,},{0, 1, ADL_REGISTER, 0, 11, 0ull, 0x1ull, 0ull, 0, 0, 0, 0,-1,-1,},{24, 0, 0, 0, 12, 0ull, 0x1ull, 0ull, 0, 0, 0, 0,-1,-1,},{9, 3, ADL_SIGNED, 0, 13, 18446744073709551613ull-1, 3ull, 0ull, 0, 0, 0, 0,-1,-1,},{42, 4, ADL_SIGNED, 0, 16, 18446744073709551361ull-1, 255ull, 0ull, 0, 0, 0, 0,-1,-1,},{27, 5, 0, 0, 25, 0ull, 0xfull, 0ull, 0, 0, 0, 0,-1,-1,},{32, 6, 0, 0, 29, 0ull, 0x1ull, 0ull, 0, 0, 0, 0,-1,-1,},{33, 7, 0, 0, 30, 0ull, 0x1ull, 0ull, 0, 0, 0, 0,-1,-1,},{31, 8, 0, 0, 31, 0ull, 0x1ull, 0ull, 0, 0, 0, 0,-1,-1,},};

// Instruction ld_aX_Is8_plus
static struct adl_operand _sym170_operands[] = { {81, 0, 0, 0, 31, 0ull, 0x1ull, 0ull, 0, 0, 0, 0,-1,-1,},{43, 1, ADL_REGISTER, 0, 31, 0ull, 0x1ull, 0ull, 0, 0, 0, 0,-1,-1,},{77, 2, ADL_SIGNED, 0, 31, 18446744073709551489ull-1, 127ull, 0ull, 0, 0, 0, 0,-1,-1,},{55, 3, ADL_SIGNED, 0, 31, 18446744073709551613ull-1, 3ull, 0ull, 0, 0, 0, 0,-1,-1,},{98, 4, ADL_SIGNED, 0, 31, 18446744073709551361ull-1, 255ull, 0ull, 0, 0, 0, 0,-1,-1,},{84, 5, 0, 0, 31, 0ull, 0xfull, 0ull, 0, 0, 0, 0,-1,-1,},{88, 6, 0, 0, 31, 0ull, 0x1ull, 0ull, 0, 0, 0, 0,-1,-1,},{89, 7, 0, 0, 31, 0ull, 0x1ull, 0ull, 0, 0, 0, 0,-1,-1,},{87, 8, 0, 0, 31, 0ull, 0x1ull, 0ull, 0, 0, 0, 0,-1,-1,},};
static struct adl_opcode _sym173[] = {
  // ld_aX_Is8    (0)
  { "ld_aX_Is8", 4, 32, 32,  0x3, { 0xe0000000,},0, "", 0, 9, 9, 0, 1, _sym172_operands,0,0,0, 0,&_sym171,0,{}, 0,0,0,0,0,-1, },
};

static struct enum_fields *_sym174[] = { &_sym42, &_sym2, 0, 0, 0, &_sym54,  (struct enum_fields *) -1,};

// Instruction ld_aX_iY_Is4
static adl_instr_attrs _sym176 = { ((uint64_t)(1ULL << instr_ippu)) , 0 };

// Instruction ld_aX_iY_Is4
static struct adl_operand _sym175_operands[] = { {25, 0, ADL_REGISTER, 0, 6, 0ull, 0x1ull, 0ull, 0, 0, 0, 0,-1,-1,},{18, 1, ADL_SIGNED, 0, 7, 18446744073709551609ull-1, 7ull, 0ull, 0, 0, 0, 0,-1,-1,},{0, 2, ADL_REGISTER, 0, 11, 0ull, 0x1ull, 0ull, 0, 0, 0, 0,-1,-1,},{24, 3, 0, 0, 12, 0ull, 0x1ull, 0ull, 0, 0, 0, 0,-1,-1,},{9, 4, ADL_SIGNED, 0, 13, 18446744073709551613ull-1, 3ull, 0ull, 0, 0, 0, 0,-1,-1,},{42, 5, ADL_SIGNED, 0, 16, 18446744073709551361ull-1, 255ull, 0ull, 0, 0, 0, 0,-1,-1,},{27, 6, 0, 0, 25, 0ull, 0xfull, 0ull, 0, 0, 0, 0,-1,-1,},{32, 7, 0, 0, 29, 0ull, 0x1ull, 0ull, 0, 0, 0, 0,-1,-1,},{33, 8, 0, 0, 30, 0ull, 0x1ull, 0ull, 0, 0, 0, 0,-1,-1,},{31, 9, 0, 0, 31, 0ull, 0x1ull, 0ull, 0, 0, 0, 0,-1,-1,},};
static struct enum_fields *_sym177[] = { &_sym48, 0, &_sym4, &_sym44, 0, 0, &_sym56, 0, 0, 0,  (struct enum_fields *) -1,};

// Instruction ld_aX_iY_Is4_minus
static adl_instr_attrs _sym179 = { ((uint64_t)(1ULL << instr_ippu)) , 0 };

// Shorthand:  ld_aX_iY_Is4_minus -> ld_aX_iY_Is4;

static bfd_uint64_t _sym181_modifier (const expressionS *operands, unsigned __cia ATTRIBUTE_UNUSED) { return - (IM4n_checker((operands[3].X_add_number),FALSE)); }
static struct adl_operand _sym180_operands[] = { {25, 2, ADL_REGISTER, 0, 6, 0ull, 0x1ull, 0ull, 0, 0, 0, 0,-1,-1,},{18, 0, 0, 0, 0, 0, 0, 0, _sym181_modifier, 0, 0,0, -1,-1,},{0, 1, ADL_REGISTER, 0, 11, 0ull, 0x1ull, 0ull, 0, 0, 0, 0,-1,-1,},{24, 0, 0, 0, 12, 0ull, 0x1ull, 0ull, 0, 0, 0, 0,-1,-1,},{9, 4, ADL_SIGNED, 0, 13, 18446744073709551613ull-1, 3ull, 0ull, 0, 0, 0, 0,-1,-1,},{42, 5, ADL_SIGNED, 0, 16, 18446744073709551361ull-1, 255ull, 0ull, 0, 0, 0, 0,-1,-1,},{27, 6, 0, 0, 25, 0ull, 0xfull, 0ull, 0, 0, 0, 0,-1,-1,},{32, 7, 0, 0, 29, 0ull, 0x1ull, 0ull, 0, 0, 0, 0,-1,-1,},{33, 8, 0, 0, 30, 0ull, 0x1ull, 0ull, 0, 0, 0, 0,-1,-1,},{31, 9, 0, 0, 31, 0ull, 0x1ull, 0ull, 0, 0, 0, 0,-1,-1,},};

// Instruction ld_aX_iY_Is4_minus
static struct adl_operand _sym178_operands[] = { {81, 0, 0, 0, 31, 0ull, 0x1ull, 0ull, 0, 0, 0, 0,-1,-1,},{43, 1, ADL_REGISTER, 0, 31, 0ull, 0x1ull, 0ull, 0, 0, 0, 0,-1,-1,},{82, 2, ADL_REGISTER, 0, 31, 0ull, 0x1ull, 0ull, 0, 0, 0, 0,-1,-1,},{70, 3, 0, 0, 31, 0ull, 0xfull, 0ull, 0, 0,IM4n_checker, 0,-1,-1,},{55, 4, ADL_SIGNED, 0, 31, 18446744073709551613ull-1, 3ull, 0ull, 0, 0, 0, 0,-1,-1,},{98, 5, ADL_SIGNED, 0, 31, 18446744073709551361ull-1, 255ull, 0ull, 0, 0, 0, 0,-1,-1,},{84, 6, 0, 0, 31, 0ull, 0xfull, 0ull, 0, 0, 0, 0,-1,-1,},{88, 7, 0, 0, 31, 0ull, 0x1ull, 0ull, 0, 0, 0, 0,-1,-1,},{89, 8, 0, 0, 31, 0ull, 0x1ull, 0ull, 0, 0, 0, 0,-1,-1,},{87, 9, 0, 0, 31, 0ull, 0x1ull, 0ull, 0, 0, 0, 0,-1,-1,},};
static struct adl_opcode _sym182[] = {
  // ld_aX_iY_Is4    (0)
  { "ld_aX_iY_Is4", 4, 32, 32,  0x3, { 0xd8000000,},0, "", 0, 10, 10, 0, 1, _sym180_operands,0,0,0, 0,&_sym179,0,{}, 0,0,0,0,0,-1, },
};

static struct enum_fields *_sym183[] = { &_sym42, &_sym2, &_sym46, 0, 0, 0, &_sym54,  (struct enum_fields *) -1,};

// Instruction ld_aX_iY_Is4_plus
static adl_instr_attrs _sym185 = { ((uint64_t)(1ULL << instr_ippu)) , 0 };

// Shorthand:  ld_aX_iY_Is4_plus -> ld_aX_iY_Is4;
static struct adl_operand _sym186_operands[] = { {25, 2, ADL_REGISTER, 0, 6, 0ull, 0x1ull, 0ull, 0, 0, 0, 0,-1,-1,},{18, 3, ADL_SIGNED, 0, 7, 18446744073709551609ull-1, 7ull, 0ull, 0, 0, 0, 0,-1,-1,},{0, 1, ADL_REGISTER, 0, 11, 0ull, 0x1ull, 0ull, 0, 0, 0, 0,-1,-1,},{24, 0, 0, 0, 12, 0ull, 0x1ull, 0ull, 0, 0, 0, 0,-1,-1,},{9, 4, ADL_SIGNED, 0, 13, 18446744073709551613ull-1, 3ull, 0ull, 0, 0, 0, 0,-1,-1,},{42, 5, ADL_SIGNED, 0, 16, 18446744073709551361ull-1, 255ull, 0ull, 0, 0, 0, 0,-1,-1,},{27, 6, 0, 0, 25, 0ull, 0xfull, 0ull, 0, 0, 0, 0,-1,-1,},{32, 7, 0, 0, 29, 0ull, 0x1ull, 0ull, 0, 0, 0, 0,-1,-1,},{33, 8, 0, 0, 30, 0ull, 0x1ull, 0ull, 0, 0, 0, 0,-1,-1,},{31, 9, 0, 0, 31, 0ull, 0x1ull, 0ull, 0, 0, 0, 0,-1,-1,},};

// Instruction ld_aX_iY_Is4_plus
static struct adl_operand _sym184_operands[] = { {81, 0, 0, 0, 31, 0ull, 0x1ull, 0ull, 0, 0, 0, 0,-1,-1,},{43, 1, ADL_REGISTER, 0, 31, 0ull, 0x1ull, 0ull, 0, 0, 0, 0,-1,-1,},{82, 2, ADL_REGISTER, 0, 31, 0ull, 0x1ull, 0ull, 0, 0, 0, 0,-1,-1,},{71, 3, ADL_SIGNED, 0, 31, 18446744073709551609ull-1, 7ull, 0ull, 0, 0, 0, 0,-1,-1,},{55, 4, ADL_SIGNED, 0, 31, 18446744073709551613ull-1, 3ull, 0ull, 0, 0, 0, 0,-1,-1,},{98, 5, ADL_SIGNED, 0, 31, 18446744073709551361ull-1, 255ull, 0ull, 0, 0, 0, 0,-1,-1,},{84, 6, 0, 0, 31, 0ull, 0xfull, 0ull, 0, 0, 0, 0,-1,-1,},{88, 7, 0, 0, 31, 0ull, 0x1ull, 0ull, 0, 0, 0, 0,-1,-1,},{89, 8, 0, 0, 31, 0ull, 0x1ull, 0ull, 0, 0, 0, 0,-1,-1,},{87, 9, 0, 0, 31, 0ull, 0x1ull, 0ull, 0, 0, 0, 0,-1,-1,},};
static struct adl_opcode _sym187[] = {
  // ld_aX_iY_Is4    (0)
  { "ld_aX_iY_Is4", 4, 32, 32,  0x3, { 0xd8000000,},0, "", 0, 10, 10, 0, 1, _sym186_operands,0,0,0, 0,&_sym185,0,{}, 0,0,0,0,0,-1, },
};

static struct enum_fields *_sym188[] = { &_sym42, &_sym2, &_sym46, 0, 0, 0, &_sym54,  (struct enum_fields *) -1,};

// Instruction ld_aX_mX
static adl_instr_attrs _sym190 = { ((uint64_t)(1ULL << instr_ippu)) , 0 };

// Instruction ld_aX_mX
static struct adl_operand _sym189_operands[] = { {24, 0, 0, 0, 12, 0ull, 0x1ull, 0ull, 0, 0, 0, 0,-1,-1,},{0, 1, ADL_REGISTER, 0, 11, 0ull, 0x1ull, 0ull, 0, 0, 0, 0,-1,-1,},{35, 2, 0, 0, 8, 0ull, 0x1ull, 0ull, 0, 0, 0, 0,-1,-1,},{34, 3, ADL_REGISTER, 0, 9, 0ull, 0x1ull, 0ull, 0, 0, 0, 0,-1,-1,},{9, 4, ADL_SIGNED, 0, 13, 18446744073709551613ull-1, 3ull, 0ull, 0, 0, 0, 0,-1,-1,},{28, 5, 0, 0, 5, 0ull, 0x7ull, 0ull, 0, 0, 0, 0,-1,-1,},{42, 6, ADL_SIGNED, 0, 16, 18446744073709551361ull-1, 255ull, 0ull, 0, 0, 0, 0,-1,-1,},{27, 7, 0, 0, 25, 0ull, 0xfull, 0ull, 0, 0, 0, 0,-1,-1,},{32, 8, 0, 0, 29, 0ull, 0x1ull, 0ull, 0, 0, 0, 0,-1,-1,},{33, 9, 0, 0, 30, 0ull, 0x1ull, 0ull, 0, 0, 0, 0,-1,-1,},{31, 10, 0, 0, 31, 0ull, 0x1ull, 0ull, 0, 0, 0, 0,-1,-1,},};
static struct enum_fields *_sym191[] = { &_sym42, &_sym2, &_sym72, &_sym68, 0, &_sym58, 0, &_sym54,  (struct enum_fields *) -1,};

// Instruction ld_asX_base_Iu6
static adl_instr_attrs _sym193 = { ((uint64_t)(1ULL << instr_ippu)) , 0 };

// Instruction ld_asX_base_Iu6
static struct adl_operand _sym192_operands[] = { {2, 0, ADL_REGISTER, 0, 6, 0ull, 0x3ull, 0ull, 0, 0, 0, 0,-1,-1,},{20, 1, 0, 0, 22, 0ull, 0x3full, 0ull, 0, 0, 0, 0,-1,-1,},{32, 2, 0, 0, 29, 0ull, 0x1ull, 0ull, 0, 0, 0, 0,-1,-1,},{33, 3, 0, 0, 30, 0ull, 0x1ull, 0ull, 0, 0, 0, 0,-1,-1,},{31, 4, 0, 0, 31, 0ull, 0x1ull, 0ull, 0, 0, 0, 0,-1,-1,},};
static struct enum_fields *_sym194[] = { &_sym6, 0,  (struct enum_fields *) -1,};

// Instruction ld_index_aX_Is9
static adl_instr_attrs _sym196 = { ((uint64_t)(1ULL << instr_ippu)) , 0 };

// Instruction ld_index_aX_Is9
static struct adl_operand _sym195_operands[] = { {0, 0, ADL_REGISTER, 0, 11, 0ull, 0x1ull, 0ull, 0, 0, 0, 0,-1,-1,},{24, 1, 0, 0, 12, 0ull, 0x1ull, 0ull, 0, 0, 0, 0,-1,-1,},{23, 2, ADL_SIGNED, 0, 16, 18446744073709551361ull-1, 255ull, 0ull, 0, 0, 0, 0,-1,-1,},{32, 3, 0, 0, 29, 0ull, 0x1ull, 0ull, 0, 0, 0, 0,-1,-1,},{33, 4, 0, 0, 30, 0ull, 0x1ull, 0ull, 0, 0, 0, 0,-1,-1,},{31, 5, 0, 0, 31, 0ull, 0x1ull, 0ull, 0, 0, 0, 0,-1,-1,},};
static struct enum_fields *_sym197[] = { &_sym4, &_sym44, 0, 0, 0, 0,  (struct enum_fields *) -1,};

// Instruction ld_index_aX_Is9_minus_ippu
static adl_instr_attrs _sym199 = { ((uint64_t)(1ULL << instr_ippu)) , 0 };

// Shorthand:  ld_index_aX_Is9_minus_ippu -> ld_index_aX_Is9;

static bfd_uint64_t _sym201_modifier (const expressionS *operands, unsigned __cia ATTRIBUTE_UNUSED) { return - (IM9n_checker((operands[1].X_add_number),FALSE)); }
static struct adl_operand _sym200_operands[] = { {0, 0, ADL_REGISTER, 0, 11, 0ull, 0x1ull, 0ull, 0, 0, 0, 0,-1,-1,},{23, 0, 0, 0, 0, 0, 0, 0, _sym201_modifier, 0, 0,0, -1,-1,},{32, 2, 0, 0, 29, 0ull, 0x1ull, 0ull, 0, 0, 0, 0,-1,-1,},{33, 3, 0, 0, 30, 0ull, 0x1ull, 0ull, 0, 0, 0, 0,-1,-1,},{31, 4, 0, 0, 31, 0ull, 0x1ull, 0ull, 0, 0, 0, 0,-1,-1,},};

// Instruction ld_index_aX_Is9_minus_ippu
static struct adl_operand _sym198_operands[] = { {43, 0, ADL_REGISTER, 0, 31, 0ull, 0x1ull, 0ull, 0, 0, 0, 0,-1,-1,},{79, 1, 0, 0, 31, 0ull, 0x1ffull, 0ull, 0, 0,IM9n_checker, 0,-1,-1,},{88, 2, 0, 0, 31, 0ull, 0x1ull, 0ull, 0, 0, 0, 0,-1,-1,},{89, 3, 0, 0, 31, 0ull, 0x1ull, 0ull, 0, 0, 0, 0,-1,-1,},{87, 4, 0, 0, 31, 0ull, 0x1ull, 0ull, 0, 0, 0, 0,-1,-1,},};
static struct adl_opcode _sym202[] = {
  // ld_index_aX_Is9    (0)
  { "ld_index_aX_Is9", 4, 32, 32,  0x3, { 0x7c000000,},0, "", 0, 5, 5, 0, 0, _sym200_operands,0,0,0, 0,&_sym199,0,{}, 0,0,0,0,0,-1, },
};

static struct enum_fields *_sym203[] = { &_sym2, 0,  (struct enum_fields *) -1,};

// Instruction ld_index_aX_Is9_minus_vcpu
static adl_instr_attrs _sym205 = { ((uint64_t)(1ULL << instr_ippu)) , 0 };

// Shorthand:  ld_index_aX_Is9_minus_vcpu -> ld_index_aX_Is9;

static bfd_uint64_t _sym207_modifier (const expressionS *operands, unsigned __cia ATTRIBUTE_UNUSED) { return - (IM9n_checker((operands[1].X_add_number),FALSE)); }
static struct adl_operand _sym206_operands[] = { {0, 0, ADL_REGISTER, 0, 11, 0ull, 0x1ull, 0ull, 0, 0, 0, 0,-1,-1,},{23, 0, 0, 0, 0, 0, 0, 0, _sym207_modifier, 0, 0,0, -1,-1,},{32, 2, 0, 0, 29, 0ull, 0x1ull, 0ull, 0, 0, 0, 0,-1,-1,},{33, 3, 0, 0, 30, 0ull, 0x1ull, 0ull, 0, 0, 0, 0,-1,-1,},{31, 4, 0, 0, 31, 0ull, 0x1ull, 0ull, 0, 0, 0, 0,-1,-1,},};

// Instruction ld_index_aX_Is9_minus_vcpu
static struct adl_operand _sym204_operands[] = { {43, 0, ADL_REGISTER, 0, 31, 0ull, 0x1ull, 0ull, 0, 0, 0, 0,-1,-1,},{79, 1, 0, 0, 31, 0ull, 0x1ffull, 0ull, 0, 0,IM9n_checker, 0,-1,-1,},{88, 2, 0, 0, 31, 0ull, 0x1ull, 0ull, 0, 0, 0, 0,-1,-1,},{89, 3, 0, 0, 31, 0ull, 0x1ull, 0ull, 0, 0, 0, 0,-1,-1,},{87, 4, 0, 0, 31, 0ull, 0x1ull, 0ull, 0, 0, 0, 0,-1,-1,},};
static struct adl_opcode _sym208[] = {
  // ld_index_aX_Is9    (0)
  { "ld_index_aX_Is9", 4, 32, 32,  0x3, { 0x7c080000,},0, "", 0, 5, 5, 0, 0, _sym206_operands,0,0,0, 0,&_sym205,0,{}, 0,0,0,0,0,-1, },
};

static struct enum_fields *_sym209[] = { &_sym2, 0,  (struct enum_fields *) -1,};

// Instruction ld_index_aX_Is9_plus_ippu
static adl_instr_attrs _sym211 = { ((uint64_t)(1ULL << instr_ippu)) , 0 };

// Shorthand:  ld_index_aX_Is9_plus_ippu -> ld_index_aX_Is9;
static struct adl_operand _sym212_operands[] = { {0, 0, ADL_REGISTER, 0, 11, 0ull, 0x1ull, 0ull, 0, 0, 0, 0,-1,-1,},{23, 1, ADL_SIGNED, 0, 16, 18446744073709551361ull-1, 255ull, 0ull, 0, 0, 0, 0,-1,-1,},{32, 2, 0, 0, 29, 0ull, 0x1ull, 0ull, 0, 0, 0, 0,-1,-1,},{33, 3, 0, 0, 30, 0ull, 0x1ull, 0ull, 0, 0, 0, 0,-1,-1,},{31, 4, 0, 0, 31, 0ull, 0x1ull, 0ull, 0, 0, 0, 0,-1,-1,},};

// Instruction ld_index_aX_Is9_plus_ippu
static struct adl_operand _sym210_operands[] = { {43, 0, ADL_REGISTER, 0, 31, 0ull, 0x1ull, 0ull, 0, 0, 0, 0,-1,-1,},{80, 1, ADL_SIGNED, 0, 31, 18446744073709551361ull-1, 255ull, 0ull, 0, 0, 0, 0,-1,-1,},{88, 2, 0, 0, 31, 0ull, 0x1ull, 0ull, 0, 0, 0, 0,-1,-1,},{89, 3, 0, 0, 31, 0ull, 0x1ull, 0ull, 0, 0, 0, 0,-1,-1,},{87, 4, 0, 0, 31, 0ull, 0x1ull, 0ull, 0, 0, 0, 0,-1,-1,},};
static struct adl_opcode _sym213[] = {
  // ld_index_aX_Is9    (0)
  { "ld_index_aX_Is9", 4, 32, 32,  0x3, { 0x7c000000,},0, "", 0, 5, 5, 0, 0, _sym212_operands,0,0,0, 0,&_sym211,0,{}, 0,0,0,0,0,-1, },
};

static struct enum_fields *_sym214[] = { &_sym2, 0,  (struct enum_fields *) -1,};

// Instruction ld_index_aX_Is9_plus_vcpu
static adl_instr_attrs _sym216 = { ((uint64_t)(1ULL << instr_ippu)) , 0 };

// Shorthand:  ld_index_aX_Is9_plus_vcpu -> ld_index_aX_Is9;
static struct adl_operand _sym217_operands[] = { {0, 0, ADL_REGISTER, 0, 11, 0ull, 0x1ull, 0ull, 0, 0, 0, 0,-1,-1,},{23, 1, ADL_SIGNED, 0, 16, 18446744073709551361ull-1, 255ull, 0ull, 0, 0, 0, 0,-1,-1,},{32, 2, 0, 0, 29, 0ull, 0x1ull, 0ull, 0, 0, 0, 0,-1,-1,},{33, 3, 0, 0, 30, 0ull, 0x1ull, 0ull, 0, 0, 0, 0,-1,-1,},{31, 4, 0, 0, 31, 0ull, 0x1ull, 0ull, 0, 0, 0, 0,-1,-1,},};

// Instruction ld_index_aX_Is9_plus_vcpu
static struct adl_operand _sym215_operands[] = { {43, 0, ADL_REGISTER, 0, 31, 0ull, 0x1ull, 0ull, 0, 0, 0, 0,-1,-1,},{80, 1, ADL_SIGNED, 0, 31, 18446744073709551361ull-1, 255ull, 0ull, 0, 0, 0, 0,-1,-1,},{88, 2, 0, 0, 31, 0ull, 0x1ull, 0ull, 0, 0, 0, 0,-1,-1,},{89, 3, 0, 0, 31, 0ull, 0x1ull, 0ull, 0, 0, 0, 0,-1,-1,},{87, 4, 0, 0, 31, 0ull, 0x1ull, 0ull, 0, 0, 0, 0,-1,-1,},};
static struct adl_opcode _sym218[] = {
  // ld_index_aX_Is9    (0)
  { "ld_index_aX_Is9", 4, 32, 32,  0x3, { 0x7c080000,},0, "", 0, 5, 5, 0, 0, _sym217_operands,0,0,0, 0,&_sym216,0,{}, 0,0,0,0,0,-1, },
};

static struct enum_fields *_sym219[] = { &_sym2, 0,  (struct enum_fields *) -1,};

// Instruction ld_index_aX_mX
static adl_instr_attrs _sym221 = { ((uint64_t)(1ULL << instr_ippu)) , 0 };

// Instruction ld_index_aX_mX
static struct adl_operand _sym220_operands[] = { {35, 0, 0, 0, 8, 0ull, 0x1ull, 0ull, 0, 0, 0, 0,-1,-1,},{34, 1, ADL_REGISTER, 0, 9, 0ull, 0x1ull, 0ull, 0, 0, 0, 0,-1,-1,},{0, 2, ADL_REGISTER, 0, 11, 0ull, 0x1ull, 0ull, 0, 0, 0, 0,-1,-1,},{24, 3, 0, 0, 12, 0ull, 0x1ull, 0ull, 0, 0, 0, 0,-1,-1,},{32, 4, 0, 0, 29, 0ull, 0x1ull, 0ull, 0, 0, 0, 0,-1,-1,},{33, 5, 0, 0, 30, 0ull, 0x1ull, 0ull, 0, 0, 0, 0,-1,-1,},{31, 6, 0, 0, 31, 0ull, 0x1ull, 0ull, 0, 0, 0, 0,-1,-1,},};
static struct enum_fields *_sym222[] = { &_sym74, &_sym70, &_sym4, &_sym44, 0, 0, 0,  (struct enum_fields *) -1,};

// Instruction ld_index_aX_mX_ippu
static adl_instr_attrs _sym224 = { ((uint64_t)(1ULL << instr_ippu)) , 0 };

// Shorthand:  ld_index_aX_mX_ippu -> ld_index_aX_mX;
static struct adl_operand _sym225_operands[] = { {35, 1, 0, 0, 8, 0ull, 0x1ull, 0ull, 0, 0, 0, 0,-1,-1,},{34, 2, ADL_REGISTER, 0, 9, 0ull, 0x1ull, 0ull, 0, 0, 0, 0,-1,-1,},{0, 0, ADL_REGISTER, 0, 11, 0ull, 0x1ull, 0ull, 0, 0, 0, 0,-1,-1,},{32, 3, 0, 0, 29, 0ull, 0x1ull, 0ull, 0, 0, 0, 0,-1,-1,},{33, 4, 0, 0, 30, 0ull, 0x1ull, 0ull, 0, 0, 0, 0,-1,-1,},{31, 5, 0, 0, 31, 0ull, 0x1ull, 0ull, 0, 0, 0, 0,-1,-1,},};

// Instruction ld_index_aX_mX_ippu
static struct adl_operand _sym223_operands[] = { {43, 0, ADL_REGISTER, 0, 31, 0ull, 0x1ull, 0ull, 0, 0, 0, 0,-1,-1,},{91, 1, 0, 0, 31, 0ull, 0x1ull, 0ull, 0, 0, 0, 0,-1,-1,},{90, 2, ADL_REGISTER, 0, 31, 0ull, 0x1ull, 0ull, 0, 0, 0, 0,-1,-1,},{88, 3, 0, 0, 31, 0ull, 0x1ull, 0ull, 0, 0, 0, 0,-1,-1,},{89, 4, 0, 0, 31, 0ull, 0x1ull, 0ull, 0, 0, 0, 0,-1,-1,},{87, 5, 0, 0, 31, 0ull, 0x1ull, 0ull, 0, 0, 0, 0,-1,-1,},};
static struct adl_opcode _sym226[] = {
  // ld_index_aX_mX    (0)
  { "ld_index_aX_mX", 4, 32, 32,  0x3, { 0x7e000000,},0, "", 0, 6, 6, 0, 0, _sym225_operands,0,0,0, 0,&_sym224,0,{}, 0,0,0,0,0,-1, },
};

static struct enum_fields *_sym227[] = { &_sym2, &_sym72, &_sym68,  (struct enum_fields *) -1,};

// Instruction ld_index_aX_mX_vcpu
static adl_instr_attrs _sym229 = { ((uint64_t)(1ULL << instr_ippu)) , 0 };

// Shorthand:  ld_index_aX_mX_vcpu -> ld_index_aX_mX;
static struct adl_operand _sym230_operands[] = { {35, 1, 0, 0, 8, 0ull, 0x1ull, 0ull, 0, 0, 0, 0,-1,-1,},{34, 2, ADL_REGISTER, 0, 9, 0ull, 0x1ull, 0ull, 0, 0, 0, 0,-1,-1,},{0, 0, ADL_REGISTER, 0, 11, 0ull, 0x1ull, 0ull, 0, 0, 0, 0,-1,-1,},{32, 3, 0, 0, 29, 0ull, 0x1ull, 0ull, 0, 0, 0, 0,-1,-1,},{33, 4, 0, 0, 30, 0ull, 0x1ull, 0ull, 0, 0, 0, 0,-1,-1,},{31, 5, 0, 0, 31, 0ull, 0x1ull, 0ull, 0, 0, 0, 0,-1,-1,},};

// Instruction ld_index_aX_mX_vcpu
static struct adl_operand _sym228_operands[] = { {43, 0, ADL_REGISTER, 0, 31, 0ull, 0x1ull, 0ull, 0, 0, 0, 0,-1,-1,},{91, 1, 0, 0, 31, 0ull, 0x1ull, 0ull, 0, 0, 0, 0,-1,-1,},{90, 2, ADL_REGISTER, 0, 31, 0ull, 0x1ull, 0ull, 0, 0, 0, 0,-1,-1,},{88, 3, 0, 0, 31, 0ull, 0x1ull, 0ull, 0, 0, 0, 0,-1,-1,},{89, 4, 0, 0, 31, 0ull, 0x1ull, 0ull, 0, 0, 0, 0,-1,-1,},{87, 5, 0, 0, 31, 0ull, 0x1ull, 0ull, 0, 0, 0, 0,-1,-1,},};
static struct adl_opcode _sym231[] = {
  // ld_index_aX_mX    (0)
  { "ld_index_aX_mX", 4, 32, 32,  0x3, { 0x7e080000,},0, "", 0, 6, 6, 0, 0, _sym230_operands,0,0,0, 0,&_sym229,0,{}, 0,0,0,0,0,-1, },
};

static struct enum_fields *_sym232[] = { &_sym2, &_sym72, &_sym68,  (struct enum_fields *) -1,};

// Instruction ld_mask_aX_Is9
static adl_instr_attrs _sym234 = { ((uint64_t)(1ULL << instr_ippu)) , 0 };

// Instruction ld_mask_aX_Is9
static struct adl_operand _sym233_operands[] = { {0, 0, ADL_REGISTER, 0, 11, 0ull, 0x1ull, 0ull, 0, 0, 0, 0,-1,-1,},{24, 1, 0, 0, 12, 0ull, 0x1ull, 0ull, 0, 0, 0, 0,-1,-1,},{23, 2, ADL_SIGNED, 0, 16, 18446744073709551361ull-1, 255ull, 0ull, 0, 0, 0, 0,-1,-1,},{32, 3, 0, 0, 29, 0ull, 0x1ull, 0ull, 0, 0, 0, 0,-1,-1,},{33, 4, 0, 0, 30, 0ull, 0x1ull, 0ull, 0, 0, 0, 0,-1,-1,},{31, 5, 0, 0, 31, 0ull, 0x1ull, 0ull, 0, 0, 0, 0,-1,-1,},};
static struct enum_fields *_sym235[] = { &_sym4, &_sym44, 0, 0, 0, 0,  (struct enum_fields *) -1,};

// Instruction ld_mask_aX_Is9_minus_ippu
static adl_instr_attrs _sym237 = { ((uint64_t)(1ULL << instr_ippu)) , 0 };

// Shorthand:  ld_mask_aX_Is9_minus_ippu -> ld_mask_aX_Is9;

static bfd_uint64_t _sym239_modifier (const expressionS *operands, unsigned __cia ATTRIBUTE_UNUSED) { return - (IM9n_checker((operands[1].X_add_number),FALSE)); }
static struct adl_operand _sym238_operands[] = { {0, 0, ADL_REGISTER, 0, 11, 0ull, 0x1ull, 0ull, 0, 0, 0, 0,-1,-1,},{23, 0, 0, 0, 0, 0, 0, 0, _sym239_modifier, 0, 0,0, -1,-1,},{32, 2, 0, 0, 29, 0ull, 0x1ull, 0ull, 0, 0, 0, 0,-1,-1,},{33, 3, 0, 0, 30, 0ull, 0x1ull, 0ull, 0, 0, 0, 0,-1,-1,},{31, 4, 0, 0, 31, 0ull, 0x1ull, 0ull, 0, 0, 0, 0,-1,-1,},};

// Instruction ld_mask_aX_Is9_minus_ippu
static struct adl_operand _sym236_operands[] = { {43, 0, ADL_REGISTER, 0, 31, 0ull, 0x1ull, 0ull, 0, 0, 0, 0,-1,-1,},{79, 1, 0, 0, 31, 0ull, 0x1ffull, 0ull, 0, 0,IM9n_checker, 0,-1,-1,},{88, 2, 0, 0, 31, 0ull, 0x1ull, 0ull, 0, 0, 0, 0,-1,-1,},{89, 3, 0, 0, 31, 0ull, 0x1ull, 0ull, 0, 0, 0, 0,-1,-1,},{87, 4, 0, 0, 31, 0ull, 0x1ull, 0ull, 0, 0, 0, 0,-1,-1,},};
static struct adl_opcode _sym240[] = {
  // ld_mask_aX_Is9    (0)
  { "ld_mask_aX_Is9", 4, 32, 32,  0x3, { 0x78000000,},0, "", 0, 5, 5, 0, 0, _sym238_operands,0,0,0, 0,&_sym237,0,{}, 0,0,0,0,0,-1, },
};

static struct enum_fields *_sym241[] = { &_sym2, 0,  (struct enum_fields *) -1,};

// Instruction ld_mask_aX_Is9_minus_vcpu
static adl_instr_attrs _sym243 = { ((uint64_t)(1ULL << instr_ippu)) , 0 };

// Shorthand:  ld_mask_aX_Is9_minus_vcpu -> ld_mask_aX_Is9;

static bfd_uint64_t _sym245_modifier (const expressionS *operands, unsigned __cia ATTRIBUTE_UNUSED) { return - (IM9n_checker((operands[1].X_add_number),FALSE)); }
static struct adl_operand _sym244_operands[] = { {0, 0, ADL_REGISTER, 0, 11, 0ull, 0x1ull, 0ull, 0, 0, 0, 0,-1,-1,},{23, 0, 0, 0, 0, 0, 0, 0, _sym245_modifier, 0, 0,0, -1,-1,},{32, 2, 0, 0, 29, 0ull, 0x1ull, 0ull, 0, 0, 0, 0,-1,-1,},{33, 3, 0, 0, 30, 0ull, 0x1ull, 0ull, 0, 0, 0, 0,-1,-1,},{31, 4, 0, 0, 31, 0ull, 0x1ull, 0ull, 0, 0, 0, 0,-1,-1,},};

// Instruction ld_mask_aX_Is9_minus_vcpu
static struct adl_operand _sym242_operands[] = { {43, 0, ADL_REGISTER, 0, 31, 0ull, 0x1ull, 0ull, 0, 0, 0, 0,-1,-1,},{79, 1, 0, 0, 31, 0ull, 0x1ffull, 0ull, 0, 0,IM9n_checker, 0,-1,-1,},{88, 2, 0, 0, 31, 0ull, 0x1ull, 0ull, 0, 0, 0, 0,-1,-1,},{89, 3, 0, 0, 31, 0ull, 0x1ull, 0ull, 0, 0, 0, 0,-1,-1,},{87, 4, 0, 0, 31, 0ull, 0x1ull, 0ull, 0, 0, 0, 0,-1,-1,},};
static struct adl_opcode _sym246[] = {
  // ld_mask_aX_Is9    (0)
  { "ld_mask_aX_Is9", 4, 32, 32,  0x3, { 0x78080000,},0, "", 0, 5, 5, 0, 0, _sym244_operands,0,0,0, 0,&_sym243,0,{}, 0,0,0,0,0,-1, },
};

static struct enum_fields *_sym247[] = { &_sym2, 0,  (struct enum_fields *) -1,};

// Instruction ld_mask_aX_Is9_plus_ippu
static adl_instr_attrs _sym249 = { ((uint64_t)(1ULL << instr_ippu)) , 0 };

// Shorthand:  ld_mask_aX_Is9_plus_ippu -> ld_mask_aX_Is9;
static struct adl_operand _sym250_operands[] = { {0, 0, ADL_REGISTER, 0, 11, 0ull, 0x1ull, 0ull, 0, 0, 0, 0,-1,-1,},{23, 1, ADL_SIGNED, 0, 16, 18446744073709551361ull-1, 255ull, 0ull, 0, 0, 0, 0,-1,-1,},{32, 2, 0, 0, 29, 0ull, 0x1ull, 0ull, 0, 0, 0, 0,-1,-1,},{33, 3, 0, 0, 30, 0ull, 0x1ull, 0ull, 0, 0, 0, 0,-1,-1,},{31, 4, 0, 0, 31, 0ull, 0x1ull, 0ull, 0, 0, 0, 0,-1,-1,},};

// Instruction ld_mask_aX_Is9_plus_ippu
static struct adl_operand _sym248_operands[] = { {43, 0, ADL_REGISTER, 0, 31, 0ull, 0x1ull, 0ull, 0, 0, 0, 0,-1,-1,},{80, 1, ADL_SIGNED, 0, 31, 18446744073709551361ull-1, 255ull, 0ull, 0, 0, 0, 0,-1,-1,},{88, 2, 0, 0, 31, 0ull, 0x1ull, 0ull, 0, 0, 0, 0,-1,-1,},{89, 3, 0, 0, 31, 0ull, 0x1ull, 0ull, 0, 0, 0, 0,-1,-1,},{87, 4, 0, 0, 31, 0ull, 0x1ull, 0ull, 0, 0, 0, 0,-1,-1,},};
static struct adl_opcode _sym251[] = {
  // ld_mask_aX_Is9    (0)
  { "ld_mask_aX_Is9", 4, 32, 32,  0x3, { 0x78000000,},0, "", 0, 5, 5, 0, 0, _sym250_operands,0,0,0, 0,&_sym249,0,{}, 0,0,0,0,0,-1, },
};

static struct enum_fields *_sym252[] = { &_sym2, 0,  (struct enum_fields *) -1,};

// Instruction ld_mask_aX_Is9_plus_vcpu
static adl_instr_attrs _sym254 = { ((uint64_t)(1ULL << instr_ippu)) , 0 };

// Shorthand:  ld_mask_aX_Is9_plus_vcpu -> ld_mask_aX_Is9;
static struct adl_operand _sym255_operands[] = { {0, 0, ADL_REGISTER, 0, 11, 0ull, 0x1ull, 0ull, 0, 0, 0, 0,-1,-1,},{23, 1, ADL_SIGNED, 0, 16, 18446744073709551361ull-1, 255ull, 0ull, 0, 0, 0, 0,-1,-1,},{32, 2, 0, 0, 29, 0ull, 0x1ull, 0ull, 0, 0, 0, 0,-1,-1,},{33, 3, 0, 0, 30, 0ull, 0x1ull, 0ull, 0, 0, 0, 0,-1,-1,},{31, 4, 0, 0, 31, 0ull, 0x1ull, 0ull, 0, 0, 0, 0,-1,-1,},};

// Instruction ld_mask_aX_Is9_plus_vcpu
static struct adl_operand _sym253_operands[] = { {43, 0, ADL_REGISTER, 0, 31, 0ull, 0x1ull, 0ull, 0, 0, 0, 0,-1,-1,},{80, 1, ADL_SIGNED, 0, 31, 18446744073709551361ull-1, 255ull, 0ull, 0, 0, 0, 0,-1,-1,},{88, 2, 0, 0, 31, 0ull, 0x1ull, 0ull, 0, 0, 0, 0,-1,-1,},{89, 3, 0, 0, 31, 0ull, 0x1ull, 0ull, 0, 0, 0, 0,-1,-1,},{87, 4, 0, 0, 31, 0ull, 0x1ull, 0ull, 0, 0, 0, 0,-1,-1,},};
static struct adl_opcode _sym256[] = {
  // ld_mask_aX_Is9    (0)
  { "ld_mask_aX_Is9", 4, 32, 32,  0x3, { 0x78080000,},0, "", 0, 5, 5, 0, 0, _sym255_operands,0,0,0, 0,&_sym254,0,{}, 0,0,0,0,0,-1, },
};

static struct enum_fields *_sym257[] = { &_sym2, 0,  (struct enum_fields *) -1,};

// Instruction ld_mask_aX_mX
static adl_instr_attrs _sym259 = { ((uint64_t)(1ULL << instr_ippu)) , 0 };

// Instruction ld_mask_aX_mX
static struct adl_operand _sym258_operands[] = { {35, 0, 0, 0, 8, 0ull, 0x1ull, 0ull, 0, 0, 0, 0,-1,-1,},{34, 1, ADL_REGISTER, 0, 9, 0ull, 0x1ull, 0ull, 0, 0, 0, 0,-1,-1,},{0, 2, ADL_REGISTER, 0, 11, 0ull, 0x1ull, 0ull, 0, 0, 0, 0,-1,-1,},{24, 3, 0, 0, 12, 0ull, 0x1ull, 0ull, 0, 0, 0, 0,-1,-1,},{32, 4, 0, 0, 29, 0ull, 0x1ull, 0ull, 0, 0, 0, 0,-1,-1,},{33, 5, 0, 0, 30, 0ull, 0x1ull, 0ull, 0, 0, 0, 0,-1,-1,},{31, 6, 0, 0, 31, 0ull, 0x1ull, 0ull, 0, 0, 0, 0,-1,-1,},};
static struct enum_fields *_sym260[] = { &_sym74, &_sym70, &_sym4, &_sym44, 0, 0, 0,  (struct enum_fields *) -1,};

// Instruction ld_mask_aX_mX_ippu
static adl_instr_attrs _sym262 = { ((uint64_t)(1ULL << instr_ippu)) , 0 };

// Shorthand:  ld_mask_aX_mX_ippu -> ld_mask_aX_mX;
static struct adl_operand _sym263_operands[] = { {35, 1, 0, 0, 8, 0ull, 0x1ull, 0ull, 0, 0, 0, 0,-1,-1,},{34, 2, ADL_REGISTER, 0, 9, 0ull, 0x1ull, 0ull, 0, 0, 0, 0,-1,-1,},{0, 0, ADL_REGISTER, 0, 11, 0ull, 0x1ull, 0ull, 0, 0, 0, 0,-1,-1,},{32, 3, 0, 0, 29, 0ull, 0x1ull, 0ull, 0, 0, 0, 0,-1,-1,},{33, 4, 0, 0, 30, 0ull, 0x1ull, 0ull, 0, 0, 0, 0,-1,-1,},{31, 5, 0, 0, 31, 0ull, 0x1ull, 0ull, 0, 0, 0, 0,-1,-1,},};

// Instruction ld_mask_aX_mX_ippu
static struct adl_operand _sym261_operands[] = { {43, 0, ADL_REGISTER, 0, 31, 0ull, 0x1ull, 0ull, 0, 0, 0, 0,-1,-1,},{91, 1, 0, 0, 31, 0ull, 0x1ull, 0ull, 0, 0, 0, 0,-1,-1,},{90, 2, ADL_REGISTER, 0, 31, 0ull, 0x1ull, 0ull, 0, 0, 0, 0,-1,-1,},{88, 3, 0, 0, 31, 0ull, 0x1ull, 0ull, 0, 0, 0, 0,-1,-1,},{89, 4, 0, 0, 31, 0ull, 0x1ull, 0ull, 0, 0, 0, 0,-1,-1,},{87, 5, 0, 0, 31, 0ull, 0x1ull, 0ull, 0, 0, 0, 0,-1,-1,},};
static struct adl_opcode _sym264[] = {
  // ld_mask_aX_mX    (0)
  { "ld_mask_aX_mX", 4, 32, 32,  0x3, { 0x7a000000,},0, "", 0, 6, 6, 0, 0, _sym263_operands,0,0,0, 0,&_sym262,0,{}, 0,0,0,0,0,-1, },
};

static struct enum_fields *_sym265[] = { &_sym2, &_sym72, &_sym68,  (struct enum_fields *) -1,};

// Instruction ld_mask_aX_mX_vcpu
static adl_instr_attrs _sym267 = { ((uint64_t)(1ULL << instr_ippu)) , 0 };

// Shorthand:  ld_mask_aX_mX_vcpu -> ld_mask_aX_mX;
static struct adl_operand _sym268_operands[] = { {35, 1, 0, 0, 8, 0ull, 0x1ull, 0ull, 0, 0, 0, 0,-1,-1,},{34, 2, ADL_REGISTER, 0, 9, 0ull, 0x1ull, 0ull, 0, 0, 0, 0,-1,-1,},{0, 0, ADL_REGISTER, 0, 11, 0ull, 0x1ull, 0ull, 0, 0, 0, 0,-1,-1,},{32, 3, 0, 0, 29, 0ull, 0x1ull, 0ull, 0, 0, 0, 0,-1,-1,},{33, 4, 0, 0, 30, 0ull, 0x1ull, 0ull, 0, 0, 0, 0,-1,-1,},{31, 5, 0, 0, 31, 0ull, 0x1ull, 0ull, 0, 0, 0, 0,-1,-1,},};

// Instruction ld_mask_aX_mX_vcpu
static struct adl_operand _sym266_operands[] = { {43, 0, ADL_REGISTER, 0, 31, 0ull, 0x1ull, 0ull, 0, 0, 0, 0,-1,-1,},{91, 1, 0, 0, 31, 0ull, 0x1ull, 0ull, 0, 0, 0, 0,-1,-1,},{90, 2, ADL_REGISTER, 0, 31, 0ull, 0x1ull, 0ull, 0, 0, 0, 0,-1,-1,},{88, 3, 0, 0, 31, 0ull, 0x1ull, 0ull, 0, 0, 0, 0,-1,-1,},{89, 4, 0, 0, 31, 0ull, 0x1ull, 0ull, 0, 0, 0, 0,-1,-1,},{87, 5, 0, 0, 31, 0ull, 0x1ull, 0ull, 0, 0, 0, 0,-1,-1,},};
static struct adl_opcode _sym269[] = {
  // ld_mask_aX_mX    (0)
  { "ld_mask_aX_mX", 4, 32, 32,  0x3, { 0x7a080000,},0, "", 0, 6, 6, 0, 0, _sym268_operands,0,0,0, 0,&_sym267,0,{}, 0,0,0,0,0,-1, },
};

static struct enum_fields *_sym270[] = { &_sym2, &_sym72, &_sym68,  (struct enum_fields *) -1,};

// Instruction mv_ippu_reg
static adl_instr_attrs _sym272 = { ((uint64_t)(1ULL << instr_ippu)) , 0 };

// Instruction mv_ippu_reg
static struct adl_operand _sym271_operands[] = { {8, 0, 0, 0, 6, 0ull, 0xfull, 0ull, 0, 0, 0, 0,-1,-1,},{39, 1, 0, 0, 10, 0ull, 0xfull, 0ull, 0, 0, 0, 0,-1,-1,},{32, 2, 0, 0, 29, 0ull, 0x1ull, 0ull, 0, 0, 0, 0,-1,-1,},{33, 3, 0, 0, 30, 0ull, 0x1ull, 0ull, 0, 0, 0, 0,-1,-1,},{31, 4, 0, 0, 31, 0ull, 0x1ull, 0ull, 0, 0, 0, 0,-1,-1,},};
static struct enum_fields *_sym273[] = { &_sym30, &_sym76,  (struct enum_fields *) -1,};

// Instruction mv_ippu_reg_I19_mX
static adl_instr_attrs _sym275 = { ((uint64_t)(1ULL << instr_ippu)) , 0 };

// Instruction mv_ippu_reg_I19_mX
static struct adl_operand _sym274_operands[] = { {6, 0, 0, 0, 9, 0ull, 0x1ull, 0ull, 0, 0, 0, 0,-1,-1,},{16, 1, ADL_ABSOLUTE | ADL_EXT_SIGNED, 0, 10, 18446744073709289473ull-1, 524287ull, 0ull, 0, 0, 0, 0,-1,-1,},{32, 2, 0, 0, 29, 0ull, 0x1ull, 0ull, 0, 0, 0, 0,-1,-1,},{33, 3, 0, 0, 30, 0ull, 0x1ull, 0ull, 0, 0, 0, 0,-1,-1,},{31, 4, 0, 0, 31, 0ull, 0x1ull, 0ull, 0, 0, 0, 0,-1,-1,},};
static struct enum_fields *_sym276[] = { &_sym32, 0,  (struct enum_fields *) -1,};

// Instruction mv_ippu_reg_I19_non_mX
static adl_instr_attrs _sym278 = { ((uint64_t)(1ULL << instr_ippu)) , 0 };

// Instruction mv_ippu_reg_I19_non_mX
static struct adl_operand _sym277_operands[] = { {7, 0, 0, 0, 6, 0ull, 0xfull, 0ull, 0, 0, 0, 0,-1,-1,},{14, 1, ADL_ABSOLUTE, 0, 10, 0ull, 0x7ffffull, 0ull, 0, 0, 0, 0,-1,-1,},{32, 2, 0, 0, 29, 0ull, 0x1ull, 0ull, 0, 0, 0, 0,-1,-1,},{33, 3, 0, 0, 30, 0ull, 0x1ull, 0ull, 0, 0, 0, 0,-1,-1,},{31, 4, 0, 0, 31, 0ull, 0x1ull, 0ull, 0, 0, 0, 0,-1,-1,},};
static struct enum_fields *_sym279[] = { &_sym36, 0,  (struct enum_fields *) -1,};

// Instruction nop
static adl_instr_attrs _sym281 = { ((uint64_t)(1ULL << instr_ippu)) , 0 };

// Instruction nop
static struct adl_operand _sym280_operands[] = { {32, 0, 0, 0, 29, 0ull, 0x1ull, 0ull, 0, 0, 0, 0,-1,-1,},{33, 1, 0, 0, 30, 0ull, 0x1ull, 0ull, 0, 0, 0, 0,-1,-1,},{31, 2, 0, 0, 31, 0ull, 0x1ull, 0ull, 0, 0, 0, 0,-1,-1,},};
static struct enum_fields *_sym282[] = {  (struct enum_fields *) -1,};

// Instruction rts
static adl_instr_attrs _sym284 = { ((uint64_t)(1ULL << instr_ippu)) , 0 };

// Shorthand:  rts -> jmp;
static struct adl_operand _sym285_operands[] = { {32, 0, 0, 0, 29, 0ull, 0x1ull, 0ull, 0, 0, 0, 0,-1,-1,},{33, 1, 0, 0, 30, 0ull, 0x1ull, 0ull, 0, 0, 0, 0,-1,-1,},{31, 2, 0, 0, 31, 0ull, 0x1ull, 0ull, 0, 0, 0, 0,-1,-1,},};

// Instruction rts
static struct adl_operand _sym283_operands[] = { {88, 0, 0, 0, 31, 0ull, 0x1ull, 0ull, 0, 0, 0, 0,-1,-1,},{89, 1, 0, 0, 31, 0ull, 0x1ull, 0ull, 0, 0, 0, 0,-1,-1,},{87, 2, 0, 0, 31, 0ull, 0x1ull, 0ull, 0, 0, 0, 0,-1,-1,},};
static struct adl_opcode _sym286[] = {
  // jmp    (0)
  { "jmp", 4, 32, 32,  0x3, { 0x10f00000,},0, "", 0, 3, 3, 0, 0, _sym285_operands,0,0,0, 0,&_sym284,0,{}, 0,0,0,0,0,-1, },
};

static struct enum_fields *_sym287[] = {  (struct enum_fields *) -1,};

// Instruction rts_nz
static adl_instr_attrs _sym289 = { ((uint64_t)(1ULL << instr_ippu)) , 0 };

// Shorthand:  rts_nz -> jmp;
static struct adl_operand _sym290_operands[] = { {32, 0, 0, 0, 29, 0ull, 0x1ull, 0ull, 0, 0, 0, 0,-1,-1,},{33, 1, 0, 0, 30, 0ull, 0x1ull, 0ull, 0, 0, 0, 0,-1,-1,},{31, 2, 0, 0, 31, 0ull, 0x1ull, 0ull, 0, 0, 0, 0,-1,-1,},};

// Instruction rts_nz
static struct adl_operand _sym288_operands[] = { {88, 0, 0, 0, 31, 0ull, 0x1ull, 0ull, 0, 0, 0, 0,-1,-1,},{89, 1, 0, 0, 31, 0ull, 0x1ull, 0ull, 0, 0, 0, 0,-1,-1,},{87, 2, 0, 0, 31, 0ull, 0x1ull, 0ull, 0, 0, 0, 0,-1,-1,},};
static struct adl_opcode _sym291[] = {
  // jmp    (0)
  { "jmp", 4, 32, 32,  0x3, { 0x10e00000,},0, "", 0, 3, 3, 0, 0, _sym290_operands,0,0,0, 0,&_sym289,0,{}, 0,0,0,0,0,-1, },
};

static struct enum_fields *_sym292[] = {  (struct enum_fields *) -1,};

// Instruction rts_z
static adl_instr_attrs _sym294 = { ((uint64_t)(1ULL << instr_ippu)) , 0 };

// Shorthand:  rts_z -> jmp;
static struct adl_operand _sym295_operands[] = { {32, 0, 0, 0, 29, 0ull, 0x1ull, 0ull, 0, 0, 0, 0,-1,-1,},{33, 1, 0, 0, 30, 0ull, 0x1ull, 0ull, 0, 0, 0, 0,-1,-1,},{31, 2, 0, 0, 31, 0ull, 0x1ull, 0ull, 0, 0, 0, 0,-1,-1,},};

// Instruction rts_z
static struct adl_operand _sym293_operands[] = { {88, 0, 0, 0, 31, 0ull, 0x1ull, 0ull, 0, 0, 0, 0,-1,-1,},{89, 1, 0, 0, 31, 0ull, 0x1ull, 0ull, 0, 0, 0, 0,-1,-1,},{87, 2, 0, 0, 31, 0ull, 0x1ull, 0ull, 0, 0, 0, 0,-1,-1,},};
static struct adl_opcode _sym296[] = {
  // jmp    (0)
  { "jmp", 4, 32, 32,  0x3, { 0x10d00000,},0, "", 0, 3, 3, 0, 0, _sym295_operands,0,0,0, 0,&_sym294,0,{}, 0,0,0,0,0,-1, },
};

static struct enum_fields *_sym297[] = {  (struct enum_fields *) -1,};

// Instruction set_br_aX_mode
static adl_instr_attrs _sym299 = { ((uint64_t)(1ULL << instr_ippu)) , 0 };

// Instruction set_br_aX_mode
static struct adl_operand _sym298_operands[] = { {0, 0, ADL_REGISTER, 0, 11, 0ull, 0x1ull, 0ull, 0, 0, 0, 0,-1,-1,},{3, 1, 0, 0, 24, 0ull, 0xfull, 0ull, 0, 0, 0, 0,-1,-1,},{32, 2, 0, 0, 29, 0ull, 0x1ull, 0ull, 0, 0, 0, 0,-1,-1,},{33, 3, 0, 0, 30, 0ull, 0x1ull, 0ull, 0, 0, 0, 0,-1,-1,},{31, 4, 0, 0, 31, 0ull, 0x1ull, 0ull, 0, 0, 0, 0,-1,-1,},};
static struct enum_fields *_sym300[] = { &_sym2, &_sym14,  (struct enum_fields *) -1,};

// Instruction set_dr_config
static adl_instr_attrs _sym302 = { ((uint64_t)(1ULL << instr_ippu)) , 0 };

// Instruction set_dr_config
static struct adl_operand _sym301_operands[] = { {5, 0, 0, 0, 8, 0ull, 0xfull, 0ull, 0, 0, 0, 0,-1,-1,},{17, 1, 0, 0, 13, 0ull, 0x7ull, 0ull, 0, 0, 0, 0,-1,-1,},{10, 2, 0, 0, 17, 0ull, 0x7ffull, 0ull, 0, 0, 0, 0,-1,-1,},{32, 3, 0, 0, 29, 0ull, 0x1ull, 0ull, 0, 0, 0, 0,-1,-1,},{33, 4, 0, 0, 30, 0ull, 0x1ull, 0ull, 0, 0, 0, 0,-1,-1,},{31, 5, 0, 0, 31, 0ull, 0x1ull, 0ull, 0, 0, 0, 0,-1,-1,},};
static struct enum_fields *_sym303[] = { &_sym24, 0, 0,  (struct enum_fields *) -1,};

// Instruction set_dr_radix
static adl_instr_attrs _sym305 = { ((uint64_t)(1ULL << instr_ippu)) , 0 };

// Instruction set_dr_radix
static struct adl_operand _sym304_operands[] = { {5, 0, 0, 0, 8, 0ull, 0xfull, 0ull, 0, 0, 0, 0,-1,-1,},{36, 1, 0, 0, 13, 0ull, 0x7ull, 0ull, 0, 0, 0, 0,-1,-1,},{10, 2, 0, 0, 17, 0ull, 0x7ffull, 0ull, 0, 0, 0, 0,-1,-1,},{32, 3, 0, 0, 29, 0ull, 0x1ull, 0ull, 0, 0, 0, 0,-1,-1,},{33, 4, 0, 0, 30, 0ull, 0x1ull, 0ull, 0, 0, 0, 0,-1,-1,},{31, 5, 0, 0, 31, 0ull, 0x1ull, 0ull, 0, 0, 0, 0,-1,-1,},};
static struct enum_fields *_sym306[] = { &_sym24, 0, 0,  (struct enum_fields *) -1,};

// Instruction set_loop
static adl_instr_attrs _sym308 = { ((uint64_t)(1ULL << instr_ippu)) , 0 };

// Instruction set_loop
static struct adl_operand _sym307_operands[] = { {30, 0, 0, 0, 5, 0ull, 0x1ull, 0ull, 0, 0, 0, 0,-1,-1,},{2, 1, ADL_REGISTER, 0, 6, 0ull, 0x3ull, 0ull, 0, 0, 0, 0,-1,-1,},{38, 2, 0, 0, 8, 0ull, 0x1ull, 0ull, 0, 0, 0, 0,-1,-1,},{21, 3, 0, 0, 20, 0ull, 0xffull, 0ull, 0, 0, 0, 0,-1,-1,},{32, 4, 0, 0, 29, 0ull, 0x1ull, 0ull, 0, 0, 0, 0,-1,-1,},{33, 5, 0, 0, 30, 0ull, 0x1ull, 0ull, 0, 0, 0, 0,-1,-1,},{31, 6, 0, 0, 31, 0ull, 0x1ull, 0ull, 0, 0, 0, 0,-1,-1,},};
static struct enum_fields *_sym309[] = { &_sym66, &_sym12, 0, 0, 0, 0, 0,  (struct enum_fields *) -1,};

// Instruction set_loop_Iu1_Iu8
static adl_instr_attrs _sym311 = { ((uint64_t)(1ULL << instr_ippu)) , 0 };

// Shorthand:  set_loop_Iu1_Iu8 -> set_loop;

static bfd_uint64_t _sym313_modifier (const expressionS *operands, unsigned __cia ATTRIBUTE_UNUSED) { return (IM9_1_256_checker((operands[1].X_add_number),FALSE)) - 1; }
static struct adl_operand _sym312_operands[] = { {38, 0, 0, 0, 8, 0ull, 0x1ull, 0ull, 0, 0, 0, 0,-1,-1,},{21, 0, 0, 0, 0, 0, 0, 0, _sym313_modifier, 0, 0,0, -1,-1,},{32, 2, 0, 0, 29, 0ull, 0x1ull, 0ull, 0, 0, 0, 0,-1,-1,},{33, 3, 0, 0, 30, 0ull, 0x1ull, 0ull, 0, 0, 0, 0,-1,-1,},{31, 4, 0, 0, 31, 0ull, 0x1ull, 0ull, 0, 0, 0, 0,-1,-1,},};

// Instruction set_loop_Iu1_Iu8
static struct adl_operand _sym310_operands[] = { {94, 0, 0, 0, 31, 0ull, 0x1ull, 0ull, 0, 0, 0, 0,-1,-1,},{78, 1, 0, 0, 31, 0ull, 0x1ffull, 0ull, 0, 0,IM9_1_256_checker, 0,-1,-1,},{88, 2, 0, 0, 31, 0ull, 0x1ull, 0ull, 0, 0, 0, 0,-1,-1,},{89, 3, 0, 0, 31, 0ull, 0x1ull, 0ull, 0, 0, 0, 0,-1,-1,},{87, 4, 0, 0, 31, 0ull, 0x1ull, 0ull, 0, 0, 0, 0,-1,-1,},};
static struct adl_opcode _sym314[] = {
  // set_loop    (0)
  { "set_loop", 4, 32, 32,  0x3, { 0x18000000,},0, "", 0, 5, 5, 0, 0, _sym312_operands,0,0,0, 0,&_sym311,0,{}, 0,0,0,0,0,-1, },
};

static struct enum_fields *_sym315[] = { 0, 0,  (struct enum_fields *) -1,};

// Instruction set_loop_Iu1_asX
static adl_instr_attrs _sym317 = { ((uint64_t)(1ULL << instr_ippu)) , 0 };

// Shorthand:  set_loop_Iu1_asX -> set_loop;
static struct adl_operand _sym318_operands[] = { {2, 1, ADL_REGISTER, 0, 6, 0ull, 0x3ull, 0ull, 0, 0, 0, 0,-1,-1,},{38, 0, 0, 0, 8, 0ull, 0x1ull, 0ull, 0, 0, 0, 0,-1,-1,},{32, 2, 0, 0, 29, 0ull, 0x1ull, 0ull, 0, 0, 0, 0,-1,-1,},{33, 3, 0, 0, 30, 0ull, 0x1ull, 0ull, 0, 0, 0, 0,-1,-1,},{31, 4, 0, 0, 31, 0ull, 0x1ull, 0ull, 0, 0, 0, 0,-1,-1,},};

// Instruction set_loop_Iu1_asX
static struct adl_operand _sym316_operands[] = { {94, 0, 0, 0, 31, 0ull, 0x1ull, 0ull, 0, 0, 0, 0,-1,-1,},{44, 1, ADL_REGISTER, 0, 31, 0ull, 0x3ull, 0ull, 0, 0, 0, 0,-1,-1,},{88, 2, 0, 0, 31, 0ull, 0x1ull, 0ull, 0, 0, 0, 0,-1,-1,},{89, 3, 0, 0, 31, 0ull, 0x1ull, 0ull, 0, 0, 0, 0,-1,-1,},{87, 4, 0, 0, 31, 0ull, 0x1ull, 0ull, 0, 0, 0, 0,-1,-1,},};
static struct adl_opcode _sym319[] = {
  // set_loop    (0)
  { "set_loop", 4, 32, 32,  0x3, { 0x1c000000,},0, "", 0, 5, 5, 0, 0, _sym318_operands,0,0,0, 0,&_sym317,0,{}, 0,0,0,0,0,-1, },
};

static struct enum_fields *_sym320[] = { 0, &_sym6,  (struct enum_fields *) -1,};

// Instruction set_mask_all
static adl_instr_attrs _sym322 = { ((uint64_t)(1ULL << instr_ippu)) , 0 };

// Instruction set_mask_all
static struct adl_operand _sym321_operands[] = { {32, 0, 0, 0, 29, 0ull, 0x1ull, 0ull, 0, 0, 0, 0,-1,-1,},{33, 1, 0, 0, 30, 0ull, 0x1ull, 0ull, 0, 0, 0, 0,-1,-1,},{31, 2, 0, 0, 31, 0ull, 0x1ull, 0ull, 0, 0, 0, 0,-1,-1,},};
static struct enum_fields *_sym323[] = {  (struct enum_fields *) -1,};

// Instruction set_mask_bit
static adl_instr_attrs _sym325 = { ((uint64_t)(1ULL << instr_ippu)) , 0 };

// Instruction set_mask_bit
static struct adl_operand _sym324_operands[] = { {11, 0, 0, 0, 16, 0ull, 0xfffull, 0ull, 0, 0, 0, 0,-1,-1,},{32, 1, 0, 0, 29, 0ull, 0x1ull, 0ull, 0, 0, 0, 0,-1,-1,},{33, 2, 0, 0, 30, 0ull, 0x1ull, 0ull, 0, 0, 0, 0,-1,-1,},{31, 3, 0, 0, 31, 0ull, 0x1ull, 0ull, 0, 0, 0, 0,-1,-1,},};
static struct enum_fields *_sym326[] = { 0,  (struct enum_fields *) -1,};

// Instruction set_range_aY_asA_Iu19
static adl_instr_attrs _sym328 = { ((uint64_t)(1ULL << instr_ippu)) , 0 };

// Instruction set_range_aY_asA_Iu19
static struct adl_operand _sym327_operands[] = { {0, 0, ADL_REGISTER, 0, 11, 0ull, 0x1ull, 0ull, 0, 0, 0, 0,-1,-1,},{2, 1, ADL_REGISTER, 0, 6, 0ull, 0x3ull, 0ull, 0, 0, 0, 0,-1,-1,},{15, 2, 0, 0, 9, 0ull, 0x7ffffull, 0ull, 0, 0, 0, 0,-1,-1,},{32, 3, 0, 0, 29, 0ull, 0x1ull, 0ull, 0, 0, 0, 0,-1,-1,},{33, 4, 0, 0, 30, 0ull, 0x1ull, 0ull, 0, 0, 0, 0,-1,-1,},{31, 5, 0, 0, 31, 0ull, 0x1ull, 0ull, 0, 0, 0, 0,-1,-1,},};
static struct enum_fields *_sym329[] = { &_sym2, &_sym6, 0,  (struct enum_fields *) -1,};

// Instruction set_range_aY_asA_asB
static adl_instr_attrs _sym331 = { ((uint64_t)(1ULL << instr_ippu)) , 0 };

// Instruction set_range_aY_asA_asB
static struct adl_operand _sym330_operands[] = { {0, 0, ADL_REGISTER, 0, 11, 0ull, 0x1ull, 0ull, 0, 0, 0, 0,-1,-1,},{2, 1, ADL_REGISTER, 0, 6, 0ull, 0x3ull, 0ull, 0, 0, 0, 0,-1,-1,},{1, 2, ADL_REGISTER, 0, 8, 0ull, 0x3ull, 0ull, 0, 0, 0, 0,-1,-1,},{32, 3, 0, 0, 29, 0ull, 0x1ull, 0ull, 0, 0, 0, 0,-1,-1,},{33, 4, 0, 0, 30, 0ull, 0x1ull, 0ull, 0, 0, 0, 0,-1,-1,},{31, 5, 0, 0, 31, 0ull, 0x1ull, 0ull, 0, 0, 0, 0,-1,-1,},};
static struct enum_fields *_sym332[] = { &_sym2, &_sym6, &_sym8,  (struct enum_fields *) -1,};

// Instruction st_aX_Is5
static adl_instr_attrs _sym334 = { ((uint64_t)(1ULL << instr_ippu)) , 0 };

// Instruction st_aX_Is5
static struct adl_operand _sym333_operands[] = { {40, 0, 0, 0, 3, 0ull, 0x7ull, 0ull, 0, 0, 0, 0,-1,-1,},{19, 1, ADL_SIGNED, 0, 6, 18446744073709551601ull-1, 15ull, 0ull, 0, 0, 0, 0,-1,-1,},{0, 2, ADL_REGISTER, 0, 11, 0ull, 0x1ull, 0ull, 0, 0, 0, 0,-1,-1,},{24, 3, 0, 0, 12, 0ull, 0x1ull, 0ull, 0, 0, 0, 0,-1,-1,},{9, 4, ADL_SIGNED, 0, 13, 18446744073709551613ull-1, 3ull, 0ull, 0, 0, 0, 0,-1,-1,},{37, 5, ADL_SIGNED, 0, 16, 18446744073709551361ull-1, 255ull, 0ull, 0, 0, 0, 0,-1,-1,},{41, 6, 0, 0, 26, 0ull, 0x7ull, 0ull, 0, 0, 0, 0,-1,-1,},{32, 7, 0, 0, 29, 0ull, 0x1ull, 0ull, 0, 0, 0, 0,-1,-1,},{33, 8, 0, 0, 30, 0ull, 0x1ull, 0ull, 0, 0, 0, 0,-1,-1,},{31, 9, 0, 0, 31, 0ull, 0x1ull, 0ull, 0, 0, 0, 0,-1,-1,},};
static struct enum_fields *_sym335[] = { &_sym82, 0, &_sym4, &_sym44, 0, 0, &_sym86, 0, 0, 0,  (struct enum_fields *) -1,};

// Instruction st_aX_Is5_minus
static adl_instr_attrs _sym337 = { ((uint64_t)(1ULL << instr_ippu)) , 0 };

// Shorthand:  st_aX_Is5_minus -> st_aX_Is5;

static bfd_uint64_t _sym339_modifier (const expressionS *operands, unsigned __cia ATTRIBUTE_UNUSED) { return - (IM5n_checker((operands[2].X_add_number),FALSE)); }
static struct adl_operand _sym338_operands[] = { {40, 4, 0, 0, 3, 0ull, 0x7ull, 0ull, 0, 0, 0, 0,-1,-1,},{19, 0, 0, 0, 0, 0, 0, 0, _sym339_modifier, 0, 0,0, -1,-1,},{0, 1, ADL_REGISTER, 0, 11, 0ull, 0x1ull, 0ull, 0, 0, 0, 0,-1,-1,},{24, 0, 0, 0, 12, 0ull, 0x1ull, 0ull, 0, 0, 0, 0,-1,-1,},{9, 3, ADL_SIGNED, 0, 13, 18446744073709551613ull-1, 3ull, 0ull, 0, 0, 0, 0,-1,-1,},{37, 5, ADL_SIGNED, 0, 16, 18446744073709551361ull-1, 255ull, 0ull, 0, 0, 0, 0,-1,-1,},{41, 6, 0, 0, 26, 0ull, 0x7ull, 0ull, 0, 0, 0, 0,-1,-1,},{32, 7, 0, 0, 29, 0ull, 0x1ull, 0ull, 0, 0, 0, 0,-1,-1,},{33, 8, 0, 0, 30, 0ull, 0x1ull, 0ull, 0, 0, 0, 0,-1,-1,},{31, 9, 0, 0, 31, 0ull, 0x1ull, 0ull, 0, 0, 0, 0,-1,-1,},};

// Instruction st_aX_Is5_minus
static struct adl_operand _sym336_operands[] = { {81, 0, 0, 0, 31, 0ull, 0x1ull, 0ull, 0, 0, 0, 0,-1,-1,},{43, 1, ADL_REGISTER, 0, 31, 0ull, 0x1ull, 0ull, 0, 0, 0, 0,-1,-1,},{72, 2, 0, 0, 31, 0ull, 0x1full, 0ull, 0, 0,IM5n_checker, 0,-1,-1,},{55, 3, ADL_SIGNED, 0, 31, 18446744073709551613ull-1, 3ull, 0ull, 0, 0, 0, 0,-1,-1,},{96, 4, 0, 0, 31, 0ull, 0x7ull, 0ull, 0, 0, 0, 0,-1,-1,},{93, 5, ADL_SIGNED, 0, 31, 18446744073709551361ull-1, 255ull, 0ull, 0, 0, 0, 0,-1,-1,},{97, 6, 0, 0, 31, 0ull, 0x7ull, 0ull, 0, 0, 0, 0,-1,-1,},{88, 7, 0, 0, 31, 0ull, 0x1ull, 0ull, 0, 0, 0, 0,-1,-1,},{89, 8, 0, 0, 31, 0ull, 0x1ull, 0ull, 0, 0, 0, 0,-1,-1,},{87, 9, 0, 0, 31, 0ull, 0x1ull, 0ull, 0, 0, 0, 0,-1,-1,},};
static struct adl_opcode _sym340[] = {
  // st_aX_Is5    (0)
  { "st_aX_Is5", 4, 32, 32,  0x3, { 0xa0000040,},0, "", 0, 10, 10, 0, 1, _sym338_operands,0,0,0, 0,&_sym337,0,{}, 0,0,0,0,0,-1, },
};

static struct enum_fields *_sym341[] = { &_sym42, &_sym2, 0, 0, &_sym80, 0, &_sym84,  (struct enum_fields *) -1,};

// Instruction st_aX_Is5_plus
static adl_instr_attrs _sym343 = { ((uint64_t)(1ULL << instr_ippu)) , 0 };

// Shorthand:  st_aX_Is5_plus -> st_aX_Is5;
static struct adl_operand _sym344_operands[] = { {40, 4, 0, 0, 3, 0ull, 0x7ull, 0ull, 0, 0, 0, 0,-1,-1,},{19, 2, ADL_SIGNED, 0, 6, 18446744073709551601ull-1, 15ull, 0ull, 0, 0, 0, 0,-1,-1,},{0, 1, ADL_REGISTER, 0, 11, 0ull, 0x1ull, 0ull, 0, 0, 0, 0,-1,-1,},{24, 0, 0, 0, 12, 0ull, 0x1ull, 0ull, 0, 0, 0, 0,-1,-1,},{9, 3, ADL_SIGNED, 0, 13, 18446744073709551613ull-1, 3ull, 0ull, 0, 0, 0, 0,-1,-1,},{37, 5, ADL_SIGNED, 0, 16, 18446744073709551361ull-1, 255ull, 0ull, 0, 0, 0, 0,-1,-1,},{41, 6, 0, 0, 26, 0ull, 0x7ull, 0ull, 0, 0, 0, 0,-1,-1,},{32, 7, 0, 0, 29, 0ull, 0x1ull, 0ull, 0, 0, 0, 0,-1,-1,},{33, 8, 0, 0, 30, 0ull, 0x1ull, 0ull, 0, 0, 0, 0,-1,-1,},{31, 9, 0, 0, 31, 0ull, 0x1ull, 0ull, 0, 0, 0, 0,-1,-1,},};

// Instruction st_aX_Is5_plus
static struct adl_operand _sym342_operands[] = { {81, 0, 0, 0, 31, 0ull, 0x1ull, 0ull, 0, 0, 0, 0,-1,-1,},{43, 1, ADL_REGISTER, 0, 31, 0ull, 0x1ull, 0ull, 0, 0, 0, 0,-1,-1,},{73, 2, ADL_SIGNED, 0, 31, 18446744073709551601ull-1, 15ull, 0ull, 0, 0, 0, 0,-1,-1,},{55, 3, ADL_SIGNED, 0, 31, 18446744073709551613ull-1, 3ull, 0ull, 0, 0, 0, 0,-1,-1,},{96, 4, 0, 0, 31, 0ull, 0x7ull, 0ull, 0, 0, 0, 0,-1,-1,},{93, 5, ADL_SIGNED, 0, 31, 18446744073709551361ull-1, 255ull, 0ull, 0, 0, 0, 0,-1,-1,},{97, 6, 0, 0, 31, 0ull, 0x7ull, 0ull, 0, 0, 0, 0,-1,-1,},{88, 7, 0, 0, 31, 0ull, 0x1ull, 0ull, 0, 0, 0, 0,-1,-1,},{89, 8, 0, 0, 31, 0ull, 0x1ull, 0ull, 0, 0, 0, 0,-1,-1,},{87, 9, 0, 0, 31, 0ull, 0x1ull, 0ull, 0, 0, 0, 0,-1,-1,},};
static struct adl_opcode _sym345[] = {
  // st_aX_Is5    (0)
  { "st_aX_Is5", 4, 32, 32,  0x3, { 0xa0000040,},0, "", 0, 10, 10, 0, 1, _sym344_operands,0,0,0, 0,&_sym343,0,{}, 0,0,0,0,0,-1, },
};

static struct enum_fields *_sym346[] = { &_sym42, &_sym2, 0, 0, &_sym80, 0, &_sym84,  (struct enum_fields *) -1,};

// Instruction st_aX_Is8
static adl_instr_attrs _sym348 = { ((uint64_t)(1ULL << instr_ippu)) , 0 };

// Instruction st_aX_Is8
static struct adl_operand _sym347_operands[] = { {22, 0, ADL_SIGNED, 0, 3, 18446744073709551489ull-1, 127ull, 0ull, 0, 0, 0, 0,-1,-1,},{0, 1, ADL_REGISTER, 0, 11, 0ull, 0x1ull, 0ull, 0, 0, 0, 0,-1,-1,},{24, 2, 0, 0, 12, 0ull, 0x1ull, 0ull, 0, 0, 0, 0,-1,-1,},{9, 3, ADL_SIGNED, 0, 13, 18446744073709551613ull-1, 3ull, 0ull, 0, 0, 0, 0,-1,-1,},{37, 4, ADL_SIGNED, 0, 16, 18446744073709551361ull-1, 255ull, 0ull, 0, 0, 0, 0,-1,-1,},{41, 5, 0, 0, 26, 0ull, 0x7ull, 0ull, 0, 0, 0, 0,-1,-1,},{32, 6, 0, 0, 29, 0ull, 0x1ull, 0ull, 0, 0, 0, 0,-1,-1,},{33, 7, 0, 0, 30, 0ull, 0x1ull, 0ull, 0, 0, 0, 0,-1,-1,},{31, 8, 0, 0, 31, 0ull, 0x1ull, 0ull, 0, 0, 0, 0,-1,-1,},};
static struct enum_fields *_sym349[] = { 0, &_sym4, &_sym44, 0, 0, &_sym86, 0, 0, 0,  (struct enum_fields *) -1,};

// Instruction st_aX_Is8_minus
static adl_instr_attrs _sym351 = { ((uint64_t)(1ULL << instr_ippu)) , 0 };

// Shorthand:  st_aX_Is8_minus -> st_aX_Is8;

static bfd_uint64_t _sym353_modifier (const expressionS *operands, unsigned __cia ATTRIBUTE_UNUSED) { return - (IM8n_checker((operands[2].X_add_number),FALSE)); }
static struct adl_operand _sym352_operands[] = { {22, 0, 0, 0, 0, 0, 0, 0, _sym353_modifier, 0, 0,0, -1,-1,},{0, 1, ADL_REGISTER, 0, 11, 0ull, 0x1ull, 0ull, 0, 0, 0, 0,-1,-1,},{24, 0, 0, 0, 12, 0ull, 0x1ull, 0ull, 0, 0, 0, 0,-1,-1,},{9, 3, ADL_SIGNED, 0, 13, 18446744073709551613ull-1, 3ull, 0ull, 0, 0, 0, 0,-1,-1,},{37, 4, ADL_SIGNED, 0, 16, 18446744073709551361ull-1, 255ull, 0ull, 0, 0, 0, 0,-1,-1,},{41, 5, 0, 0, 26, 0ull, 0x7ull, 0ull, 0, 0, 0, 0,-1,-1,},{32, 6, 0, 0, 29, 0ull, 0x1ull, 0ull, 0, 0, 0, 0,-1,-1,},{33, 7, 0, 0, 30, 0ull, 0x1ull, 0ull, 0, 0, 0, 0,-1,-1,},{31, 8, 0, 0, 31, 0ull, 0x1ull, 0ull, 0, 0, 0, 0,-1,-1,},};

// Instruction st_aX_Is8_minus
static struct adl_operand _sym350_operands[] = { {81, 0, 0, 0, 31, 0ull, 0x1ull, 0ull, 0, 0, 0, 0,-1,-1,},{43, 1, ADL_REGISTER, 0, 31, 0ull, 0x1ull, 0ull, 0, 0, 0, 0,-1,-1,},{76, 2, 0, 0, 31, 0ull, 0xffull, 0ull, 0, 0,IM8n_checker, 0,-1,-1,},{55, 3, ADL_SIGNED, 0, 31, 18446744073709551613ull-1, 3ull, 0ull, 0, 0, 0, 0,-1,-1,},{93, 4, ADL_SIGNED, 0, 31, 18446744073709551361ull-1, 255ull, 0ull, 0, 0, 0, 0,-1,-1,},{97, 5, 0, 0, 31, 0ull, 0x7ull, 0ull, 0, 0, 0, 0,-1,-1,},{88, 6, 0, 0, 31, 0ull, 0x1ull, 0ull, 0, 0, 0, 0,-1,-1,},{89, 7, 0, 0, 31, 0ull, 0x1ull, 0ull, 0, 0, 0, 0,-1,-1,},{87, 8, 0, 0, 31, 0ull, 0x1ull, 0ull, 0, 0, 0, 0,-1,-1,},};
static struct adl_opcode _sym354[] = {
  // st_aX_Is8    (0)
  { "st_aX_Is8", 4, 32, 32,  0x3, { 0xa0000000,},0, "", 0, 9, 9, 0, 1, _sym352_operands,0,0,0, 0,&_sym351,0,{}, 0,0,0,0,0,-1, },
};

static struct enum_fields *_sym355[] = { &_sym42, &_sym2, 0, 0, 0, &_sym84,  (struct enum_fields *) -1,};

// Instruction st_aX_Is8_plus
static adl_instr_attrs _sym357 = { ((uint64_t)(1ULL << instr_ippu)) , 0 };

// Shorthand:  st_aX_Is8_plus -> st_aX_Is8;
static struct adl_operand _sym358_operands[] = { {22, 2, ADL_SIGNED, 0, 3, 18446744073709551489ull-1, 127ull, 0ull, 0, 0, 0, 0,-1,-1,},{0, 1, ADL_REGISTER, 0, 11, 0ull, 0x1ull, 0ull, 0, 0, 0, 0,-1,-1,},{24, 0, 0, 0, 12, 0ull, 0x1ull, 0ull, 0, 0, 0, 0,-1,-1,},{9, 3, ADL_SIGNED, 0, 13, 18446744073709551613ull-1, 3ull, 0ull, 0, 0, 0, 0,-1,-1,},{37, 4, ADL_SIGNED, 0, 16, 18446744073709551361ull-1, 255ull, 0ull, 0, 0, 0, 0,-1,-1,},{41, 5, 0, 0, 26, 0ull, 0x7ull, 0ull, 0, 0, 0, 0,-1,-1,},{32, 6, 0, 0, 29, 0ull, 0x1ull, 0ull, 0, 0, 0, 0,-1,-1,},{33, 7, 0, 0, 30, 0ull, 0x1ull, 0ull, 0, 0, 0, 0,-1,-1,},{31, 8, 0, 0, 31, 0ull, 0x1ull, 0ull, 0, 0, 0, 0,-1,-1,},};

// Instruction st_aX_Is8_plus
static struct adl_operand _sym356_operands[] = { {81, 0, 0, 0, 31, 0ull, 0x1ull, 0ull, 0, 0, 0, 0,-1,-1,},{43, 1, ADL_REGISTER, 0, 31, 0ull, 0x1ull, 0ull, 0, 0, 0, 0,-1,-1,},{77, 2, ADL_SIGNED, 0, 31, 18446744073709551489ull-1, 127ull, 0ull, 0, 0, 0, 0,-1,-1,},{55, 3, ADL_SIGNED, 0, 31, 18446744073709551613ull-1, 3ull, 0ull, 0, 0, 0, 0,-1,-1,},{93, 4, ADL_SIGNED, 0, 31, 18446744073709551361ull-1, 255ull, 0ull, 0, 0, 0, 0,-1,-1,},{97, 5, 0, 0, 31, 0ull, 0x7ull, 0ull, 0, 0, 0, 0,-1,-1,},{88, 6, 0, 0, 31, 0ull, 0x1ull, 0ull, 0, 0, 0, 0,-1,-1,},{89, 7, 0, 0, 31, 0ull, 0x1ull, 0ull, 0, 0, 0, 0,-1,-1,},{87, 8, 0, 0, 31, 0ull, 0x1ull, 0ull, 0, 0, 0, 0,-1,-1,},};
static struct adl_opcode _sym359[] = {
  // st_aX_Is8    (0)
  { "st_aX_Is8", 4, 32, 32,  0x3, { 0xa0000000,},0, "", 0, 9, 9, 0, 1, _sym358_operands,0,0,0, 0,&_sym357,0,{}, 0,0,0,0,0,-1, },
};

static struct enum_fields *_sym360[] = { &_sym42, &_sym2, 0, 0, 0, &_sym84,  (struct enum_fields *) -1,};

// Instruction st_aX_iY_Is4
static adl_instr_attrs _sym362 = { ((uint64_t)(1ULL << instr_ippu)) , 0 };

// Instruction st_aX_iY_Is4
static struct adl_operand _sym361_operands[] = { {25, 0, ADL_REGISTER, 0, 6, 0ull, 0x1ull, 0ull, 0, 0, 0, 0,-1,-1,},{18, 1, ADL_SIGNED, 0, 7, 18446744073709551609ull-1, 7ull, 0ull, 0, 0, 0, 0,-1,-1,},{0, 2, ADL_REGISTER, 0, 11, 0ull, 0x1ull, 0ull, 0, 0, 0, 0,-1,-1,},{24, 3, 0, 0, 12, 0ull, 0x1ull, 0ull, 0, 0, 0, 0,-1,-1,},{9, 4, ADL_SIGNED, 0, 13, 18446744073709551613ull-1, 3ull, 0ull, 0, 0, 0, 0,-1,-1,},{37, 5, ADL_SIGNED, 0, 16, 18446744073709551361ull-1, 255ull, 0ull, 0, 0, 0, 0,-1,-1,},{41, 6, 0, 0, 26, 0ull, 0x7ull, 0ull, 0, 0, 0, 0,-1,-1,},{32, 7, 0, 0, 29, 0ull, 0x1ull, 0ull, 0, 0, 0, 0,-1,-1,},{33, 8, 0, 0, 30, 0ull, 0x1ull, 0ull, 0, 0, 0, 0,-1,-1,},{31, 9, 0, 0, 31, 0ull, 0x1ull, 0ull, 0, 0, 0, 0,-1,-1,},};
static struct enum_fields *_sym363[] = { &_sym48, 0, &_sym4, &_sym44, 0, 0, &_sym86, 0, 0, 0,  (struct enum_fields *) -1,};

// Instruction st_aX_iY_Is4_minus
static adl_instr_attrs _sym365 = { ((uint64_t)(1ULL << instr_ippu)) , 0 };

// Shorthand:  st_aX_iY_Is4_minus -> st_aX_iY_Is4;

static bfd_uint64_t _sym367_modifier (const expressionS *operands, unsigned __cia ATTRIBUTE_UNUSED) { return - (IM4n_checker((operands[3].X_add_number),FALSE)); }
static struct adl_operand _sym366_operands[] = { {25, 2, ADL_REGISTER, 0, 6, 0ull, 0x1ull, 0ull, 0, 0, 0, 0,-1,-1,},{18, 0, 0, 0, 0, 0, 0, 0, _sym367_modifier, 0, 0,0, -1,-1,},{0, 1, ADL_REGISTER, 0, 11, 0ull, 0x1ull, 0ull, 0, 0, 0, 0,-1,-1,},{24, 0, 0, 0, 12, 0ull, 0x1ull, 0ull, 0, 0, 0, 0,-1,-1,},{9, 4, ADL_SIGNED, 0, 13, 18446744073709551613ull-1, 3ull, 0ull, 0, 0, 0, 0,-1,-1,},{37, 5, ADL_SIGNED, 0, 16, 18446744073709551361ull-1, 255ull, 0ull, 0, 0, 0, 0,-1,-1,},{41, 6, 0, 0, 26, 0ull, 0x7ull, 0ull, 0, 0, 0, 0,-1,-1,},{32, 7, 0, 0, 29, 0ull, 0x1ull, 0ull, 0, 0, 0, 0,-1,-1,},{33, 8, 0, 0, 30, 0ull, 0x1ull, 0ull, 0, 0, 0, 0,-1,-1,},{31, 9, 0, 0, 31, 0ull, 0x1ull, 0ull, 0, 0, 0, 0,-1,-1,},};

// Instruction st_aX_iY_Is4_minus
static struct adl_operand _sym364_operands[] = { {81, 0, 0, 0, 31, 0ull, 0x1ull, 0ull, 0, 0, 0, 0,-1,-1,},{43, 1, ADL_REGISTER, 0, 31, 0ull, 0x1ull, 0ull, 0, 0, 0, 0,-1,-1,},{82, 2, ADL_REGISTER, 0, 31, 0ull, 0x1ull, 0ull, 0, 0, 0, 0,-1,-1,},{70, 3, 0, 0, 31, 0ull, 0xfull, 0ull, 0, 0,IM4n_checker, 0,-1,-1,},{55, 4, ADL_SIGNED, 0, 31, 18446744073709551613ull-1, 3ull, 0ull, 0, 0, 0, 0,-1,-1,},{93, 5, ADL_SIGNED, 0, 31, 18446744073709551361ull-1, 255ull, 0ull, 0, 0, 0, 0,-1,-1,},{97, 6, 0, 0, 31, 0ull, 0x7ull, 0ull, 0, 0, 0, 0,-1,-1,},{88, 7, 0, 0, 31, 0ull, 0x1ull, 0ull, 0, 0, 0, 0,-1,-1,},{89, 8, 0, 0, 31, 0ull, 0x1ull, 0ull, 0, 0, 0, 0,-1,-1,},{87, 9, 0, 0, 31, 0ull, 0x1ull, 0ull, 0, 0, 0, 0,-1,-1,},};
static struct adl_opcode _sym368[] = {
  // st_aX_iY_Is4    (0)
  { "st_aX_iY_Is4", 4, 32, 32,  0x3, { 0xb8000040,},0, "", 0, 10, 10, 0, 1, _sym366_operands,0,0,0, 0,&_sym365,0,{}, 0,0,0,0,0,-1, },
};

static struct enum_fields *_sym369[] = { &_sym42, &_sym2, &_sym46, 0, 0, 0, &_sym84,  (struct enum_fields *) -1,};

// Instruction st_aX_iY_Is4_plus
static adl_instr_attrs _sym371 = { ((uint64_t)(1ULL << instr_ippu)) , 0 };

// Shorthand:  st_aX_iY_Is4_plus -> st_aX_iY_Is4;
static struct adl_operand _sym372_operands[] = { {25, 2, ADL_REGISTER, 0, 6, 0ull, 0x1ull, 0ull, 0, 0, 0, 0,-1,-1,},{18, 3, ADL_SIGNED, 0, 7, 18446744073709551609ull-1, 7ull, 0ull, 0, 0, 0, 0,-1,-1,},{0, 1, ADL_REGISTER, 0, 11, 0ull, 0x1ull, 0ull, 0, 0, 0, 0,-1,-1,},{24, 0, 0, 0, 12, 0ull, 0x1ull, 0ull, 0, 0, 0, 0,-1,-1,},{9, 4, ADL_SIGNED, 0, 13, 18446744073709551613ull-1, 3ull, 0ull, 0, 0, 0, 0,-1,-1,},{37, 5, ADL_SIGNED, 0, 16, 18446744073709551361ull-1, 255ull, 0ull, 0, 0, 0, 0,-1,-1,},{41, 6, 0, 0, 26, 0ull, 0x7ull, 0ull, 0, 0, 0, 0,-1,-1,},{32, 7, 0, 0, 29, 0ull, 0x1ull, 0ull, 0, 0, 0, 0,-1,-1,},{33, 8, 0, 0, 30, 0ull, 0x1ull, 0ull, 0, 0, 0, 0,-1,-1,},{31, 9, 0, 0, 31, 0ull, 0x1ull, 0ull, 0, 0, 0, 0,-1,-1,},};

// Instruction st_aX_iY_Is4_plus
static struct adl_operand _sym370_operands[] = { {81, 0, 0, 0, 31, 0ull, 0x1ull, 0ull, 0, 0, 0, 0,-1,-1,},{43, 1, ADL_REGISTER, 0, 31, 0ull, 0x1ull, 0ull, 0, 0, 0, 0,-1,-1,},{82, 2, ADL_REGISTER, 0, 31, 0ull, 0x1ull, 0ull, 0, 0, 0, 0,-1,-1,},{71, 3, ADL_SIGNED, 0, 31, 18446744073709551609ull-1, 7ull, 0ull, 0, 0, 0, 0,-1,-1,},{55, 4, ADL_SIGNED, 0, 31, 18446744073709551613ull-1, 3ull, 0ull, 0, 0, 0, 0,-1,-1,},{93, 5, ADL_SIGNED, 0, 31, 18446744073709551361ull-1, 255ull, 0ull, 0, 0, 0, 0,-1,-1,},{97, 6, 0, 0, 31, 0ull, 0x7ull, 0ull, 0, 0, 0, 0,-1,-1,},{88, 7, 0, 0, 31, 0ull, 0x1ull, 0ull, 0, 0, 0, 0,-1,-1,},{89, 8, 0, 0, 31, 0ull, 0x1ull, 0ull, 0, 0, 0, 0,-1,-1,},{87, 9, 0, 0, 31, 0ull, 0x1ull, 0ull, 0, 0, 0, 0,-1,-1,},};
static struct adl_opcode _sym373[] = {
  // st_aX_iY_Is4    (0)
  { "st_aX_iY_Is4", 4, 32, 32,  0x3, { 0xb8000040,},0, "", 0, 10, 10, 0, 1, _sym372_operands,0,0,0, 0,&_sym371,0,{}, 0,0,0,0,0,-1, },
};

static struct enum_fields *_sym374[] = { &_sym42, &_sym2, &_sym46, 0, 0, 0, &_sym84,  (struct enum_fields *) -1,};

// Instruction st_aX_mX
static adl_instr_attrs _sym376 = { ((uint64_t)(1ULL << instr_ippu)) , 0 };

// Instruction st_aX_mX
static struct adl_operand _sym375_operands[] = { {24, 0, 0, 0, 12, 0ull, 0x1ull, 0ull, 0, 0, 0, 0,-1,-1,},{0, 1, ADL_REGISTER, 0, 11, 0ull, 0x1ull, 0ull, 0, 0, 0, 0,-1,-1,},{35, 2, 0, 0, 8, 0ull, 0x1ull, 0ull, 0, 0, 0, 0,-1,-1,},{34, 3, ADL_REGISTER, 0, 9, 0ull, 0x1ull, 0ull, 0, 0, 0, 0,-1,-1,},{9, 4, ADL_SIGNED, 0, 13, 18446744073709551613ull-1, 3ull, 0ull, 0, 0, 0, 0,-1,-1,},{40, 5, 0, 0, 3, 0ull, 0x7ull, 0ull, 0, 0, 0, 0,-1,-1,},{37, 6, ADL_SIGNED, 0, 16, 18446744073709551361ull-1, 255ull, 0ull, 0, 0, 0, 0,-1,-1,},{41, 7, 0, 0, 26, 0ull, 0x7ull, 0ull, 0, 0, 0, 0,-1,-1,},{32, 8, 0, 0, 29, 0ull, 0x1ull, 0ull, 0, 0, 0, 0,-1,-1,},{33, 9, 0, 0, 30, 0ull, 0x1ull, 0ull, 0, 0, 0, 0,-1,-1,},{31, 10, 0, 0, 31, 0ull, 0x1ull, 0ull, 0, 0, 0, 0,-1,-1,},};
static struct enum_fields *_sym377[] = { &_sym42, &_sym2, &_sym72, &_sym68, 0, &_sym80, 0, &_sym84,  (struct enum_fields *) -1,};

// Instruction loop_begin_0
static adl_instr_attrs _sym379 = { ((uint64_t)(1ULL << instr_loop_begin)) , 0 };

// Instruction loop_begin_0
static struct adl_operand _sym378_operands[] = {  0 };
static struct enum_fields *_sym380[] = {  (struct enum_fields *) -1,};

// Instruction loop_begin_1
static adl_instr_attrs _sym382 = { ((uint64_t)(1ULL << instr_loop_begin)) | ((uint64_t)(1ULL << instr_loop_1)) , 0 };

// Instruction loop_begin_1
static struct adl_operand _sym381_operands[] = {  0 };
static struct enum_fields *_sym383[] = {  (struct enum_fields *) -1,};

// Instruction loop_end_0
static adl_instr_attrs _sym385 = { ((uint64_t)(1ULL << instr_loop_end)) , 0 };

// Instruction loop_end_0
static struct adl_operand _sym384_operands[] = {  0 };
static struct enum_fields *_sym386[] = {  (struct enum_fields *) -1,};

// Instruction loop_end_1
static adl_instr_attrs _sym388 = { ((uint64_t)(1ULL << instr_loop_end)) | ((uint64_t)(1ULL << instr_loop_1)) , 0 };

// Instruction loop_end_1
static struct adl_operand _sym387_operands[] = {  0 };
static struct enum_fields *_sym389[] = {  (struct enum_fields *) -1,};

// Instructions named 'add'.
static struct adl_opcode _sym390[] = {
  // add_aX_mY    (0)
  { "add_aX_mY", 4, 32, 32,  0x0, { 0x70080078,},_sym92, "^ *(a0|a1),(m0|m1)$", 0, 5, 5, 0, 0, _sym90_operands,0,0,0, 0,&_sym91,0,{}, 0,0,0,0,0,-1, },
  // add_aX_Is8    (1)
  { "add_aX_Is8", 4, 32, 32,  0x0, { 0xe0080078,},_sym89, "^ *(a0|a1),([^},[, ]+)$", 0, 5, 5, 0, 0, _sym87_operands,0,0,0, 0,&_sym88,0,{}, 0,0,0,0,0,1, },
};

// Instructions named 'add.cb'.
static struct adl_opcode _sym391[] = {
  // add_cb_aX_mY    (0)
  { "add_cb_aX_mY", 4, 32, 32,  0x0, { 0x70000078,},_sym98, "^ *(a0|a1),(m0|m1)$", 0, 5, 5, 0, 0, _sym96_operands,0,0,0, 0,&_sym97,0,{}, 0,0,0,0,0,-1, },
  // add_cb_aX_Is8    (1)
  { "add_cb_aX_Is8", 4, 32, 32,  0x0, { 0xe0000078,},_sym95, "^ *(a0|a1),([^},[, ]+)$", 0, 5, 5, 0, 0, _sym93_operands,0,0,0, 0,&_sym94,0,{}, 0,0,0,0,0,1, },
};

// Instructions named 'clr'.
static struct adl_opcode _sym392[] = {
  // clr_Rx    (0)
  { "clr_Rx", 4, 32, 32,  0x0, { 0x4f000000,},_sym101, "^ *(r0|r1|r0, r1|r0,r1|r1, r0|r1,r0)$", 0, 4, 4, 0, 0, _sym99_operands,0,0,0, 0,&_sym100,0,{}, 0,0,0,0,0,0, },
};

// Instructions named 'clr.mask'.
static struct adl_opcode _sym393[] = {
  // clr_mask_bit    (0)
  { "clr_mask_bit", 4, 32, 32,  0x0, { 0x41000000,},_sym107, "^ *([^},[ ]+)$", 0, 4, 4, 0, 0, _sym105_operands,0,0,0, 0,&_sym106,0,{}, 0,0,0,0,0,0, },
};

// Instructions named 'clr.mask.all'.
static struct adl_opcode _sym394[] = {
  // clr_mask_all    (0)
  { "clr_mask_all", 4, 32, 32,  0x0, { 0x44000000,},_sym104, "$", 0, 3, 3, 0, 0, _sym102_operands,0,0,0, 0,&_sym103,0,{}, 0,0,0,0,0,-1, },
};

// Instructions named 'cmp.bit'.
static struct adl_opcode _sym395[] = {
  // cmp_bit    (0)
  { "cmp_bit", 4, 32, 32,  0x0, { 0x40000000,},_sym110, "^ *([^},[ ]+)$", 0, 4, 4, 0, 0, _sym108_operands,0,0,0, 0,&_sym109,0,{}, 0,0,0,0,0,0, },
};

// Instructions named 'done'.
static struct adl_opcode _sym396[] = {
  // done    (0)
  { "done", 4, 32, 32,  0x0, { 0x8000000,},_sym113, "$", 0, 3, 3, 0, 0, _sym111_operands,0,0,0, 0,&_sym112,0,{}, 0,0,0,0,0,-1, },
};

// Instructions named 'jmp'.
static struct adl_opcode _sym397[] = {
  // jmp    (0)
  { "jmp", 4, 32, 32,  0x0, { 0x10000000,},_sym116, "^ *([^} ,\t,]+),([^} ,\t,]+)$", 0, 5, 7, 0, 0, _sym114_operands,0,0,0, 0,&_sym115,0,{}, 0,0,0,0,0,0, },
// jmp_jmp    (1)
{ "jmp_jmp", 0, 32, 32,  0x0, { 0 },_sym121, "^ *([^},[ ]+)$", 0, 4, 4, 0, 0, _sym117_operands,_sym120,1,0, 0,&_sym118,0,{}, 0,0,0,0,0,1, },
};

// Instructions named 'jmp.nz'.
static struct adl_opcode _sym398[] = {
  // jmp_nz    (0)
  { "jmp_nz", 0, 32, 32,  0x0, { 0 },_sym126, "^ *([^},[ ]+)$", 0, 4, 4, 0, 0, _sym122_operands,_sym125,1,0, 0,&_sym123,0,{}, 0,0,0,0,0,0, },
};

// Instructions named 'jmp.z'.
static struct adl_opcode _sym399[] = {
  // jmp_z    (0)
  { "jmp_z", 0, 32, 32,  0x0, { 0 },_sym131, "^ *([^},[ ]+)$", 0, 4, 4, 0, 0, _sym127_operands,_sym130,1,0, 0,&_sym128,0,{}, 0,0,0,0,0,0, },
};

// Instructions named 'jsr'.
static struct adl_opcode _sym400[] = {
  // jsr    (0)
  { "jsr", 0, 32, 32,  0x0, { 0 },_sym136, "^ *([^},[ ]+)$", 0, 4, 4, 0, 0, _sym132_operands,_sym135,1,0, 0,&_sym133,0,{}, 0,0,0,0,0,0, },
};

// Instructions named 'jsr.nz'.
static struct adl_opcode _sym401[] = {
  // jsr_nz    (0)
  { "jsr_nz", 0, 32, 32,  0x0, { 0 },_sym141, "^ *([^},[ ]+)$", 0, 4, 4, 0, 0, _sym137_operands,_sym140,1,0, 0,&_sym138,0,{}, 0,0,0,0,0,0, },
};

// Instructions named 'jsr.z'.
static struct adl_opcode _sym402[] = {
  // jsr_z    (0)
  { "jsr_z", 0, 32, 32,  0x0, { 0 },_sym146, "^ *([^},[ ]+)$", 0, 4, 4, 0, 0, _sym142_operands,_sym145,1,0, 0,&_sym143,0,{}, 0,0,0,0,0,0, },
};

// Instructions named 'ld'.
static struct adl_opcode _sym403[] = {
  // ld_aX_mX    (0)
  { "ld_aX_mX", 4, 32, 32,  0x0, { 0x70000000,},_sym191, "^ *(\\.ippu|\\.vcpu) \\[(a0|a1)\\](\\+|\\-)(m0|m1),([^},[[ ,,,, ]+),(normal|br|dr|br_dr|vindirect|indirect),([^},[[ ,,,, ]+),(normal|e256|e128|e64|e32|e16|e8|e4|L2H|H2L|L2L|H2H)$", 0, 11, 11, 0, 1, _sym189_operands,0,0,1, 0,&_sym190,0,{}, 0,0,0,0,0,0, },
// ld_aX_Is5_minus    (1)
{ "ld_aX_Is5_minus", 0, 32, 32,  0x0, { 0 },_sym155, "^ *(\\.ippu|\\.vcpu) \\[(a0|a1)\\]\\-([^},[[ ,,,, ]+),([^},[[ ,,,, ]+),(normal|br|dr|br_dr|vindirect|indirect),([^},[[ ,,,, ]+),(normal|e256|e128|e64|e32|e16|e8|e4|L2H|H2L|L2L|H2H)$", 0, 10, 10, 0, 1, _sym150_operands,_sym154,1,1, 0,&_sym151,0,{}, 0,0,0,0,0,1, },
// ld_aX_Is5_plus    (2)
{ "ld_aX_Is5_plus", 0, 32, 32,  0x0, { 0 },_sym160, "^ *(\\.ippu|\\.vcpu) \\[(a0|a1)\\]\\+([^},[[ ,,,, ]+),([^},[[ ,,,, ]+),(normal|br|dr|br_dr|vindirect|indirect),([^},[[ ,,,, ]+),(normal|e256|e128|e64|e32|e16|e8|e4|L2H|H2L|L2L|H2H)$", 0, 10, 10, 0, 1, _sym156_operands,_sym159,1,1, 0,&_sym157,0,{}, 0,0,0,0,0,2, },
// ld_aX_iY_Is4_minus    (3)
{ "ld_aX_iY_Is4_minus", 0, 32, 32,  0x0, { 0 },_sym183, "^ *(\\.ippu|\\.vcpu) \\[(a0|a1)\\+(i0|i1)\\]\\-([^},[[ ,,, ]+),([^},[[ ,,, ]+),([^},[[ ,,, ]+),(normal|e256|e128|e64|e32|e16|e8|e4|L2H|H2L|L2L|H2H)$", 0, 10, 10, 0, 1, _sym178_operands,_sym182,1,1, 0,&_sym179,0,{}, 0,0,0,0,0,3, },
// ld_aX_iY_Is4_plus    (4)
{ "ld_aX_iY_Is4_plus", 0, 32, 32,  0x0, { 0 },_sym188, "^ *(\\.ippu|\\.vcpu) \\[(a0|a1)\\+(i0|i1)\\]\\+([^},[[ ,,, ]+),([^},[[ ,,, ]+),([^},[[ ,,, ]+),(normal|e256|e128|e64|e32|e16|e8|e4|L2H|H2L|L2L|H2H)$", 0, 10, 10, 0, 1, _sym184_operands,_sym187,1,1, 0,&_sym185,0,{}, 0,0,0,0,0,4, },
// ld_aX_Is8_minus    (5)
{ "ld_aX_Is8_minus", 0, 32, 32,  0x0, { 0 },_sym169, "^ *(\\.ippu|\\.vcpu) \\[(a0|a1)\\]\\-([^},[[ ,,, ]+),([^},[[ ,,, ]+),([^},[[ ,,, ]+),(normal|e256|e128|e64|e32|e16|e8|e4|L2H|H2L|L2L|H2H)$", 0, 9, 9, 0, 1, _sym164_operands,_sym168,1,1, 0,&_sym165,0,{}, 0,0,0,0,0,5, },
// ld_aX_Is8_plus    (6)
{ "ld_aX_Is8_plus", 0, 32, 32,  0x0, { 0 },_sym174, "^ *(\\.ippu|\\.vcpu) \\[(a0|a1)\\]\\+([^},[[ ,,, ]+),([^},[[ ,,, ]+),([^},[[ ,,, ]+),(normal|e256|e128|e64|e32|e16|e8|e4|L2H|H2L|L2L|H2H)$", 0, 9, 9, 0, 1, _sym170_operands,_sym173,1,1, 0,&_sym171,0,{}, 0,0,0,0,0,6, },
// ld_asX_base_Iu6    (7)
{ "ld_asX_base_Iu6", 4, 32, 32,  0x0, { 0x50000000,},_sym194, "^ *(as0|as1|as2|as3),([^},[, ]+)$", 0, 5, 5, 0, 0, _sym192_operands,0,0,0, 0,&_sym193,0,{}, 0,0,0,0,0,7, },
};

// Instructions named 'ld.index.ippu'.
static struct adl_opcode _sym404[] = {
  // ld_index_aX_mX_ippu    (0)
  { "ld_index_aX_mX_ippu", 0, 32, 32,  0x0, { 0 },_sym227, "^ *\\[(a0|a1)\\](\\+|\\-)(m0|m1)$", 0, 6, 6, 0, 0, _sym223_operands,_sym226,1,0, 0,&_sym224,0,{}, 0,0,0,0,0,0, },
  // ld_index_aX_Is9_minus_ippu    (1)
  { "ld_index_aX_Is9_minus_ippu", 0, 32, 32,  0x0, { 0 },_sym203, "^ *\\[(a0|a1)\\]\\-([^},[[ ]+)$", 0, 5, 5, 0, 0, _sym198_operands,_sym202,1,0, 0,&_sym199,0,{}, 0,0,0,0,0,1, },
// ld_index_aX_Is9_plus_ippu    (2)
{ "ld_index_aX_Is9_plus_ippu", 0, 32, 32,  0x0, { 0 },_sym214, "^ *\\[(a0|a1)\\]\\+([^},[[ ]+)$", 0, 5, 5, 0, 0, _sym210_operands,_sym213,1,0, 0,&_sym211,0,{}, 0,0,0,0,0,2, },
};

// Instructions named 'ld.index.vcpu'.
static struct adl_opcode _sym405[] = {
  // ld_index_aX_mX_vcpu    (0)
  { "ld_index_aX_mX_vcpu", 0, 32, 32,  0x0, { 0 },_sym232, "^ *\\[(a0|a1)\\](\\+|\\-)(m0|m1)$", 0, 6, 6, 0, 0, _sym228_operands,_sym231,1,0, 0,&_sym229,0,{}, 0,0,0,0,0,0, },
  // ld_index_aX_Is9_minus_vcpu    (1)
  { "ld_index_aX_Is9_minus_vcpu", 0, 32, 32,  0x0, { 0 },_sym209, "^ *\\[(a0|a1)\\]\\-([^},[[ ]+)$", 0, 5, 5, 0, 0, _sym204_operands,_sym208,1,0, 0,&_sym205,0,{}, 0,0,0,0,0,1, },
// ld_index_aX_Is9_plus_vcpu    (2)
{ "ld_index_aX_Is9_plus_vcpu", 0, 32, 32,  0x0, { 0 },_sym219, "^ *\\[(a0|a1)\\]\\+([^},[[ ]+)$", 0, 5, 5, 0, 0, _sym215_operands,_sym218,1,0, 0,&_sym216,0,{}, 0,0,0,0,0,2, },
};

// Instructions named 'ld.mask.ippu'.
static struct adl_opcode _sym406[] = {
  // ld_mask_aX_mX_ippu    (0)
  { "ld_mask_aX_mX_ippu", 0, 32, 32,  0x0, { 0 },_sym265, "^ *\\[(a0|a1)\\](\\+|\\-)(m0|m1)$", 0, 6, 6, 0, 0, _sym261_operands,_sym264,1,0, 0,&_sym262,0,{}, 0,0,0,0,0,0, },
  // ld_mask_aX_Is9_minus_ippu    (1)
  { "ld_mask_aX_Is9_minus_ippu", 0, 32, 32,  0x0, { 0 },_sym241, "^ *\\[(a0|a1)\\]\\-([^},[[ ]+)$", 0, 5, 5, 0, 0, _sym236_operands,_sym240,1,0, 0,&_sym237,0,{}, 0,0,0,0,0,1, },
// ld_mask_aX_Is9_plus_ippu    (2)
{ "ld_mask_aX_Is9_plus_ippu", 0, 32, 32,  0x0, { 0 },_sym252, "^ *\\[(a0|a1)\\]\\+([^},[[ ]+)$", 0, 5, 5, 0, 0, _sym248_operands,_sym251,1,0, 0,&_sym249,0,{}, 0,0,0,0,0,2, },
};

// Instructions named 'ld.mask.vcpu'.
static struct adl_opcode _sym407[] = {
  // ld_mask_aX_mX_vcpu    (0)
  { "ld_mask_aX_mX_vcpu", 0, 32, 32,  0x0, { 0 },_sym270, "^ *\\[(a0|a1)\\](\\+|\\-)(m0|m1)$", 0, 6, 6, 0, 0, _sym266_operands,_sym269,1,0, 0,&_sym267,0,{}, 0,0,0,0,0,0, },
  // ld_mask_aX_Is9_minus_vcpu    (1)
  { "ld_mask_aX_Is9_minus_vcpu", 0, 32, 32,  0x0, { 0 },_sym247, "^ *\\[(a0|a1)\\]\\-([^},[[ ]+)$", 0, 5, 5, 0, 0, _sym242_operands,_sym246,1,0, 0,&_sym243,0,{}, 0,0,0,0,0,1, },
// ld_mask_aX_Is9_plus_vcpu    (2)
{ "ld_mask_aX_Is9_plus_vcpu", 0, 32, 32,  0x0, { 0 },_sym257, "^ *\\[(a0|a1)\\]\\+([^},[[ ]+)$", 0, 5, 5, 0, 0, _sym253_operands,_sym256,1,0, 0,&_sym254,0,{}, 0,0,0,0,0,2, },
};

// Instructions named 'ld_ax_is5'.
static struct adl_opcode _sym408[] = {
  // ld_aX_Is5    (0)
  { "ld_aX_Is5", 4, 32, 32,  0x0, { 0xc0000000,},_sym149, "^ *([^} ,\t,]+),([^} ,\t,]+),([^} ,\t,]+),([^} ,\t,]+),([^} ,\t,]+),([^} ,\t,]+),([^} ,\t,]+)$", 0, 10, 17, 0, 0, _sym147_operands,0,0,0, 0,&_sym148,0,{}, 0,0,0,0,0,0, },
};

// Instructions named 'ld_ax_is8'.
static struct adl_opcode _sym409[] = {
  // ld_aX_Is8    (0)
  { "ld_aX_Is8", 4, 32, 32,  0x0, { 0xe0000000,},_sym163, "^ *([^} ,\t,]+),([^} ,\t,]+),([^} ,\t,]+),([^} ,\t,]+),([^} ,\t,]+),([^} ,\t,]+)$", 0, 9, 15, 0, 0, _sym161_operands,0,0,0, 0,&_sym162,0,{}, 0,0,0,0,0,0, },
};

// Instructions named 'ld_ax_iy_is4'.
static struct adl_opcode _sym410[] = {
  // ld_aX_iY_Is4    (0)
  { "ld_aX_iY_Is4", 4, 32, 32,  0x0, { 0xd8000000,},_sym177, "^ *([^} ,\t,]+),([^} ,\t,]+),([^} ,\t,]+),([^} ,\t,]+),([^} ,\t,]+),([^} ,\t,]+),([^} ,\t,]+)$", 0, 10, 17, 0, 0, _sym175_operands,0,0,0, 0,&_sym176,0,{}, 0,0,0,0,0,0, },
};

// Instructions named 'ld_index_ax_is9'.
static struct adl_opcode _sym411[] = {
  // ld_index_aX_Is9    (0)
  { "ld_index_aX_Is9", 4, 32, 32,  0x0, { 0x7c000000,},_sym197, "^ *([^} ,\t,]+),([^} ,\t,]+),([^} ,\t,]+)$", 0, 6, 9, 0, 0, _sym195_operands,0,0,0, 0,&_sym196,0,{}, 0,0,0,0,0,0, },
};

// Instructions named 'ld_index_ax_mx'.
static struct adl_opcode _sym412[] = {
  // ld_index_aX_mX    (0)
  { "ld_index_aX_mX", 4, 32, 32,  0x0, { 0x7e000000,},_sym222, "^ *([^} ,\t,]+),([^} ,\t,]+),([^} ,\t,]+),([^} ,\t,]+)$", 0, 7, 11, 0, 0, _sym220_operands,0,0,0, 0,&_sym221,0,{}, 0,0,0,0,0,0, },
};

// Instructions named 'ld_mask_ax_is9'.
static struct adl_opcode _sym413[] = {
  // ld_mask_aX_Is9    (0)
  { "ld_mask_aX_Is9", 4, 32, 32,  0x0, { 0x78000000,},_sym235, "^ *([^} ,\t,]+),([^} ,\t,]+),([^} ,\t,]+)$", 0, 6, 9, 0, 0, _sym233_operands,0,0,0, 0,&_sym234,0,{}, 0,0,0,0,0,0, },
};

// Instructions named 'ld_mask_ax_mx'.
static struct adl_opcode _sym414[] = {
  // ld_mask_aX_mX    (0)
  { "ld_mask_aX_mX", 4, 32, 32,  0x0, { 0x7a000000,},_sym260, "^ *([^} ,\t,]+),([^} ,\t,]+),([^} ,\t,]+),([^} ,\t,]+)$", 0, 7, 11, 0, 0, _sym258_operands,0,0,0, 0,&_sym259,0,{}, 0,0,0,0,0,0, },
};

// Instructions named 'loop_begin'.
static struct adl_opcode _sym415[] = {
  // loop_begin_0    (0)
  { "loop_begin_0", 0, 3, 32,  0x0, { 0x40000000,},_sym380, "^ *0$", 0, 0, 0, 0, 0, _sym378_operands,0,0,0, 0,&_sym379,0,{}, 0,0,0,0,0,-1, },
  // loop_begin_1    (1)
  { "loop_begin_1", 0, 3, 32,  0x0, { 0xc0000000,},_sym383, "^ *1$", 0, 0, 0, 0, 0, _sym381_operands,0,0,0, 0,&_sym382,0,{}, 0,0,0,0,0,-1, },
};

// Instructions named 'loop_end'.
static struct adl_opcode _sym416[] = {
  // loop_end_0    (0)
  { "loop_end_0", 0, 3, 32,  0x0, { 0x20000000,},_sym386, "^ *0$", 0, 0, 0, 0, 0, _sym384_operands,0,0,0, 0,&_sym385,0,{}, 0,0,0,0,0,-1, },
  // loop_end_1    (1)
  { "loop_end_1", 0, 3, 32,  0x0, { 0xa0000000,},_sym389, "^ *1$", 0, 0, 0, 0, 0, _sym387_operands,0,0,0, 0,&_sym388,0,{}, 0,0,0,0,0,-1, },
};

// Instructions named 'mv'.
static struct adl_opcode _sym417[] = {
  // mv_ippu_reg    (0)
  { "mv_ippu_reg", 4, 32, 32,  0x0, { 0x54000000,},_sym273, "^ *(a0|a1|m0|m1|as0|as1|as2|as3|vindx_ptr|di_d|di_offset_unit|r_rd_ptr|r_wr_ptr|elem_mask_ptr|mem_elem_rd_ptr|mem_elem_wr_ptr),(a0|a1|m0|m1|as0|as1|as2|as3|vindx_ptr|di_d|di_offset_unit|r_rd_ptr|r_wr_ptr|elem_mask_ptr|mem_elem_rd_ptr|mem_elem_wr_ptr)$", 0, 5, 5, 0, 0, _sym271_operands,0,0,0, 0,&_sym272,0,{}, 0,0,0,0,0,0, },
  // mv_ippu_reg_I19_mX    (1)
  { "mv_ippu_reg_I19_mX", 4, 32, 32,  0x0, { 0x60800000,},_sym276, "^ *(m0|m1),([^},[, ]+)$", 0, 5, 5, 0, 0, _sym274_operands,0,0,0, 0,&_sym275,0,{}, 0,0,0,0,0,1, },
// mv_ippu_reg_I19_non_mX    (2)
{ "mv_ippu_reg_I19_non_mX", 4, 32, 32,  0x0, { 0x60000000,},_sym279, "^ *(a0|a1|as0|as1|as2|as3|vindx_ptr|di_d|di_offset_unit|r_rd_ptr|r_wr_ptr|elem_mask_ptr|mem_elem_rd_ptr|mem_elem_wr_ptr),([^},[, ]+)$", 0, 5, 5, 0, 0, _sym277_operands,0,0,0, 0,&_sym278,0,{}, 0,0,0,0,0,2, },
};

// Instructions named 'nop'.
static struct adl_opcode _sym418[] = {
  // nop    (0)
  { "nop", 4, 32, 32,  0x0, { },_sym282, "$", 0, 3, 3, 0, 0, _sym280_operands,0,0,0, 0,&_sym281,0,{}, 0,0,0,0,0,-1, },
};

// Instructions named 'rts'.
static struct adl_opcode _sym419[] = {
  // rts    (0)
  { "rts", 0, 32, 32,  0x0, { 0 },_sym287, "$", 0, 3, 3, 0, 0, _sym283_operands,_sym286,1,0, 0,&_sym284,0,{}, 0,0,0,0,0,-1, },
};

// Instructions named 'rts.nz'.
static struct adl_opcode _sym420[] = {
  // rts_nz    (0)
  { "rts_nz", 0, 32, 32,  0x0, { 0 },_sym292, "$", 0, 3, 3, 0, 0, _sym288_operands,_sym291,1,0, 0,&_sym289,0,{}, 0,0,0,0,0,-1, },
};

// Instructions named 'rts.z'.
static struct adl_opcode _sym421[] = {
  // rts_z    (0)
  { "rts_z", 0, 32, 32,  0x0, { 0 },_sym297, "$", 0, 3, 3, 0, 0, _sym293_operands,_sym296,1,0, 0,&_sym294,0,{}, 0,0,0,0,0,-1, },
};

// Instructions named 'set.br'.
static struct adl_opcode _sym422[] = {
  // set_br_aX_mode    (0)
  { "set_br_aX_mode", 4, 32, 32,  0x0, { 0x5c000000,},_sym300, "^ *(a0|a1),(fft32|fft64|fft128|fft256|fft512|fft1024|fft2048|fft4096|fft8192|fft16384)$", 0, 5, 5, 0, 0, _sym298_operands,0,0,0, 0,&_sym299,0,{}, 0,0,0,0,0,0, },
};

// Instructions named 'set.dr.config'.
static struct adl_opcode _sym423[] = {
  // set_dr_config    (0)
  { "set_dr_config", 4, 32, 32,  0x0, { 0x58000000,},_sym303, "^ *(1|2|3|4|5|6|7|8|9|10),([^},[,, ]+),([^},[,, ]+)$", 0, 6, 6, 0, 0, _sym301_operands,0,0,0, 0,&_sym302,0,{}, 0,0,0,0,0,0, },
};

// Instructions named 'set.dr.radix'.
static struct adl_opcode _sym424[] = {
  // set_dr_radix    (0)
  { "set_dr_radix", 4, 32, 32,  0x0, { 0x5a000000,},_sym306, "^ *(1|2|3|4|5|6|7|8|9|10),([^},[,, ]+),([^},[,, ]+)$", 0, 6, 6, 0, 0, _sym304_operands,0,0,0, 0,&_sym305,0,{}, 0,0,0,0,0,0, },
};

// Instructions named 'set.loop'.
static struct adl_opcode _sym425[] = {
  // set_loop_Iu1_asX    (0)
  { "set_loop_Iu1_asX", 0, 32, 32,  0x0, { 0 },_sym320, "^ *([^},[, ]+),(as0|as1|as2|as3)$", 0, 5, 5, 0, 0, _sym316_operands,_sym319,1,0, 0,&_sym317,0,{}, 0,0,0,0,0,0, },
// set_loop_Iu1_Iu8    (1)
{ "set_loop_Iu1_Iu8", 0, 32, 32,  0x0, { 0 },_sym315, "^ *([^},[, ]+),([^},[, ]+)$", 0, 5, 5, 0, 0, _sym310_operands,_sym314,1,0, 0,&_sym311,0,{}, 0,0,0,0,0,1, },
};

// Instructions named 'set.mask'.
static struct adl_opcode _sym426[] = {
  // set_mask_bit    (0)
  { "set_mask_bit", 4, 32, 32,  0x0, { 0x42000000,},_sym326, "^ *([^},[ ]+)$", 0, 4, 4, 0, 0, _sym324_operands,0,0,0, 0,&_sym325,0,{}, 0,0,0,0,0,0, },
};

// Instructions named 'set.mask.all'.
static struct adl_opcode _sym427[] = {
  // set_mask_all    (0)
  { "set_mask_all", 4, 32, 32,  0x0, { 0x45000000,},_sym323, "$", 0, 3, 3, 0, 0, _sym321_operands,0,0,0, 0,&_sym322,0,{}, 0,0,0,0,0,-1, },
};

// Instructions named 'set.range'.
static struct adl_opcode _sym428[] = {
  // set_range_aY_asA_asB    (0)
  { "set_range_aY_asA_asB", 4, 32, 32,  0x0, { 0x6c000000,},_sym332, "^ *(a0|a1),(as0|as1|as2|as3),(as0|as1|as2|as3)$", 0, 6, 6, 0, 0, _sym330_operands,0,0,0, 0,&_sym331,0,{}, 0,0,0,0,0,-1, },
  // set_range_aY_asA_Iu19    (1)
  { "set_range_aY_asA_Iu19", 4, 32, 32,  0x0, { 0x68000000,},_sym329, "^ *(a0|a1),(as0|as1|as2|as3),([^},[,, ]+)$", 0, 6, 6, 0, 0, _sym327_operands,0,0,0, 0,&_sym328,0,{}, 0,0,0,0,0,1, },
};

// Instructions named 'set_loop'.
static struct adl_opcode _sym429[] = {
  // set_loop    (0)
  { "set_loop", 4, 32, 32,  0x0, { 0x18000000,},_sym309, "^ *([^} ,\t,]+),([^} ,\t,]+),([^} ,\t,]+),([^} ,\t,]+)$", 0, 7, 11, 0, 0, _sym307_operands,0,0,0, 0,&_sym308,0,{}, 0,0,0,0,0,0, },
};

// Instructions named 'st'.
static struct adl_opcode _sym430[] = {
  // st_aX_mX    (0)
  { "st_aX_mX", 4, 32, 32,  0x0, { 0x80000040,},_sym377, "^ *(\\.ippu|\\.vcpu) \\[(a0|a1)\\](\\+|\\-)(m0|m1),([^},[[ ,,,, ]+),(normal|br|dr|br_dr|indirect),([^},[[ ,,,, ]+),(normal|e32|e16|e8|e4)$", 0, 11, 11, 0, 1, _sym375_operands,0,0,1, 0,&_sym376,0,{}, 0,0,0,0,0,0, },
// st_aX_Is5_minus    (1)
{ "st_aX_Is5_minus", 0, 32, 32,  0x0, { 0 },_sym341, "^ *(\\.ippu|\\.vcpu) \\[(a0|a1)\\]\\-([^},[[ ,,,, ]+),([^},[[ ,,,, ]+),(normal|br|dr|br_dr|indirect),([^},[[ ,,,, ]+),(normal|e32|e16|e8|e4)$", 0, 10, 10, 0, 1, _sym336_operands,_sym340,1,1, 0,&_sym337,0,{}, 0,0,0,0,0,1, },
// st_aX_Is5_plus    (2)
{ "st_aX_Is5_plus", 0, 32, 32,  0x0, { 0 },_sym346, "^ *(\\.ippu|\\.vcpu) \\[(a0|a1)\\]\\+([^},[[ ,,,, ]+),([^},[[ ,,,, ]+),(normal|br|dr|br_dr|indirect),([^},[[ ,,,, ]+),(normal|e32|e16|e8|e4)$", 0, 10, 10, 0, 1, _sym342_operands,_sym345,1,1, 0,&_sym343,0,{}, 0,0,0,0,0,2, },
// st_aX_iY_Is4_minus    (3)
{ "st_aX_iY_Is4_minus", 0, 32, 32,  0x0, { 0 },_sym369, "^ *(\\.ippu|\\.vcpu) \\[(a0|a1)\\+(i0|i1)\\]\\-([^},[[ ,,, ]+),([^},[[ ,,, ]+),([^},[[ ,,, ]+),(normal|e32|e16|e8|e4)$", 0, 10, 10, 0, 1, _sym364_operands,_sym368,1,1, 0,&_sym365,0,{}, 0,0,0,0,0,3, },
// st_aX_iY_Is4_plus    (4)
{ "st_aX_iY_Is4_plus", 0, 32, 32,  0x0, { 0 },_sym374, "^ *(\\.ippu|\\.vcpu) \\[(a0|a1)\\+(i0|i1)\\]\\+([^},[[ ,,, ]+),([^},[[ ,,, ]+),([^},[[ ,,, ]+),(normal|e32|e16|e8|e4)$", 0, 10, 10, 0, 1, _sym370_operands,_sym373,1,1, 0,&_sym371,0,{}, 0,0,0,0,0,4, },
// st_aX_Is8_minus    (5)
{ "st_aX_Is8_minus", 0, 32, 32,  0x0, { 0 },_sym355, "^ *(\\.ippu|\\.vcpu) \\[(a0|a1)\\]\\-([^},[[ ,,, ]+),([^},[[ ,,, ]+),([^},[[ ,,, ]+),(normal|e32|e16|e8|e4)$", 0, 9, 9, 0, 1, _sym350_operands,_sym354,1,1, 0,&_sym351,0,{}, 0,0,0,0,0,5, },
// st_aX_Is8_plus    (6)
{ "st_aX_Is8_plus", 0, 32, 32,  0x0, { 0 },_sym360, "^ *(\\.ippu|\\.vcpu) \\[(a0|a1)\\]\\+([^},[[ ,,, ]+),([^},[[ ,,, ]+),([^},[[ ,,, ]+),(normal|e32|e16|e8|e4)$", 0, 9, 9, 0, 1, _sym356_operands,_sym359,1,1, 0,&_sym357,0,{}, 0,0,0,0,0,6, },
};

// Instructions named 'st_ax_is5'.
static struct adl_opcode _sym431[] = {
  // st_aX_Is5    (0)
  { "st_aX_Is5", 4, 32, 32,  0x0, { 0xa0000040,},_sym335, "^ *([^} ,\t,]+),([^} ,\t,]+),([^} ,\t,]+),([^} ,\t,]+),([^} ,\t,]+),([^} ,\t,]+),([^} ,\t,]+)$", 0, 10, 17, 0, 0, _sym333_operands,0,0,0, 0,&_sym334,0,{}, 0,0,0,0,0,0, },
};

// Instructions named 'st_ax_is8'.
static struct adl_opcode _sym432[] = {
  // st_aX_Is8    (0)
  { "st_aX_Is8", 4, 32, 32,  0x0, { 0xa0000000,},_sym349, "^ *([^} ,\t,]+),([^} ,\t,]+),([^} ,\t,]+),([^} ,\t,]+),([^} ,\t,]+),([^} ,\t,]+)$", 0, 9, 15, 0, 0, _sym347_operands,0,0,0, 0,&_sym348,0,{}, 0,0,0,0,0,0, },
};

// Instructions named 'st_ax_iy_is4'.
static struct adl_opcode _sym433[] = {
  // st_aX_iY_Is4    (0)
  { "st_aX_iY_Is4", 4, 32, 32,  0x0, { 0xb8000040,},_sym363, "^ *([^} ,\t,]+),([^} ,\t,]+),([^} ,\t,]+),([^} ,\t,]+),([^} ,\t,]+),([^} ,\t,]+),([^} ,\t,]+)$", 0, 10, 17, 0, 0, _sym361_operands,0,0,0, 0,&_sym362,0,{}, 0,0,0,0,0,0, },
};

// Instruction table.
static struct adl_instr other_instructions [] = {
  { "add", 2, _sym390 },
  { "add.cb", 2, _sym391 },
  { "clr", 1, _sym392 },
  { "clr.mask", 1, _sym393 },
  { "clr.mask.all", 1, _sym394 },
  { "cmp.bit", 1, _sym395 },
  { "done", 1, _sym396 },
  { "jmp", 2, _sym397 },
  { "jmp.nz", 1, _sym398 },
  { "jmp.z", 1, _sym399 },
  { "jsr", 1, _sym400 },
  { "jsr.nz", 1, _sym401 },
  { "jsr.z", 1, _sym402 },
  { "ld", 8, _sym403 },
  { "ld.index.ippu", 3, _sym404 },
  { "ld.index.vcpu", 3, _sym405 },
  { "ld.mask.ippu", 3, _sym406 },
  { "ld.mask.vcpu", 3, _sym407 },
  { "ld_ax_is5", 1, _sym408 },
  { "ld_ax_is8", 1, _sym409 },
  { "ld_ax_iy_is4", 1, _sym410 },
  { "ld_index_ax_is9", 1, _sym411 },
  { "ld_index_ax_mx", 1, _sym412 },
  { "ld_mask_ax_is9", 1, _sym413 },
  { "ld_mask_ax_mx", 1, _sym414 },
  { "loop_begin", 2, _sym415 },
  { "loop_end", 2, _sym416 },
  { "mv", 3, _sym417 },
  { "nop", 1, _sym418 },
  { "rts", 1, _sym419 },
  { "rts.nz", 1, _sym420 },
  { "rts.z", 1, _sym421 },
  { "set.br", 1, _sym422 },
  { "set.dr.config", 1, _sym423 },
  { "set.dr.radix", 1, _sym424 },
  { "set.loop", 2, _sym425 },
  { "set.mask", 1, _sym426 },
  { "set.mask.all", 1, _sym427 },
  { "set.range", 2, _sym428 },
  { "set_loop", 1, _sym429 },
  { "st", 7, _sym430 },
  { "st_ax_is5", 1, _sym431 },
  { "st_ax_is8", 1, _sym432 },
  { "st_ax_iy_is4", 1, _sym433 },
};

static const int num_other_instructions = 44;

static const struct adl_name_pair ppc_regnames[] = {
  {"a0",0},
  {"a1",1},
  {"as0",0},
  {"as1",1},
  {"as2",2},
  {"as3",3},
  {"m0",0},
  {"m1",1},
  {"r0",0},
  {"r1",1},
  {"normal",0},
  {"br",1},
  {"dr",2},
  {"br_dr",3},
  {"vindirect",4},
  {"indirect",5},
  {"l2h",6},
  {"h2l",7},
  {"l2l",8},
  {"h2h",9},
  {"e256",10},
  {"e128",11},
  {"e64",12},
  {"e32",13},
  {"e16",14},
  {"e8",15},
  {"e4",16},
  {"fft32",17},
  {"fft64",18},
  {"fft128",19},
  {"fft256",20},
  {"fft512",21},
  {"fft1024",22},
  {"fft2048",23},
  {"fft4096",24},
  {"fft8192",25},
  {"fft16384",26},
  {"imm",27},
  {"indx",0},
  {"di_d",1},
  {"di_offset_unit",2},
  {"r_rd_ptr",3},
  {"r_wr_ptr",4},
  {"elem_mask_ptr",5},
  {"mem_elem_rd_ptr",6},
  {"mem_elem_wr_ptr",7},
  {"di_r",8},
};

static const int num_ppc_regnames = 47;

static const char *ppc_itnames[] = {
  "default",
};


static reloc_howto_type ppc_elf_howto_table[] = {
  HOWTO(17,1,3,19,0,0,complain_overflow_dont,bfd_elf_generic_reloc,"R_IPPU_DMEM_19",0,0,0,0), // relocation R_IPPU_DMEM_19 (R_IPPU_DMEM_19)
  HOWTO(16,1,1,16,0,0,complain_overflow_dont,bfd_elf_generic_reloc,"R_IPPU_PRAM_16",0,0,0,0), // relocation R_IPPU_PRAM_16 (R_IPPU_PRAM_16)
  HOWTO(18,0,2,32,0,0,complain_overflow_dont,bfd_elf_generic_reloc,"R_OCRAM_LAB_32",0,0,0,0), // relocation R_OCRAM_LAB_32 (R_OCRAM_LAB_32)
  HOWTO(9,1,3,17,0,0,complain_overflow_dont,bfd_elf_generic_reloc,"R_VSPA_DMEM_17",0,0,0,0), // relocation R_VSPA_DMEM_17 (R_VSPA_DMEM_17)
  HOWTO(5,1,3,17,0,0,complain_overflow_dont,bfd_elf_generic_reloc,"R_VSPA_HW_HI_17",0,0,0,0), // relocation R_VSPA_HW_HI_17 (R_VSPA_HW_HI_17)
  HOWTO(4,1,3,17,0,0,complain_overflow_dont,bfd_elf_generic_reloc,"R_VSPA_HW_LO_17",0,0,0,0), // relocation R_VSPA_HW_LO_17 (R_VSPA_HW_LO_17)
  HOWTO(13,1,3,17,0,0,complain_overflow_dont,bfd_elf_generic_reloc,"R_VSPA_LAB_17",0,0,0,0), // relocation R_VSPA_LAB_17 (R_VSPA_LAB_17)
  HOWTO(11,1,2,32,0,0,complain_overflow_dont,bfd_elf_generic_reloc,"R_VSPA_LAB_32",0,0,0,0), // relocation R_VSPA_LAB_32 (R_VSPA_LAB_32)
  HOWTO(10,1,1,10,0,0,complain_overflow_dont,bfd_elf_generic_reloc,"R_VSPA_PMEM_10",0,0,0,0), // relocation R_VSPA_PMEM_10 (R_VSPA_PMEM_10)
  HOWTO(8,1,3,17,0,0,complain_overflow_dont,bfd_elf_generic_reloc,"R_VSPA_PMEM_17",0,0,0,0), // relocation R_VSPA_PMEM_17 (R_VSPA_PMEM_17)
  HOWTO(15,1,3,17,0,0,complain_overflow_dont,bfd_elf_generic_reloc,"R_VSPA_SP_HI_17",0,0,0,0), // relocation R_VSPA_SP_HI_17 (R_VSPA_SP_HI_17)
  HOWTO(14,1,3,17,0,0,complain_overflow_dont,bfd_elf_generic_reloc,"R_VSPA_SP_LO_17",0,0,0,0), // relocation R_VSPA_SP_LO_17 (R_VSPA_SP_LO_17)
  HOWTO(1,0,0,8,0,0,complain_overflow_dont,bfd_elf_generic_reloc,"R_VSPA_8",0,0,0,0), // relocation R_VSPA_8 (_1byte)
  HOWTO(2,0,1,16,0,0,complain_overflow_dont,bfd_elf_generic_reloc,"R_VSPA_16",0,0,0,0), // relocation R_VSPA_16 (_2byte)
  HOWTO(3,0,2,32,0,0,complain_overflow_dont,bfd_elf_generic_reloc,"R_VSPA_32",0,0,0,0), // relocation R_VSPA_32 (_4byte)
  HOWTO(12,1,2,32,0,0,complain_overflow_dont,bfd_elf_generic_reloc,"R_VSPA_LAB_IND_32",0,0,0,0), // relocation R_VSPA_LAB_IND_32 (_word)
  HOWTO(19,0,2,32,0,0,complain_overflow_dont,bfd_elf_generic_reloc,"R_OCRAM_LAB_IND_32",0,0,0,0), // relocation R_OCRAM_LAB_IND_32 (_word_ocram_sym_)
  EMPTY_HOWTO(-1)
};

static unsigned num_ppc_elf_howtos = 18;

// Relocations ordered by name, for fast name -> type searches.
static struct adl_name_pair ppc_relocs_by_index [] = {
   { "R_IPPU_DMEM_19", 0 }, // R_IPPU_DMEM_19
   { "R_IPPU_PRAM_16", 1 }, // R_IPPU_PRAM_16
   { "R_OCRAM_LAB_32", 2 }, // R_OCRAM_LAB_32
   { "R_VSPA_DMEM_17", 3 }, // R_VSPA_DMEM_17
   { "R_VSPA_HW_HI_17", 4 }, // R_VSPA_HW_HI_17
   { "R_VSPA_HW_LO_17", 5 }, // R_VSPA_HW_LO_17
   { "R_VSPA_LAB_17", 6 }, // R_VSPA_LAB_17
   { "R_VSPA_LAB_32", 7 }, // R_VSPA_LAB_32
   { "R_VSPA_PMEM_10", 8 }, // R_VSPA_PMEM_10
   { "R_VSPA_PMEM_17", 9 }, // R_VSPA_PMEM_17
   { "R_VSPA_SP_HI_17", 10 }, // R_VSPA_SP_HI_17
   { "R_VSPA_SP_LO_17", 11 }, // R_VSPA_SP_LO_17
   { "_1byte", 12 }, // R_VSPA_8
   { "_2byte", 13 }, // R_VSPA_16
   { "_4byte", 14 }, // R_VSPA_32
   { "_word", 15 }, // R_VSPA_LAB_IND_32
   { "_word_ocram_sym_", 16 }, // R_OCRAM_LAB_IND_32
};

static const int num_ppc_relocs_by_index = 17;


// Relocation offsets.
static struct adl_int_pair ppc_reloc_offsets [] = {
   { 17,-1 }, // R_IPPU_DMEM_19
   { 16,4 }, // R_IPPU_PRAM_16
   { 18,2 }, // R_OCRAM_LAB_32
   { 9,19 }, // R_VSPA_DMEM_17
   { 5,31 }, // R_VSPA_HW_HI_17
   { 4,6 }, // R_VSPA_HW_LO_17
   { 13,20 }, // R_VSPA_LAB_17
   { 11,2 }, // R_VSPA_LAB_32
   { 10,30 }, // R_VSPA_PMEM_10
   { 8,20 }, // R_VSPA_PMEM_17
   { 15,27 }, // R_VSPA_SP_HI_17
   { 14,2 }, // R_VSPA_SP_LO_17
   { 1,0 }, // R_VSPA_8
   { 2,0 }, // R_VSPA_16
   { 3,0 }, // R_VSPA_32
   { 12,0 }, // R_VSPA_LAB_IND_32
   { 19,0 }, // R_OCRAM_LAB_IND_32
};

static const int num_ppc_reloc_offsets = 17;

static const char *instr_names[] = {
  "add",
  "add.cb",
  "clr",
  "clr.mask",
  "clr.mask.all",
  "cmp.bit",
  "done",
  "jmp",
  "jmp.nz",
  "jmp.z",
  "jsr",
  "jsr.nz",
  "jsr.z",
  "ld",
  "ld.index.ippu",
  "ld.index.vcpu",
  "ld.mask.ippu",
  "ld.mask.vcpu",
  "ld_ax_is5",
  "ld_ax_is8",
  "ld_ax_iy_is4",
  "ld_index_ax_is9",
  "ld_index_ax_mx",
  "ld_mask_ax_is9",
  "ld_mask_ax_mx",
  "loop_begin",
  "loop_end",
  "mv",
  "nop",
  "rts",
  "rts.nz",
  "rts.z",
  "set.br",
  "set.dr.config",
  "set.dr.radix",
  "set.loop",
  "set.mask",
  "set.mask.all",
  "set.range",
  "set_loop",
  "st",
  "st_ax_is5",
  "st_ax_is8",
  "st_ax_iy_is4",
};

static int num_instr_names = 44;

static const char *instr_pfx_fields[] = {
   0 };

static int num_instr_pfx_fields = 0;

//
// Helper code.
//


static void post_packet_asm(adl::InstrBundle & b,int current_position ATTRIBUTE_UNUSED)
{
       adl::InstrBundle bb ;
       adl::InstrInfo ii ;
       bool extIPPU = false , extLoopBegin = false , extLoopEnd = false ;
       bool extLoopBegin1 = false , extLoopEnd1 = false ;
       int posIPPU = - 1 ;
       int Size = b . size (  ) ;
       bool extFlag ;
      if ( ( Size < 1 ) || ( Size > 3 ) ) {
            { std::ostringstream ss; ss    <<  "Invalid instruction formation size: "  <<  Size ; error(ss.str().c_str(),adl_group_size(current_position) - 1,current_position); } ;
        } else {
            for (  int i = 0 ; i < Size ; ++ i ) {
                  extFlag = false ;
                  if ( b [ i ] . instrHasAttr ( instr_ippu ) ) {
                        if ( extIPPU ) {
                              { std::ostringstream ss; ss    <<  "Invalid IPPU instruction at the position of "  <<  i + 1 ; error(ss.str().c_str(),adl_group_size(current_position) - 1,current_position); } ;
                          } else {
                              extIPPU = true ;
                              posIPPU = i ;
                          }
                        extFlag = true ;
                    }
                  if ( b [ i ] . instrHasAttr ( instr_loop_begin ) ) {
                        if ( extLoopBegin ) {
                              { std::ostringstream ss; ss    <<  "Invalid loop_begin at the position of "  <<  i + 1 ; error(ss.str().c_str(),adl_group_size(current_position) - 1,current_position); } ;
                          } else {
                              extLoopBegin = true ;
                              if ( b [ i ] . instrHasAttr ( instr_loop_1 ) ) {
                                    extLoopBegin1 = true ;
                                }
                          }
                        extFlag = true ;
                    }
                  if ( b [ i ] . instrHasAttr ( instr_loop_end ) ) {
                        if ( extLoopEnd ) {
                              { std::ostringstream ss; ss    <<  "Invalid loop_end at the position of "  <<  i + 1 ; error(ss.str().c_str(),adl_group_size(current_position) - 1,current_position); } ;
                          } else {
                              extLoopEnd = true ;
                              if ( b [ i ] . instrHasAttr ( instr_loop_1 ) ) {
                                    extLoopEnd1 = true ;
                                }
                          }
                        extFlag = true ;
                    }
                  if ( ! extFlag ) {
                        { std::ostringstream ss; ss    <<  "Invalid instruction at the position of "  <<  i + 1 ; error(ss.str().c_str(),adl_group_size(current_position) - 1,current_position); } ;
                    }
              }
            if ( ! extIPPU && ( extLoopBegin || extLoopEnd ) ) {
                  ii = createInstr ( 3 , "nop" , 0 , 0 , 0 ) ;
              } else if ( extIPPU ) {
                  ii = b [ posIPPU ] ;
              }
            if ( extLoopBegin ) {
                  adl_set_field(89,89,1,ii) ;
                  if ( extLoopBegin1 ) {
                        adl_set_field(88,88,1,ii) ;
                    }
              }
            if ( extLoopEnd ) {
                  adl_set_field(87,87,1,ii) ;
                  if ( extLoopEnd1 ) {
                        adl_set_field(88,88,1,ii) ;
                    }
              }
        }
      bb . push_back ( ii ) ;
      b = bb ;
}
static struct adl_asm_instr asm_instrs[] = {
   {"",0 } 
};
static int num_asm_instrs = 0;
static int internal_current_table = 0;
static bool show_warnings = false;
static struct hash_control *instr_hash[1];

static struct hash_control *reg_hash;

static struct hash_control *asm_instr_hash;

static struct hash_control *instr_pfx_fields_hash;

static const char *terminating_chars     = "\t .{}\n";

static const char *min_terminating_chars = "\t {}\n";

static bool setup_endianness()
{
  adl_setup_endianness(false); return true;
}

static bool setup_endianness_var = setup_endianness();

void ippu_md_begin()
{
  adl_setup_general(min_terminating_chars,terminating_chars,1,0,0,post_packet_asm,0,init_queue_size, show_warnings, true);
  adl_setup_comments(init_comment_strs, init_num_comment_strs, init_line_comment_strs, init_num_line_comment_strs);
  adl_setup_instrfields(ppc_operands, num_ppc_operands,ppc_operands_by_index, num_ppc_operands_by_index);
  adl_setup_grouping(packet_begin_chars, packet_end_chars);
  adl_setup_prefix(pfx_queue, 0,0,0,reset_prefix_counters);
  adl_setup_instr_separators(instr_separator_chars);
  adl_setup_relocations(ppc_elf_howto_table,num_ppc_elf_howtos,ppc_relocs_by_index,num_ppc_relocs_by_index,ppc_reloc_offsets,num_ppc_reloc_offsets);
  instr_hash[0] = adl_setup_instructions(other_instructions,num_other_instructions,ppc_operands);
  reg_hash = adl_setup_name_hash(ppc_regnames,num_ppc_regnames,"register");
  asm_instr_hash = 0;
  instr_pfx_fields_hash = 0;
}


extern "C" void ippu_md_assemble(char *str, unsigned line_number)
{
  adl_assemble(str,instr_hash[internal_current_table],asm_instr_hash,reg_hash,instr_pfx_fields_hash,11,internal_current_table,ppc_itnames[internal_current_table], line_number);
}

extern "C" void ippu_md_apply_fix (fixS *fixP ,valueT *valP ,segT seg)
{
  adl_apply_fix(fixP,valP,seg);
}

int ppc_parse_option(int,char*);

extern "C" int ippu_md_parse_option (int c,char *arg)
{
  if (c == 'd') {
    show_warnings = TRUE;
    return 1;
  } else if (c == 'm') {
    if (!strcmp(arg,"default")) {
      internal_current_table = 0;
      return 1;
    }
     else if (!strcmp(arg,"instr_loop")) {
      internal_current_table = 1;
      return 1;
    }
  }
  return ppc_parse_option(c,arg);
}

void ppc_show_usage(FILE*);

extern "C" void ippu_md_show_usage (FILE *stream ATTRIBUTE_UNUSED)
{
  fprintf (stream,
  "\nInstruction-selection options:\n\n"
  "-mdefault		Select the default instruction table.\n"
  "-minstr_loop		Select the 'instr_loop' instruction table.\n"
  "-d			Show debugging warnings about undefined symbols.\n"
  );
  ppc_show_usage(stream);
}

extern "C" void ippu_adl_get_instr_names(const char ***names, int *num_names)
{
  *names = instr_names;
  *num_names = num_instr_names;
};

extern "C" void ippu_adl_get_instr_ops(const struct adl_name_pair **names, int* num_names)
{
  *names = ppc_regnames;
  *num_names = num_ppc_regnames;
}

extern "C" bfd_boolean  ippu_dt_debug(void);

extern "C" bfd_boolean  ippu_dt_debug(void)
{
  #ifdef _DEVTECH_DEBUG_
  return TRUE;
  #else
  return FALSE;
  #endif
}

#include "ippu-assembler.inc"

const size_t idx_list_0[] = { 1 };
const size_t idx_list_1[] = { 2 };
const size_t idx_list_2[] = { 3 };

size_t num_ippu_modifiers = 11;
struct modifier_info ippu_modifiers[] = {
	{ _sym153_modifier, 1, idx_list_1 },
	{ _sym167_modifier, 1, idx_list_1 },
	{ _sym181_modifier, 1, idx_list_2 },
	{ _sym201_modifier, 1, idx_list_0 },
	{ _sym207_modifier, 1, idx_list_0 },
	{ _sym239_modifier, 1, idx_list_0 },
	{ _sym245_modifier, 1, idx_list_0 },
	{ _sym313_modifier, 1, idx_list_0 },
	{ _sym339_modifier, 1, idx_list_1 },
	{ _sym353_modifier, 1, idx_list_1 },
	{ _sym367_modifier, 1, idx_list_2 },
	{ NULL, 0, NULL, },
};

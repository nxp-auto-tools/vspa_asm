// Pre-processed
#define _Enable_shared static _Enable_shared

/*
	
	Assembler code implementation file for ppc generated by ADL.
	
	*/

#include <stdio.h>
#include <sstream>
#include <string>
extern "C" {
  #  include "as.h"
  #  include "bfd/elf-bfd.h"
}

#define __NO_RNUMBER__

#include "adl-asm-impl.h"
#include "adl-asm-info.h"

#define bits le_intbv
#define sbits le_sintbv

#define ns_bits le_intbv
#define ns_sbits le_ sintbv

extern "C" {
  #include "tc-ppc.h"
}




/* Figure out the BFD architecture to use.  These functions 
   are called well before ippu_md_begin, when the output file is opened.  */ 

enum bfd_architecture ippu_ppc_arch () 
{
  return ADL_TARGET_ARCH;
}

const char packet_begin_chars[] = "{\n";
  const char packet_end_chars[] = "}\n";
static const char *init_comment_strs[] = {"//",};
static int init_num_comment_strs = 1;
static const char *init_line_comment_strs[] = {"//",};
static int init_num_line_comment_strs = 1;
static int init_queue_size = 2;
unsigned long ippu_ppc_mach ()
{
  return default_adl_mach();
}

extern char*
ippu_ppc_target_format ()
{
  return default_adl_target_format();
}

static const char instr_separator_chars[] = ";";


enum InstrAttrs {
  instr_ippu = 0x0,
  instr_loop_begin = 0x1,
  instr_loop_end = 0x2,
  instr_loop_1 = 0x3,
};

static void error(const char *msg,int pos ATTRIBUTE_UNUSED,int current_position ATTRIBUTE_UNUSED) ATTRIBUTE_UNUSED;
static void error(const char *msg,int pos ATTRIBUTE_UNUSED,int current_position ATTRIBUTE_UNUSED)
{
  adl_error(msg,pos,current_position);
}

static void info(const char *msg,int pos ATTRIBUTE_UNUSED,int current_position ATTRIBUTE_UNUSED) ATTRIBUTE_UNUSED;
static void info(const char *msg,int pos ATTRIBUTE_UNUSED,int current_position ATTRIBUTE_UNUSED)
{
  adl_info(msg,pos,current_position);
}

// Prefix variables.
static struct adl_prefix_field *pfx_fields0[] = { 0 };
static struct adl_prefix_field *pfx_fields1[] = { 0 };
static struct adl_prefix_fields pfx_queue[] = {{pfx_fields0},{pfx_fields1},};
// Prefix counters.

static void reset_prefix_counters()
{
}

//
// Instruction field inserter functions.
//

static  void set_AA_imp_bits__20_20__width_32(unsigned *x, bfd_uint64_t val) {
  x[0] |= ((val&0x1) << 20);
}

static  void set_AS2_imp_bits__23_22__width_32(unsigned *x, bfd_uint64_t val) {
  x[0] |= ((val&0x3) << 22);
}

static  void set_AS_imp_bits__25_24__width_32(unsigned *x, bfd_uint64_t val) {
  x[0] |= ((val&0x3) << 24);
}

static  void set_BR_MODE_imp_bits__7_4__width_32(unsigned *x, bfd_uint64_t val) {
  x[0] |= ((val&0xf) << 4);
}

static  void set_CLR_DST_imp_bits__21_20__width_32(unsigned *x, bfd_uint64_t val) {
  x[0] |= ((val&0x3) << 20);
}

static  void set_DIGIT_INDEX_imp_bits__23_20__width_32(unsigned *x, bfd_uint64_t val) {
  x[0] |= ((val&0xf) << 20);
}

static  void set_DST_REG_MX_imp_bits__22_22__width_32(unsigned *x, bfd_uint64_t val) {
  x[0] |= ((val&0x1) << 22);
}

static  void set_DST_REG_NON_MX_imp_bits__25_22__width_32(unsigned *x, bfd_uint64_t val) {
  x[0] |= ((val&0xf) << 22);
}

static  void set_DST_REG_imp_bits__25_22__width_32(unsigned *x, bfd_uint64_t val) {
  x[0] |= ((val&0xf) << 22);
}

static  void set_ELEM_OFFSET_imp_bits__18_16__width_32(unsigned *x, bfd_uint64_t val) {
  x[0] |= ((val&0x7) << 16);
}

static  void set_IM11_imp_bits__14_4__width_32(unsigned *x, bfd_uint64_t val) {
  x[0] |= ((val&0x7ff) << 4);
}

static  void set_IM12_imp_bits__15_4__width_32(unsigned *x, bfd_uint64_t val) {
  x[0] |= ((val&0xfff) << 4);
}

static  void set_IM12s_imp_bits__15_4__width_32(unsigned *x, bfd_uint64_t val) {
  x[0] |= ((val&0xfff) << 4);
}

static  void set_IM16R16_imp_bits__19_4__width_32(unsigned *x, bfd_uint64_t val) {
  x[0] |= ((val&0xffff) << 4);
}

static  void set_IM17R17_imp_bits__20_4__width_32(unsigned *x, bfd_uint64_t val) {
  x[0] |= ((val&0x1ffff) << 4);
}

static  void set_IM17_imp_bits__19_3__width_32(unsigned *x, bfd_uint64_t val) {
  x[0] |= ((val&0x1ffff) << 3);
}

static  void set_IM17sR17_imp_bits__20_4__width_32(unsigned *x, bfd_uint64_t val) {
  x[0] |= ((val&0x1ffff) << 4);
}

static  void set_IM3_imp_bits__18_16__width_32(unsigned *x, bfd_uint64_t val) {
  x[0] |= ((val&0x7) << 16);
}

static  void set_IM5s_imp_bits__25_21__width_32(unsigned *x, bfd_uint64_t val) {
  x[0] |= ((val&0x1f) << 21);
}

static  void set_IM6_imp_bits__9_4__width_32(unsigned *x, bfd_uint64_t val) {
  x[0] |= ((val&0x3f) << 4);
}

static  void set_IM8_imp_bits__11_4__width_32(unsigned *x, bfd_uint64_t val) {
  x[0] |= ((val&0xff) << 4);
}

static  void set_IM8s_imp_bits__28_21__width_32(unsigned *x, bfd_uint64_t val) {
  x[0] |= ((val&0xff) << 21);
}

static  void set_IM9s_imp_bits__15_7__width_32(unsigned *x, bfd_uint64_t val) {
  x[0] |= ((val&0x1ff) << 7);
}

static  void set_IPPU_VCPU_imp_bits__19_19__width_32(unsigned *x, bfd_uint64_t val) {
  x[0] |= ((val&0x1) << 19);
}

static  void set_JMP_CC_imp_bits__23_20__width_32(unsigned *x, bfd_uint64_t val) {
  x[0] |= ((val&0xf) << 20);
}

static  void set_LATCH_MODE_imp_bits__6_3__width_32(unsigned *x, bfd_uint64_t val) {
  x[0] |= ((val&0xf) << 3);
}

static  void set_LD_MODE_imp_bits__26_24__width_32(unsigned *x, bfd_uint64_t val) {
  x[0] |= ((val&0x7) << 24);
}

static  void set_LD_MODE_imp_bits__28_26__width_32(unsigned *x, bfd_uint64_t val) {
  x[0] |= ((val&0x7) << 26);
}

static  void set_LOOP_AS_IMM_imp_bits__26_26__width_32(unsigned *x, bfd_uint64_t val) {
  x[0] |= ((val&0x1) << 26);
}

static  void set_LOOP_END_imp_bits__0_0__width_32(unsigned *x, bfd_uint64_t val) {
  x[0] |= ((val&0x1));
}

static  void set_LOOP_INDEX_imp_bits__2_2__width_32(unsigned *x, bfd_uint64_t val) {
  x[0] |= ((val&0x1) << 2);
}

static  void set_LOOP_START_imp_bits__1_1__width_32(unsigned *x, bfd_uint64_t val) {
  x[0] |= ((val&0x1) << 1);
}

static  void set_MM_imp_bits__22_22__width_32(unsigned *x, bfd_uint64_t val) {
  x[0] |= ((val&0x1) << 22);
}

static  void set_PLUS_MINUS_imp_bits__23_23__width_32(unsigned *x, bfd_uint64_t val) {
  x[0] |= ((val&0x1) << 23);
}

static  void set_RADIX_imp_bits__18_16__width_32(unsigned *x, bfd_uint64_t val) {
  x[0] |= ((val&0x7) << 16);
}

static  void set_RD_OFFSET_imp_bits__15_7__width_32(unsigned *x, bfd_uint64_t val) {
  x[0] |= ((val&0x1ff) << 7);
}

static  void set_SET_LOOP_INDEX_imp_bits__23_23__width_32(unsigned *x, bfd_uint64_t val) {
  x[0] |= ((val&0x1) << 23);
}

static  void set_SRC_REG_imp_bits__21_18__width_32(unsigned *x, bfd_uint64_t val) {
  x[0] |= ((val&0xf) << 18);
}

static  void set_ST_MODE_imp_bits__28_26__width_32(unsigned *x, bfd_uint64_t val) {
  x[0] |= ((val&0x7) << 26);
}

static  void set_WRITE_MODE_imp_bits__5_3__width_32(unsigned *x, bfd_uint64_t val) {
  x[0] |= ((val&0x7) << 3);
}

static  void set_WR_OFFSET_imp_bits__15_7__width_32(unsigned *x, bfd_uint64_t val) {
  x[0] |= ((val&0x1ff) << 7);
}


//
// Instruction field clearer functions.
//

static  void clear_AA_imp_bits__20_20__width_32(unsigned *x ATTRIBUTE_UNUSED) {
    x[0] = x[0] & (~0x100000);
  
}

static  void clear_AS2_imp_bits__23_22__width_32(unsigned *x ATTRIBUTE_UNUSED) {
    x[0] = x[0] & (~0xc00000);
  
}

static  void clear_AS_imp_bits__25_24__width_32(unsigned *x ATTRIBUTE_UNUSED) {
    x[0] = x[0] & (~0x3000000);
  
}

static  void clear_BR_MODE_imp_bits__7_4__width_32(unsigned *x ATTRIBUTE_UNUSED) {
    x[0] = x[0] & (~0xf0);
  
}

static  void clear_CLR_DST_imp_bits__21_20__width_32(unsigned *x ATTRIBUTE_UNUSED) {
    x[0] = x[0] & (~0x300000);
  
}

static  void clear_DIGIT_INDEX_imp_bits__23_20__width_32(unsigned *x ATTRIBUTE_UNUSED) {
    x[0] = x[0] & (~0xf00000);
  
}

static  void clear_DST_REG_MX_imp_bits__22_22__width_32(unsigned *x ATTRIBUTE_UNUSED) {
    x[0] = x[0] & (~0x400000);
  
}

static  void clear_DST_REG_NON_MX_imp_bits__25_22__width_32(unsigned *x ATTRIBUTE_UNUSED) {
    x[0] = x[0] & (~0x3c00000);
  
}

static  void clear_DST_REG_imp_bits__25_22__width_32(unsigned *x ATTRIBUTE_UNUSED) {
    x[0] = x[0] & (~0x3c00000);
  
}

static  void clear_ELEM_OFFSET_imp_bits__18_16__width_32(unsigned *x ATTRIBUTE_UNUSED) {
    x[0] = x[0] & (~0x70000);
  
}

static  void clear_IM11_imp_bits__14_4__width_32(unsigned *x ATTRIBUTE_UNUSED) {
    x[0] = x[0] & (~0x7ff0);
  
}

static  void clear_IM12_imp_bits__15_4__width_32(unsigned *x ATTRIBUTE_UNUSED) {
    x[0] = x[0] & (~0xfff0);
  
}

static  void clear_IM12s_imp_bits__15_4__width_32(unsigned *x ATTRIBUTE_UNUSED) {
    x[0] = x[0] & (~0xfff0);
  
}

static  void clear_IM16R16_imp_bits__19_4__width_32(unsigned *x ATTRIBUTE_UNUSED) {
    x[0] = x[0] & (~0xffff0);
  
}

static  void clear_IM17R17_imp_bits__20_4__width_32(unsigned *x ATTRIBUTE_UNUSED) {
    x[0] = x[0] & (~0x1ffff0);
  
}

static  void clear_IM17_imp_bits__19_3__width_32(unsigned *x ATTRIBUTE_UNUSED) {
    x[0] = x[0] & (~0xffff8);
  
}

static  void clear_IM17sR17_imp_bits__20_4__width_32(unsigned *x ATTRIBUTE_UNUSED) {
    x[0] = x[0] & (~0x1ffff0);
  
}

static  void clear_IM3_imp_bits__18_16__width_32(unsigned *x ATTRIBUTE_UNUSED) {
    x[0] = x[0] & (~0x70000);
  
}

static  void clear_IM5s_imp_bits__25_21__width_32(unsigned *x ATTRIBUTE_UNUSED) {
    x[0] = x[0] & (~0x3e00000);
  
}

static  void clear_IM6_imp_bits__9_4__width_32(unsigned *x ATTRIBUTE_UNUSED) {
    x[0] = x[0] & (~0x3f0);
  
}

static  void clear_IM8_imp_bits__11_4__width_32(unsigned *x ATTRIBUTE_UNUSED) {
    x[0] = x[0] & (~0xff0);
  
}

static  void clear_IM8s_imp_bits__28_21__width_32(unsigned *x ATTRIBUTE_UNUSED) {
    x[0] = x[0] & (~0x1fe00000);
  
}

static  void clear_IM9s_imp_bits__15_7__width_32(unsigned *x ATTRIBUTE_UNUSED) {
    x[0] = x[0] & (~0xff80);
  
}

static  void clear_IPPU_VCPU_imp_bits__19_19__width_32(unsigned *x ATTRIBUTE_UNUSED) {
    x[0] = x[0] & (~0x80000);
  
}

static  void clear_JMP_CC_imp_bits__23_20__width_32(unsigned *x ATTRIBUTE_UNUSED) {
    x[0] = x[0] & (~0xf00000);
  
}

static  void clear_LATCH_MODE_imp_bits__6_3__width_32(unsigned *x ATTRIBUTE_UNUSED) {
    x[0] = x[0] & (~0x78);
  
}

static  void clear_LD_MODE_imp_bits__26_24__width_32(unsigned *x ATTRIBUTE_UNUSED) {
    x[0] = x[0] & (~0x7000000);
  
}

static  void clear_LD_MODE_imp_bits__28_26__width_32(unsigned *x ATTRIBUTE_UNUSED) {
    x[0] = x[0] & (~0x1c000000);
  
}

static  void clear_LOOP_AS_IMM_imp_bits__26_26__width_32(unsigned *x ATTRIBUTE_UNUSED) {
    x[0] = x[0] & (~0x4000000);
  
}

static  void clear_LOOP_END_imp_bits__0_0__width_32(unsigned *x ATTRIBUTE_UNUSED) {
    x[0] = x[0] & (~0x1);
  
}

static  void clear_LOOP_INDEX_imp_bits__2_2__width_32(unsigned *x ATTRIBUTE_UNUSED) {
    x[0] = x[0] & (~0x4);
  
}

static  void clear_LOOP_START_imp_bits__1_1__width_32(unsigned *x ATTRIBUTE_UNUSED) {
    x[0] = x[0] & (~0x2);
  
}

static  void clear_MM_imp_bits__22_22__width_32(unsigned *x ATTRIBUTE_UNUSED) {
    x[0] = x[0] & (~0x400000);
  
}

static  void clear_PLUS_MINUS_imp_bits__23_23__width_32(unsigned *x ATTRIBUTE_UNUSED) {
    x[0] = x[0] & (~0x800000);
  
}

static  void clear_RADIX_imp_bits__18_16__width_32(unsigned *x ATTRIBUTE_UNUSED) {
    x[0] = x[0] & (~0x70000);
  
}

static  void clear_RD_OFFSET_imp_bits__15_7__width_32(unsigned *x ATTRIBUTE_UNUSED) {
    x[0] = x[0] & (~0xff80);
  
}

static  void clear_SET_LOOP_INDEX_imp_bits__23_23__width_32(unsigned *x ATTRIBUTE_UNUSED) {
    x[0] = x[0] & (~0x800000);
  
}

static  void clear_SRC_REG_imp_bits__21_18__width_32(unsigned *x ATTRIBUTE_UNUSED) {
    x[0] = x[0] & (~0x3c0000);
  
}

static  void clear_ST_MODE_imp_bits__28_26__width_32(unsigned *x ATTRIBUTE_UNUSED) {
    x[0] = x[0] & (~0x1c000000);
  
}

static  void clear_WRITE_MODE_imp_bits__5_3__width_32(unsigned *x ATTRIBUTE_UNUSED) {
    x[0] = x[0] & (~0x38);
  
}

static  void clear_WR_OFFSET_imp_bits__15_7__width_32(unsigned *x ATTRIBUTE_UNUSED) {
    x[0] = x[0] & (~0xff80);
  
}


static bfd_uint64_t IM18_1_131072_checker(bfd_uint64_t n, bool check_only){
  bfd_boolean result1 = FALSE;
  bfd_boolean result2 = FALSE;
  if (1ULL <= n && n <= 131072ULL) {
      result1 = TRUE;
  } 
  result2 = TRUE;
  
  if (check_only) {
       return (result1 && result2) ? 1 : 0;}
  
  if (!(result1 && result2)) {
      as_fatal(_("Operand IM18_1_131072 is out of bounds"));
      return -1;
  }
  return n;
};
static bfd_uint64_t IM5n_checker(bfd_uint64_t n, bool check_only){
  bfd_boolean result1 = FALSE;
  bfd_boolean result2 = FALSE;
  if (n <= 16UL) {
      result1 = TRUE;
  } 
  result2 = TRUE;
  
  if (check_only) {
       return (result1 && result2) ? 1 : 0;}
  
  if (!(result1 && result2)) {
      as_fatal(_("Operand IM5n is out of bounds"));
      return -1;
  }
  return n;
};
static bfd_uint64_t IM8n_checker(bfd_uint64_t n, bool check_only){
  bfd_boolean result1 = FALSE;
  bfd_boolean result2 = FALSE;
  if (n <= 128UL) {
      result1 = TRUE;
  } 
  result2 = TRUE;
  
  if (check_only) {
       return (result1 && result2) ? 1 : 0;}
  
  if (!(result1 && result2)) {
      as_fatal(_("Operand IM8n is out of bounds"));
      return -1;
  }
  return n;
};
static bfd_uint64_t IM9_1_256_checker(bfd_uint64_t n, bool check_only){
  bfd_boolean result1 = FALSE;
  bfd_boolean result2 = FALSE;
  if (1ULL <= n && n <= 256ULL) {
      result1 = TRUE;
  } 
  result2 = TRUE;
  
  if (check_only) {
       return (result1 && result2) ? 1 : 0;}
  
  if (!(result1 && result2)) {
      as_fatal(_("Operand IM9_1_256 is out of bounds"));
      return -1;
  }
  return n;
};
static bfd_uint64_t IM9n_checker(bfd_uint64_t n, bool check_only){
  bfd_boolean result1 = FALSE;
  bfd_boolean result2 = FALSE;
  if (n <= 256UL) {
      result1 = TRUE;
  } 
  result2 = TRUE;
  
  if (check_only) {
       return (result1 && result2) ? 1 : 0;}
  
  if (!(result1 && result2)) {
      as_fatal(_("Operand IM9n is out of bounds"));
      return -1;
  }
  return n;
};
// For field AA
static enum_field _sym1[] = { { "a0", 0 }, { "a1", 1 }, };
static enum_fields _sym2 = { _sym1 , 2 };

// For field AA_imp_bits__20_20_
static enum_field _sym3[] = { { "a0", 0 }, { "a1", 1 }, };
static enum_fields _sym4 = { _sym3 , 2 };

// For field AS
static enum_field _sym5[] = { { "as0", 0 }, { "as1", 1 }, { "as2", 2 }, { "as3", 3 }, };
static enum_fields _sym6 = { _sym5 , 4 };

// For field AS2
static enum_field _sym7[] = { { "as0", 0 }, { "as1", 1 }, { "as2", 2 }, { "as3", 3 }, };
static enum_fields _sym8 = { _sym7 , 4 };

// For field AS2_imp_bits__23_22_
static enum_field _sym9[] = { { "as0", 0 }, { "as1", 1 }, { "as2", 2 }, { "as3", 3 }, };
static enum_fields _sym10 = { _sym9 , 4 };

// For field AS_imp_bits__25_24_
static enum_field _sym11[] = { { "as0", 0 }, { "as1", 1 }, { "as2", 2 }, { "as3", 3 }, };
static enum_fields _sym12 = { _sym11 , 4 };

// For field BR_MODE
static enum_field _sym13[] = { { "fft1024", 5 }, { "fft128", 2 }, { "fft16384", 9 }, { "fft2048", 6 }, { "fft256", 3 }, { "fft32", 0 }, { "fft4096", 7 }, { "fft512", 4 }, { "fft64", 1 }, { "fft8192", 8 }, };
static enum_fields _sym14 = { _sym13 , 10 };

// For field BR_MODE_imp_bits__7_4_
static enum_field _sym15[] = { { "fft1024", 5 }, { "fft128", 2 }, { "fft16384", 9 }, { "fft2048", 6 }, { "fft256", 3 }, { "fft32", 0 }, { "fft4096", 7 }, { "fft512", 4 }, { "fft64", 1 }, { "fft8192", 8 }, };
static enum_fields _sym16 = { _sym15 , 10 };

// For field CFG_TYPE
static enum_field _sym17[] = { { "br", 1 }, { "br_dr", 3 }, { "dr", 2 }, };
static enum_fields _sym18 = { _sym17 , 3 };

// For field CLR_DST
static enum_field _sym19[] = { { "r0", 1 }, { "r0, r1", 3 }, { "r0,r1", 3 }, { "r1", 2 }, { "r1, r0", 3 }, { "r1,r0", 3 }, };
static enum_fields _sym20 = { _sym19 , 6 };

// For field CLR_DST_imp_bits__21_20_
static enum_field _sym21[] = { { "r0", 1 }, { "r0, r1", 3 }, { "r0,r1", 3 }, { "r1", 2 }, { "r1, r0", 3 }, { "r1,r0", 3 }, };
static enum_fields _sym22 = { _sym21 , 6 };

// For field DIGIT_INDEX
static enum_field _sym23[] = { { "1", 1 }, { "10", 10 }, { "2", 2 }, { "3", 3 }, { "4", 4 }, { "5", 5 }, { "6", 6 }, { "7", 7 }, { "8", 8 }, { "9", 9 }, };
static enum_fields _sym24 = { _sym23 , 10 };

// For field DIGIT_INDEX_imp_bits__23_20_
static enum_field _sym25[] = { { "1", 1 }, { "10", 10 }, { "2", 2 }, { "3", 3 }, { "4", 4 }, { "5", 5 }, { "6", 6 }, { "7", 7 }, { "8", 8 }, { "9", 9 }, };
static enum_fields _sym26 = { _sym25 , 10 };

// For field DST_PTR
static enum_field _sym27[] = { { "a0", 0 }, { "a1", 1 }, { "as0", 4 }, { "as1", 5 }, { "as2", 6 }, { "as3", 7 }, { "di_d", 9 }, { "di_offset_unit", 10 }, { "elem_mask_ptr", 13 }, { "m0", 2 }, { "m1", 3 }, { "mem_elem_rd_ptr", 14 }, { "mem_elem_wr_ptr", 15 }, { "r_rd_ptr", 11 }, { "r_wr_ptr", 12 }, { "vindx_ptr", 8 }, };
static enum_fields _sym28 = { _sym27 , 16 };

// For field DST_REG
static enum_field _sym29[] = { { "a0", 0 }, { "a1", 1 }, { "as0", 4 }, { "as1", 5 }, { "as2", 6 }, { "as3", 7 }, { "di_d", 9 }, { "di_offset_unit", 10 }, { "elem_mask_ptr", 13 }, { "m0", 2 }, { "m1", 3 }, { "mem_elem_rd_ptr", 14 }, { "mem_elem_wr_ptr", 15 }, { "r_rd_ptr", 11 }, { "r_wr_ptr", 12 }, { "vindx_ptr", 8 }, };
static enum_fields _sym30 = { _sym29 , 16 };

// For field DST_REG_MX
static enum_field _sym31[] = { { "m0", 0 }, { "m1", 1 }, };
static enum_fields _sym32 = { _sym31 , 2 };

// For field DST_REG_MX_imp_bits__22_22_
static enum_field _sym33[] = { { "m0", 0 }, { "m1", 1 }, };
static enum_fields _sym34 = { _sym33 , 2 };

// For field DST_REG_NON_MX
static enum_field _sym35[] = { { "a0", 0 }, { "a1", 1 }, { "as0", 4 }, { "as1", 5 }, { "as2", 6 }, { "as3", 7 }, { "di_d", 9 }, { "di_offset_unit", 10 }, { "elem_mask_ptr", 13 }, { "mem_elem_rd_ptr", 14 }, { "mem_elem_wr_ptr", 15 }, { "r_rd_ptr", 11 }, { "r_wr_ptr", 12 }, { "vindx_ptr", 8 }, };
static enum_fields _sym36 = { _sym35 , 14 };

// For field DST_REG_NON_MX_imp_bits__25_22_
static enum_field _sym37[] = { { "a0", 0 }, { "a1", 1 }, { "as0", 4 }, { "as1", 5 }, { "as2", 6 }, { "as3", 7 }, { "di_d", 9 }, { "di_offset_unit", 10 }, { "elem_mask_ptr", 13 }, { "mem_elem_rd_ptr", 14 }, { "mem_elem_wr_ptr", 15 }, { "r_rd_ptr", 11 }, { "r_wr_ptr", 12 }, { "vindx_ptr", 8 }, };
static enum_fields _sym38 = { _sym37 , 14 };

// For field DST_REG_imp_bits__25_22_
static enum_field _sym39[] = { { "a0", 0 }, { "a1", 1 }, { "as0", 4 }, { "as1", 5 }, { "as2", 6 }, { "as3", 7 }, { "di_d", 9 }, { "di_offset_unit", 10 }, { "elem_mask_ptr", 13 }, { "m0", 2 }, { "m1", 3 }, { "mem_elem_rd_ptr", 14 }, { "mem_elem_wr_ptr", 15 }, { "r_rd_ptr", 11 }, { "r_wr_ptr", 12 }, { "vindx_ptr", 8 }, };
static enum_fields _sym40 = { _sym39 , 16 };

// For field IPPU_VCPU
static enum_field _sym41[] = { { ".ippu", 0 }, { ".vcpu", 1 }, };
static enum_fields _sym42 = { _sym41 , 2 };

// For field IPPU_VCPU_imp_bits__19_19_
static enum_field _sym43[] = { { ".ippu", 0 }, { ".vcpu", 1 }, };
static enum_fields _sym44 = { _sym43 , 2 };

// For field JMP_CC
static enum_field _sym45[] = { { "jmp", 3 }, { "jmp.nz", 2 }, { "jmp.z", 1 }, { "jsr", 7 }, { "jsr.nz", 6 }, { "jsr.z", 5 }, { "ret", 15 }, { "ret.nz", 14 }, { "ret.z", 13 }, };
static enum_fields _sym46 = { _sym45 , 9 };

// For field JMP_CC_imp_bits__23_20_
static enum_field _sym47[] = { { "jmp", 3 }, { "jmp.nz", 2 }, { "jmp.z", 1 }, { "jsr", 7 }, { "jsr.nz", 6 }, { "jsr.z", 5 }, { "ret", 15 }, { "ret.nz", 14 }, { "ret.z", 13 }, };
static enum_fields _sym48 = { _sym47 , 9 };

// For field LATCH_MODE
static enum_field _sym49[] = { { "H2H", 11 }, { "H2L", 9 }, { "L2H", 8 }, { "L2L", 10 }, { "e128", 2 }, { "e16", 5 }, { "e256", 1 }, { "e32", 4 }, { "e4", 7 }, { "e64", 3 }, { "e8", 6 }, { "normal", 0 }, };
static enum_fields _sym50 = { _sym49 , 12 };

// For field LATCH_MODE_imp_bits__6_3_
static enum_field _sym51[] = { { "H2H", 11 }, { "H2L", 9 }, { "L2H", 8 }, { "L2L", 10 }, { "e128", 2 }, { "e16", 5 }, { "e256", 1 }, { "e32", 4 }, { "e4", 7 }, { "e64", 3 }, { "e8", 6 }, { "normal", 0 }, };
static enum_fields _sym52 = { _sym51 , 12 };

// For field LD_MODE
static enum_field _sym53[] = { { "br", 1 }, { "br_dr", 3 }, { "dr", 2 }, { "indirect", 5 }, { "normal", 0 }, { "vindirect", 4 }, };
static enum_fields _sym54 = { _sym53 , 6 };

// For field LD_MODE_imp_bits__26_24_
static enum_field _sym55[] = { { "br", 1 }, { "br_dr", 3 }, { "dr", 2 }, { "indirect", 5 }, { "normal", 0 }, { "vindirect", 4 }, };
static enum_fields _sym56 = { _sym55 , 6 };

// For field LD_MODE_imp_bits__28_26_
static enum_field _sym57[] = { { "br", 1 }, { "br_dr", 3 }, { "dr", 2 }, { "indirect", 5 }, { "normal", 0 }, { "vindirect", 4 }, };
static enum_fields _sym58 = { _sym57 , 6 };

// For field LOOP_AS_IMM
static enum_field _sym59[] = { { "as", 0 }, { "imm", 1 }, };
static enum_fields _sym60 = { _sym59 , 2 };

// For field LOOP_AS_IMM_imp_bits__26_26_
static enum_field _sym61[] = { { "as", 0 }, { "imm", 1 }, };
static enum_fields _sym62 = { _sym61 , 2 };

// For field MM
static enum_field _sym63[] = { { "m0", 0 }, { "m1", 1 }, };
static enum_fields _sym64 = { _sym63 , 2 };

// For field MM_imp_bits__22_22_
static enum_field _sym65[] = { { "m0", 0 }, { "m1", 1 }, };
static enum_fields _sym66 = { _sym65 , 2 };

// For field PLUS_MINUS
static enum_field _sym67[] = { { "+", 0 }, { "-", 1 }, };
static enum_fields _sym68 = { _sym67 , 2 };

// For field PLUS_MINUS_imp_bits__23_23_
static enum_field _sym69[] = { { "+", 0 }, { "-", 1 }, };
static enum_fields _sym70 = { _sym69 , 2 };

// For field SRC_REG
static enum_field _sym71[] = { { "a0", 0 }, { "a1", 1 }, { "as0", 4 }, { "as1", 5 }, { "as2", 6 }, { "as3", 7 }, { "di_d", 9 }, { "di_offset_unit", 10 }, { "elem_mask_ptr", 13 }, { "m0", 2 }, { "m1", 3 }, { "mem_elem_rd_ptr", 14 }, { "mem_elem_wr_ptr", 15 }, { "r_rd_ptr", 11 }, { "r_wr_ptr", 12 }, { "vindx_ptr", 8 }, };
static enum_fields _sym72 = { _sym71 , 16 };

// For field SRC_REG_imp_bits__21_18_
static enum_field _sym73[] = { { "a0", 0 }, { "a1", 1 }, { "as0", 4 }, { "as1", 5 }, { "as2", 6 }, { "as3", 7 }, { "di_d", 9 }, { "di_offset_unit", 10 }, { "elem_mask_ptr", 13 }, { "m0", 2 }, { "m1", 3 }, { "mem_elem_rd_ptr", 14 }, { "mem_elem_wr_ptr", 15 }, { "r_rd_ptr", 11 }, { "r_wr_ptr", 12 }, { "vindx_ptr", 8 }, };
static enum_fields _sym74 = { _sym73 , 16 };

// For field ST_MODE
static enum_field _sym75[] = { { "br", 1 }, { "br_dr", 3 }, { "dr", 2 }, { "indirect", 5 }, { "normal", 0 }, };
static enum_fields _sym76 = { _sym75 , 5 };

// For field ST_MODE_imp_bits__28_26_
static enum_field _sym77[] = { { "br", 1 }, { "br_dr", 3 }, { "dr", 2 }, { "indirect", 5 }, { "normal", 0 }, };
static enum_fields _sym78 = { _sym77 , 5 };

// For field WRITE_MODE
static enum_field _sym79[] = { { "e16", 2 }, { "e32", 1 }, { "e4", 4 }, { "e8", 3 }, { "normal", 0 }, };
static enum_fields _sym80 = { _sym79 , 5 };

// For field WRITE_MODE_imp_bits__5_3_
static enum_field _sym81[] = { { "e16", 2 }, { "e32", 1 }, { "e4", 4 }, { "e8", 3 }, { "normal", 0 }, };
static enum_fields _sym82 = { _sym81 , 5 };

// Instruction operands.
static struct adl_field ppc_operands [] = {
  {"AA_imp_bits__20_20__width_32",0,41,1,set_AA_imp_bits__20_20__width_32,clear_AA_imp_bits__20_20__width_32,-1,-1,-1,0,&_sym4,0},	// 0
  {"AS2_imp_bits__23_22__width_32",3,43,2,set_AS2_imp_bits__23_22__width_32,clear_AS2_imp_bits__23_22__width_32,-1,-1,-1,0,&_sym10,0},	// 1
  {"AS_imp_bits__25_24__width_32",2,42,2,set_AS_imp_bits__25_24__width_32,clear_AS_imp_bits__25_24__width_32,-1,-1,-1,0,&_sym12,0},	// 2
  {"BR_MODE_imp_bits__7_4__width_32",7,45,4,set_BR_MODE_imp_bits__7_4__width_32,clear_BR_MODE_imp_bits__7_4__width_32,-1,-1,-1,0,&_sym16,0},	// 3
  {"CLR_DST_imp_bits__21_20__width_32",10,47,2,set_CLR_DST_imp_bits__21_20__width_32,clear_CLR_DST_imp_bits__21_20__width_32,-1,-1,-1,0,&_sym22,0},	// 4
  {"DIGIT_INDEX_imp_bits__23_20__width_32",12,48,4,set_DIGIT_INDEX_imp_bits__23_20__width_32,clear_DIGIT_INDEX_imp_bits__23_20__width_32,-1,-1,-1,0,&_sym26,0},	// 5
  {"DST_REG_MX_imp_bits__22_22__width_32",16,51,1,set_DST_REG_MX_imp_bits__22_22__width_32,clear_DST_REG_MX_imp_bits__22_22__width_32,-1,-1,-1,0,&_sym34,0},	// 6
  {"DST_REG_NON_MX_imp_bits__25_22__width_32",18,52,4,set_DST_REG_NON_MX_imp_bits__25_22__width_32,clear_DST_REG_NON_MX_imp_bits__25_22__width_32,-1,-1,-1,0,&_sym38,0},	// 7
  {"DST_REG_imp_bits__25_22__width_32",15,50,4,set_DST_REG_imp_bits__25_22__width_32,clear_DST_REG_imp_bits__25_22__width_32,-1,-1,-1,0,&_sym40,0},	// 8
  {"ELEM_OFFSET_imp_bits__18_16__width_32",21,53,3,set_ELEM_OFFSET_imp_bits__18_16__width_32,clear_ELEM_OFFSET_imp_bits__18_16__width_32,-1,-1,-1,0,0,0},	// 9
  {"IM11_imp_bits__14_4__width_32",25,56,11,set_IM11_imp_bits__14_4__width_32,clear_IM11_imp_bits__14_4__width_32,-1,-1,-1,0,0,0},	// 10
  {"IM12_imp_bits__15_4__width_32",27,57,12,set_IM12_imp_bits__15_4__width_32,clear_IM12_imp_bits__15_4__width_32,-1,-1,-1,0,0,0},	// 11
  {"IM12s_imp_bits__15_4__width_32",29,58,12,set_IM12s_imp_bits__15_4__width_32,clear_IM12s_imp_bits__15_4__width_32,-1,-1,-1,0,0,0},	// 12
  {"IM16R16_imp_bits__19_4__width_32",32,60,16,set_IM16R16_imp_bits__19_4__width_32,clear_IM16R16_imp_bits__19_4__width_32,-1,16,32,0,0,0},	// 13
  {"IM17R17_imp_bits__20_4__width_32",35,62,17,set_IM17R17_imp_bits__20_4__width_32,clear_IM17R17_imp_bits__20_4__width_32,-1,17,32,0,0,0},	// 14
  {"IM17_imp_bits__19_3__width_32",34,61,17,set_IM17_imp_bits__19_3__width_32,clear_IM17_imp_bits__19_3__width_32,-1,-1,-1,0,0,0},	// 15
  {"IM17sR17_imp_bits__20_4__width_32",39,64,17,set_IM17sR17_imp_bits__20_4__width_32,clear_IM17sR17_imp_bits__20_4__width_32,-1,17,32,0,0,0},	// 16
  {"IM3_imp_bits__18_16__width_32",42,66,3,set_IM3_imp_bits__18_16__width_32,clear_IM3_imp_bits__18_16__width_32,-1,-1,-1,0,0,0},	// 17
  {"IM5s_imp_bits__25_21__width_32",45,68,5,set_IM5s_imp_bits__25_21__width_32,clear_IM5s_imp_bits__25_21__width_32,-1,-1,-1,0,0,0},	// 18
  {"IM6_imp_bits__9_4__width_32",47,69,6,set_IM6_imp_bits__9_4__width_32,clear_IM6_imp_bits__9_4__width_32,-1,-1,-1,0,0,0},	// 19
  {"IM8_imp_bits__11_4__width_32",49,70,8,set_IM8_imp_bits__11_4__width_32,clear_IM8_imp_bits__11_4__width_32,-1,-1,-1,0,0,0},	// 20
  {"IM8s_imp_bits__28_21__width_32",52,72,8,set_IM8s_imp_bits__28_21__width_32,clear_IM8s_imp_bits__28_21__width_32,-1,-1,-1,0,0,0},	// 21
  {"IM9s_imp_bits__15_7__width_32",56,75,9,set_IM9s_imp_bits__15_7__width_32,clear_IM9s_imp_bits__15_7__width_32,-1,-1,-1,0,0,0},	// 22
  {"IPPU_VCPU_imp_bits__19_19__width_32",58,76,1,set_IPPU_VCPU_imp_bits__19_19__width_32,clear_IPPU_VCPU_imp_bits__19_19__width_32,-1,-1,-1,0,&_sym44,0},	// 23
  {"JMP_CC_imp_bits__23_20__width_32",60,77,4,set_JMP_CC_imp_bits__23_20__width_32,clear_JMP_CC_imp_bits__23_20__width_32,-1,-1,-1,0,&_sym48,0},	// 24
  {"LATCH_MODE_imp_bits__6_3__width_32",62,78,4,set_LATCH_MODE_imp_bits__6_3__width_32,clear_LATCH_MODE_imp_bits__6_3__width_32,-1,-1,-1,0,&_sym52,0},	// 25
  {"LD_MODE_imp_bits__26_24__width_32",64,79,3,set_LD_MODE_imp_bits__26_24__width_32,clear_LD_MODE_imp_bits__26_24__width_32,-1,-1,-1,0,&_sym56,0},	// 26
  {"LD_MODE_imp_bits__28_26__width_32",64,79,3,set_LD_MODE_imp_bits__28_26__width_32,clear_LD_MODE_imp_bits__28_26__width_32,-1,-1,-1,0,&_sym58,0},	// 27
  {"LOOP_AS_IMM_imp_bits__26_26__width_32",67,80,1,set_LOOP_AS_IMM_imp_bits__26_26__width_32,clear_LOOP_AS_IMM_imp_bits__26_26__width_32,-1,-1,-1,0,&_sym62,0},	// 28
  {"LOOP_END_imp_bits__0_0__width_32",69,81,1,set_LOOP_END_imp_bits__0_0__width_32,clear_LOOP_END_imp_bits__0_0__width_32,0,-1,-1,1,0,0},	// 29
  {"LOOP_INDEX_imp_bits__2_2__width_32",71,82,1,set_LOOP_INDEX_imp_bits__2_2__width_32,clear_LOOP_INDEX_imp_bits__2_2__width_32,0,-1,-1,1,0,0},	// 30
  {"LOOP_START_imp_bits__1_1__width_32",73,83,1,set_LOOP_START_imp_bits__1_1__width_32,clear_LOOP_START_imp_bits__1_1__width_32,0,-1,-1,1,0,0},	// 31
  {"MM_imp_bits__22_22__width_32",75,84,1,set_MM_imp_bits__22_22__width_32,clear_MM_imp_bits__22_22__width_32,-1,-1,-1,0,&_sym66,0},	// 32
  {"PLUS_MINUS_imp_bits__23_23__width_32",77,85,1,set_PLUS_MINUS_imp_bits__23_23__width_32,clear_PLUS_MINUS_imp_bits__23_23__width_32,-1,-1,-1,0,&_sym70,0},	// 33
  {"RADIX_imp_bits__18_16__width_32",79,86,3,set_RADIX_imp_bits__18_16__width_32,clear_RADIX_imp_bits__18_16__width_32,-1,-1,-1,0,0,0},	// 34
  {"RD_OFFSET_imp_bits__15_7__width_32",81,87,9,set_RD_OFFSET_imp_bits__15_7__width_32,clear_RD_OFFSET_imp_bits__15_7__width_32,-1,-1,-1,0,0,0},	// 35
  {"SET_LOOP_INDEX_imp_bits__23_23__width_32",83,88,1,set_SET_LOOP_INDEX_imp_bits__23_23__width_32,clear_SET_LOOP_INDEX_imp_bits__23_23__width_32,-1,-1,-1,0,0,0},	// 36
  {"SRC_REG_imp_bits__21_18__width_32",85,89,4,set_SRC_REG_imp_bits__21_18__width_32,clear_SRC_REG_imp_bits__21_18__width_32,-1,-1,-1,0,&_sym74,0},	// 37
  {"ST_MODE_imp_bits__28_26__width_32",87,90,3,set_ST_MODE_imp_bits__28_26__width_32,clear_ST_MODE_imp_bits__28_26__width_32,-1,-1,-1,0,&_sym78,0},	// 38
  {"WRITE_MODE_imp_bits__5_3__width_32",97,91,3,set_WRITE_MODE_imp_bits__5_3__width_32,clear_WRITE_MODE_imp_bits__5_3__width_32,-1,-1,-1,0,&_sym82,0},	// 39
  {"WR_OFFSET_imp_bits__15_7__width_32",99,92,9,set_WR_OFFSET_imp_bits__15_7__width_32,clear_WR_OFFSET_imp_bits__15_7__width_32,-1,-1,-1,0,0,0},	// 40
};

static const int num_ppc_operands = 41;

static struct adl_name_pair ppc_operands_by_index [] = {
  { "AA", 41 },
  { "AS", 42 },
  { "AS2", 43 },
  { "BR_MODE", 45 },
  { "CLR_DST", 47 },
  { "DIGIT_INDEX", 48 },
  { "DST_REG", 50 },
  { "DST_REG_MX", 51 },
  { "DST_REG_NON_MX", 52 },
  { "ELEM_OFFSET", 53 },
  { "IM11", 56 },
  { "IM12", 57 },
  { "IM12s", 58 },
  { "IM16R16", 60 },
  { "IM17", 61 },
  { "IM17R17", 62 },
  { "IM17sR17", 64 },
  { "IM3", 66 },
  { "IM5s", 68 },
  { "IM6", 69 },
  { "IM8", 70 },
  { "IM8s", 72 },
  { "IM9s", 75 },
  { "IPPU_VCPU", 76 },
  { "JMP_CC", 77 },
  { "LATCH_MODE", 78 },
  { "LD_MODE", 79 },
  { "LOOP_AS_IMM", 80 },
  { "LOOP_END", 81 },
  { "LOOP_INDEX", 82 },
  { "LOOP_START", 83 },
  { "MM", 84 },
  { "PLUS_MINUS", 85 },
  { "RADIX", 86 },
  { "RD_OFFSET", 87 },
  { "SET_LOOP_INDEX", 88 },
  { "SRC_REG", 89 },
  { "ST_MODE", 90 },
  { "WRITE_MODE", 91 },
  { "WR_OFFSET", 92 },
};

static const int num_ppc_operands_by_index = 40;

enum InstrBlocks {
};


// Instruction clr_Rx
static adl_instr_attrs _sym84 = { ((uint64_t)(1ULL << instr_ippu)) , 0 };

// Instruction clr_Rx
static struct adl_operand _sym83_operands[] = { {4, 0, 0, 0, 10, 0ull, 0x3ull, 0ull, 0, 0, 0, 0,-1,-1,},{30, 1, 0, 0, 29, 0ull, 0x1ull, 0ull, 0, 0, 0, 0,-1,-1,},{31, 2, 0, 0, 30, 0ull, 0x1ull, 0ull, 0, 0, 0, 0,-1,-1,},{29, 3, 0, 0, 31, 0ull, 0x1ull, 0ull, 0, 0, 0, 0,-1,-1,},};
static struct enum_fields *_sym85[] = { &_sym20,  (struct enum_fields *) -1,};

// Instruction clr_mask_all
static adl_instr_attrs _sym87 = { ((uint64_t)(1ULL << instr_ippu)) , 0 };

// Instruction clr_mask_all
static struct adl_operand _sym86_operands[] = { {30, 0, 0, 0, 29, 0ull, 0x1ull, 0ull, 0, 0, 0, 0,-1,-1,},{31, 1, 0, 0, 30, 0ull, 0x1ull, 0ull, 0, 0, 0, 0,-1,-1,},{29, 2, 0, 0, 31, 0ull, 0x1ull, 0ull, 0, 0, 0, 0,-1,-1,},};
static struct enum_fields *_sym88[] = {  (struct enum_fields *) -1,};

// Instruction clr_mask_bit
static adl_instr_attrs _sym90 = { ((uint64_t)(1ULL << instr_ippu)) , 0 };

// Instruction clr_mask_bit
static struct adl_operand _sym89_operands[] = { {11, 0, 0, 0, 16, 0ull, 0xfffull, 0ull, 0, 0, 0, 0,-1,-1,},{30, 1, 0, 0, 29, 0ull, 0x1ull, 0ull, 0, 0, 0, 0,-1,-1,},{31, 2, 0, 0, 30, 0ull, 0x1ull, 0ull, 0, 0, 0, 0,-1,-1,},{29, 3, 0, 0, 31, 0ull, 0x1ull, 0ull, 0, 0, 0, 0,-1,-1,},};
static struct enum_fields *_sym91[] = { 0,  (struct enum_fields *) -1,};

// Instruction cmp_bit
static adl_instr_attrs _sym93 = { ((uint64_t)(1ULL << instr_ippu)) , 0 };

// Instruction cmp_bit
static struct adl_operand _sym92_operands[] = { {12, 0, ADL_EXT_SIGNED, 0, 16, 18446744073709549569ull-1, 4095ull, 0ull, 0, 0, 0, 0,-1,-1,},{30, 1, 0, 0, 29, 0ull, 0x1ull, 0ull, 0, 0, 0, 0,-1,-1,},{31, 2, 0, 0, 30, 0ull, 0x1ull, 0ull, 0, 0, 0, 0,-1,-1,},{29, 3, 0, 0, 31, 0ull, 0x1ull, 0ull, 0, 0, 0, 0,-1,-1,},};
static struct enum_fields *_sym94[] = { 0,  (struct enum_fields *) -1,};

// Instruction done
static adl_instr_attrs _sym96 = { ((uint64_t)(1ULL << instr_ippu)) , 0 };

// Instruction done
static struct adl_operand _sym95_operands[] = { {30, 0, 0, 0, 29, 0ull, 0x1ull, 0ull, 0, 0, 0, 0,-1,-1,},{31, 1, 0, 0, 30, 0ull, 0x1ull, 0ull, 0, 0, 0, 0,-1,-1,},{29, 2, 0, 0, 31, 0ull, 0x1ull, 0ull, 0, 0, 0, 0,-1,-1,},};
static struct enum_fields *_sym97[] = {  (struct enum_fields *) -1,};

// Instruction jmp
static adl_instr_attrs _sym99 = { ((uint64_t)(1ULL << instr_ippu)) , 0 };

// Instruction jmp
static struct adl_operand _sym98_operands[] = { {24, 0, 0, 0, 8, 0ull, 0xfull, 0ull, 0, 0, 0, 0,-1,-1,},{13, 1, ADL_ABSOLUTE, 0, 12, 0ull, 0xffffull, 0ull, 0, 0, 0, 0,-1,-1,},{30, 2, 0, 0, 29, 0ull, 0x1ull, 0ull, 0, 0, 0, 0,-1,-1,},{31, 3, 0, 0, 30, 0ull, 0x1ull, 0ull, 0, 0, 0, 0,-1,-1,},{29, 4, 0, 0, 31, 0ull, 0x1ull, 0ull, 0, 0, 0, 0,-1,-1,},};
static struct enum_fields *_sym100[] = { &_sym48, 0, 0, 0, 0,  (struct enum_fields *) -1,};

// Instruction jmp_jmp
static adl_instr_attrs _sym102 = { ((uint64_t)(1ULL << instr_ippu)) , 0 };

// Shorthand:  jmp_jmp -> jmp;
static struct adl_operand _sym103_operands[] = { {13, 0, ADL_ABSOLUTE, 0, 12, 0ull, 0xffffull, 0ull, 0, 0, 0, 0,-1,-1,},{30, 1, 0, 0, 29, 0ull, 0x1ull, 0ull, 0, 0, 0, 0,-1,-1,},{31, 2, 0, 0, 30, 0ull, 0x1ull, 0ull, 0, 0, 0, 0,-1,-1,},{29, 3, 0, 0, 31, 0ull, 0x1ull, 0ull, 0, 0, 0, 0,-1,-1,},};

// Instruction jmp_jmp
static struct adl_operand _sym101_operands[] = { {60, 0, ADL_ABSOLUTE, 0, 31, 0ull, 0xffffull, 0ull, 0, 0, 0, 0,-1,-1,},{82, 1, 0, 0, 31, 0ull, 0x1ull, 0ull, 0, 0, 0, 0,-1,-1,},{83, 2, 0, 0, 31, 0ull, 0x1ull, 0ull, 0, 0, 0, 0,-1,-1,},{81, 3, 0, 0, 31, 0ull, 0x1ull, 0ull, 0, 0, 0, 0,-1,-1,},};
static struct adl_opcode _sym104[] = {
  // jmp    (0)
  { "jmp", 4, 32, 32,  0x3, { 0x10300000,},0, "", 0, 4, 4, 0, 0, _sym103_operands,0,0,0, 0,&_sym102,0,{}, 0,0,0,0,0,-1, },
};

static struct enum_fields *_sym105[] = { 0,  (struct enum_fields *) -1,};

// Instruction jmp_nz
static adl_instr_attrs _sym107 = { ((uint64_t)(1ULL << instr_ippu)) , 0 };

// Shorthand:  jmp_nz -> jmp;
static struct adl_operand _sym108_operands[] = { {13, 0, ADL_ABSOLUTE, 0, 12, 0ull, 0xffffull, 0ull, 0, 0, 0, 0,-1,-1,},{30, 1, 0, 0, 29, 0ull, 0x1ull, 0ull, 0, 0, 0, 0,-1,-1,},{31, 2, 0, 0, 30, 0ull, 0x1ull, 0ull, 0, 0, 0, 0,-1,-1,},{29, 3, 0, 0, 31, 0ull, 0x1ull, 0ull, 0, 0, 0, 0,-1,-1,},};

// Instruction jmp_nz
static struct adl_operand _sym106_operands[] = { {60, 0, ADL_ABSOLUTE, 0, 31, 0ull, 0xffffull, 0ull, 0, 0, 0, 0,-1,-1,},{82, 1, 0, 0, 31, 0ull, 0x1ull, 0ull, 0, 0, 0, 0,-1,-1,},{83, 2, 0, 0, 31, 0ull, 0x1ull, 0ull, 0, 0, 0, 0,-1,-1,},{81, 3, 0, 0, 31, 0ull, 0x1ull, 0ull, 0, 0, 0, 0,-1,-1,},};
static struct adl_opcode _sym109[] = {
  // jmp    (0)
  { "jmp", 4, 32, 32,  0x3, { 0x10200000,},0, "", 0, 4, 4, 0, 0, _sym108_operands,0,0,0, 0,&_sym107,0,{}, 0,0,0,0,0,-1, },
};

static struct enum_fields *_sym110[] = { 0,  (struct enum_fields *) -1,};

// Instruction jmp_z
static adl_instr_attrs _sym112 = { ((uint64_t)(1ULL << instr_ippu)) , 0 };

// Shorthand:  jmp_z -> jmp;
static struct adl_operand _sym113_operands[] = { {13, 0, ADL_ABSOLUTE, 0, 12, 0ull, 0xffffull, 0ull, 0, 0, 0, 0,-1,-1,},{30, 1, 0, 0, 29, 0ull, 0x1ull, 0ull, 0, 0, 0, 0,-1,-1,},{31, 2, 0, 0, 30, 0ull, 0x1ull, 0ull, 0, 0, 0, 0,-1,-1,},{29, 3, 0, 0, 31, 0ull, 0x1ull, 0ull, 0, 0, 0, 0,-1,-1,},};

// Instruction jmp_z
static struct adl_operand _sym111_operands[] = { {60, 0, ADL_ABSOLUTE, 0, 31, 0ull, 0xffffull, 0ull, 0, 0, 0, 0,-1,-1,},{82, 1, 0, 0, 31, 0ull, 0x1ull, 0ull, 0, 0, 0, 0,-1,-1,},{83, 2, 0, 0, 31, 0ull, 0x1ull, 0ull, 0, 0, 0, 0,-1,-1,},{81, 3, 0, 0, 31, 0ull, 0x1ull, 0ull, 0, 0, 0, 0,-1,-1,},};
static struct adl_opcode _sym114[] = {
  // jmp    (0)
  { "jmp", 4, 32, 32,  0x3, { 0x10100000,},0, "", 0, 4, 4, 0, 0, _sym113_operands,0,0,0, 0,&_sym112,0,{}, 0,0,0,0,0,-1, },
};

static struct enum_fields *_sym115[] = { 0,  (struct enum_fields *) -1,};

// Instruction jsr
static adl_instr_attrs _sym117 = { ((uint64_t)(1ULL << instr_ippu)) , 0 };

// Shorthand:  jsr -> jmp;
static struct adl_operand _sym118_operands[] = { {13, 0, ADL_ABSOLUTE, 0, 12, 0ull, 0xffffull, 0ull, 0, 0, 0, 0,-1,-1,},{30, 1, 0, 0, 29, 0ull, 0x1ull, 0ull, 0, 0, 0, 0,-1,-1,},{31, 2, 0, 0, 30, 0ull, 0x1ull, 0ull, 0, 0, 0, 0,-1,-1,},{29, 3, 0, 0, 31, 0ull, 0x1ull, 0ull, 0, 0, 0, 0,-1,-1,},};

// Instruction jsr
static struct adl_operand _sym116_operands[] = { {60, 0, ADL_ABSOLUTE, 0, 31, 0ull, 0xffffull, 0ull, 0, 0, 0, 0,-1,-1,},{82, 1, 0, 0, 31, 0ull, 0x1ull, 0ull, 0, 0, 0, 0,-1,-1,},{83, 2, 0, 0, 31, 0ull, 0x1ull, 0ull, 0, 0, 0, 0,-1,-1,},{81, 3, 0, 0, 31, 0ull, 0x1ull, 0ull, 0, 0, 0, 0,-1,-1,},};
static struct adl_opcode _sym119[] = {
  // jmp    (0)
  { "jmp", 4, 32, 32,  0x3, { 0x10700000,},0, "", 0, 4, 4, 0, 0, _sym118_operands,0,0,0, 0,&_sym117,0,{}, 0,0,0,0,0,-1, },
};

static struct enum_fields *_sym120[] = { 0,  (struct enum_fields *) -1,};

// Instruction jsr_nz
static adl_instr_attrs _sym122 = { ((uint64_t)(1ULL << instr_ippu)) , 0 };

// Shorthand:  jsr_nz -> jmp;
static struct adl_operand _sym123_operands[] = { {13, 0, ADL_ABSOLUTE, 0, 12, 0ull, 0xffffull, 0ull, 0, 0, 0, 0,-1,-1,},{30, 1, 0, 0, 29, 0ull, 0x1ull, 0ull, 0, 0, 0, 0,-1,-1,},{31, 2, 0, 0, 30, 0ull, 0x1ull, 0ull, 0, 0, 0, 0,-1,-1,},{29, 3, 0, 0, 31, 0ull, 0x1ull, 0ull, 0, 0, 0, 0,-1,-1,},};

// Instruction jsr_nz
static struct adl_operand _sym121_operands[] = { {60, 0, ADL_ABSOLUTE, 0, 31, 0ull, 0xffffull, 0ull, 0, 0, 0, 0,-1,-1,},{82, 1, 0, 0, 31, 0ull, 0x1ull, 0ull, 0, 0, 0, 0,-1,-1,},{83, 2, 0, 0, 31, 0ull, 0x1ull, 0ull, 0, 0, 0, 0,-1,-1,},{81, 3, 0, 0, 31, 0ull, 0x1ull, 0ull, 0, 0, 0, 0,-1,-1,},};
static struct adl_opcode _sym124[] = {
  // jmp    (0)
  { "jmp", 4, 32, 32,  0x3, { 0x10600000,},0, "", 0, 4, 4, 0, 0, _sym123_operands,0,0,0, 0,&_sym122,0,{}, 0,0,0,0,0,-1, },
};

static struct enum_fields *_sym125[] = { 0,  (struct enum_fields *) -1,};

// Instruction jsr_z
static adl_instr_attrs _sym127 = { ((uint64_t)(1ULL << instr_ippu)) , 0 };

// Shorthand:  jsr_z -> jmp;
static struct adl_operand _sym128_operands[] = { {13, 0, ADL_ABSOLUTE, 0, 12, 0ull, 0xffffull, 0ull, 0, 0, 0, 0,-1,-1,},{30, 1, 0, 0, 29, 0ull, 0x1ull, 0ull, 0, 0, 0, 0,-1,-1,},{31, 2, 0, 0, 30, 0ull, 0x1ull, 0ull, 0, 0, 0, 0,-1,-1,},{29, 3, 0, 0, 31, 0ull, 0x1ull, 0ull, 0, 0, 0, 0,-1,-1,},};

// Instruction jsr_z
static struct adl_operand _sym126_operands[] = { {60, 0, ADL_ABSOLUTE, 0, 31, 0ull, 0xffffull, 0ull, 0, 0, 0, 0,-1,-1,},{82, 1, 0, 0, 31, 0ull, 0x1ull, 0ull, 0, 0, 0, 0,-1,-1,},{83, 2, 0, 0, 31, 0ull, 0x1ull, 0ull, 0, 0, 0, 0,-1,-1,},{81, 3, 0, 0, 31, 0ull, 0x1ull, 0ull, 0, 0, 0, 0,-1,-1,},};
static struct adl_opcode _sym129[] = {
  // jmp    (0)
  { "jmp", 4, 32, 32,  0x3, { 0x10500000,},0, "", 0, 4, 4, 0, 0, _sym128_operands,0,0,0, 0,&_sym127,0,{}, 0,0,0,0,0,-1, },
};

static struct enum_fields *_sym130[] = { 0,  (struct enum_fields *) -1,};

// Instruction ld_aX_Is5
static adl_instr_attrs _sym132 = { ((uint64_t)(1ULL << instr_ippu)) , 0 };

// Instruction ld_aX_Is5
static struct adl_operand _sym131_operands[] = { {27, 0, 0, 0, 3, 0ull, 0x7ull, 0ull, 0, 0, 0, 0,-1,-1,},{18, 1, ADL_SIGNED, 0, 6, 18446744073709551601ull-1, 15ull, 0ull, 0, 0, 0, 0,-1,-1,},{0, 2, ADL_REGISTER, 0, 11, 0ull, 0x1ull, 0ull, 0, 0, 0, 0,-1,-1,},{23, 3, 0, 0, 12, 0ull, 0x1ull, 0ull, 0, 0, 0, 0,-1,-1,},{9, 4, ADL_SIGNED, 0, 13, 18446744073709551613ull-1, 3ull, 0ull, 0, 0, 0, 0,-1,-1,},{40, 5, ADL_SIGNED, 0, 16, 18446744073709551361ull-1, 255ull, 0ull, 0, 0, 0, 0,-1,-1,},{25, 6, 0, 0, 25, 0ull, 0xfull, 0ull, 0, 0, 0, 0,-1,-1,},{30, 7, 0, 0, 29, 0ull, 0x1ull, 0ull, 0, 0, 0, 0,-1,-1,},{31, 8, 0, 0, 30, 0ull, 0x1ull, 0ull, 0, 0, 0, 0,-1,-1,},{29, 9, 0, 0, 31, 0ull, 0x1ull, 0ull, 0, 0, 0, 0,-1,-1,},};
static struct enum_fields *_sym133[] = { &_sym58, 0, &_sym4, &_sym44, 0, 0, &_sym52, 0, 0, 0,  (struct enum_fields *) -1,};

// Instruction ld_aX_Is5_minus
static adl_instr_attrs _sym135 = { ((uint64_t)(1ULL << instr_ippu)) , 0 };

// Shorthand:  ld_aX_Is5_minus -> ld_aX_Is5;

static bfd_uint64_t _sym137_modifier (const expressionS *operands, unsigned __cia ATTRIBUTE_UNUSED) { return - (IM5n_checker((operands[2].X_add_number),FALSE)); }
static struct adl_operand _sym136_operands[] = { {27, 4, 0, 0, 3, 0ull, 0x7ull, 0ull, 0, 0, 0, 0,-1,-1,},{18, 0, 0, 0, 0, 0, 0, 0, _sym137_modifier, 0, 0,0, -1,-1,},{0, 1, ADL_REGISTER, 0, 11, 0ull, 0x1ull, 0ull, 0, 0, 0, 0,-1,-1,},{23, 0, 0, 0, 12, 0ull, 0x1ull, 0ull, 0, 0, 0, 0,-1,-1,},{9, 3, ADL_SIGNED, 0, 13, 18446744073709551613ull-1, 3ull, 0ull, 0, 0, 0, 0,-1,-1,},{40, 5, ADL_SIGNED, 0, 16, 18446744073709551361ull-1, 255ull, 0ull, 0, 0, 0, 0,-1,-1,},{25, 6, 0, 0, 25, 0ull, 0xfull, 0ull, 0, 0, 0, 0,-1,-1,},{30, 7, 0, 0, 29, 0ull, 0x1ull, 0ull, 0, 0, 0, 0,-1,-1,},{31, 8, 0, 0, 30, 0ull, 0x1ull, 0ull, 0, 0, 0, 0,-1,-1,},{29, 9, 0, 0, 31, 0ull, 0x1ull, 0ull, 0, 0, 0, 0,-1,-1,},};

// Instruction ld_aX_Is5_minus
static struct adl_operand _sym134_operands[] = { {76, 0, 0, 0, 31, 0ull, 0x1ull, 0ull, 0, 0, 0, 0,-1,-1,},{41, 1, ADL_REGISTER, 0, 31, 0ull, 0x1ull, 0ull, 0, 0, 0, 0,-1,-1,},{67, 2, 0, 0, 31, 0ull, 0x1full, 0ull, 0, 0,IM5n_checker, 0,-1,-1,},{53, 3, ADL_SIGNED, 0, 31, 18446744073709551613ull-1, 3ull, 0ull, 0, 0, 0, 0,-1,-1,},{79, 4, 0, 0, 31, 0ull, 0x7ull, 0ull, 0, 0, 0, 0,-1,-1,},{92, 5, ADL_SIGNED, 0, 31, 18446744073709551361ull-1, 255ull, 0ull, 0, 0, 0, 0,-1,-1,},{78, 6, 0, 0, 31, 0ull, 0xfull, 0ull, 0, 0, 0, 0,-1,-1,},{82, 7, 0, 0, 31, 0ull, 0x1ull, 0ull, 0, 0, 0, 0,-1,-1,},{83, 8, 0, 0, 31, 0ull, 0x1ull, 0ull, 0, 0, 0, 0,-1,-1,},{81, 9, 0, 0, 31, 0ull, 0x1ull, 0ull, 0, 0, 0, 0,-1,-1,},};
static struct adl_opcode _sym138[] = {
  // ld_aX_Is5    (0)
  { "ld_aX_Is5", 4, 32, 32,  0x3, { 0xc0000000,},0, "", 0, 10, 10, 0, 1, _sym136_operands,0,0,0, 0,&_sym135,0,{}, 0,0,0,0,0,-1, },
};

static struct enum_fields *_sym139[] = { &_sym42, &_sym2, 0, 0, &_sym54, 0, &_sym50,  (struct enum_fields *) -1,};

// Instruction ld_aX_Is5_plus
static adl_instr_attrs _sym141 = { ((uint64_t)(1ULL << instr_ippu)) , 0 };

// Shorthand:  ld_aX_Is5_plus -> ld_aX_Is5;
static struct adl_operand _sym142_operands[] = { {27, 4, 0, 0, 3, 0ull, 0x7ull, 0ull, 0, 0, 0, 0,-1,-1,},{18, 2, ADL_SIGNED, 0, 6, 18446744073709551601ull-1, 15ull, 0ull, 0, 0, 0, 0,-1,-1,},{0, 1, ADL_REGISTER, 0, 11, 0ull, 0x1ull, 0ull, 0, 0, 0, 0,-1,-1,},{23, 0, 0, 0, 12, 0ull, 0x1ull, 0ull, 0, 0, 0, 0,-1,-1,},{9, 3, ADL_SIGNED, 0, 13, 18446744073709551613ull-1, 3ull, 0ull, 0, 0, 0, 0,-1,-1,},{40, 5, ADL_SIGNED, 0, 16, 18446744073709551361ull-1, 255ull, 0ull, 0, 0, 0, 0,-1,-1,},{25, 6, 0, 0, 25, 0ull, 0xfull, 0ull, 0, 0, 0, 0,-1,-1,},{30, 7, 0, 0, 29, 0ull, 0x1ull, 0ull, 0, 0, 0, 0,-1,-1,},{31, 8, 0, 0, 30, 0ull, 0x1ull, 0ull, 0, 0, 0, 0,-1,-1,},{29, 9, 0, 0, 31, 0ull, 0x1ull, 0ull, 0, 0, 0, 0,-1,-1,},};

// Instruction ld_aX_Is5_plus
static struct adl_operand _sym140_operands[] = { {76, 0, 0, 0, 31, 0ull, 0x1ull, 0ull, 0, 0, 0, 0,-1,-1,},{41, 1, ADL_REGISTER, 0, 31, 0ull, 0x1ull, 0ull, 0, 0, 0, 0,-1,-1,},{68, 2, ADL_SIGNED, 0, 31, 18446744073709551601ull-1, 15ull, 0ull, 0, 0, 0, 0,-1,-1,},{53, 3, ADL_SIGNED, 0, 31, 18446744073709551613ull-1, 3ull, 0ull, 0, 0, 0, 0,-1,-1,},{79, 4, 0, 0, 31, 0ull, 0x7ull, 0ull, 0, 0, 0, 0,-1,-1,},{92, 5, ADL_SIGNED, 0, 31, 18446744073709551361ull-1, 255ull, 0ull, 0, 0, 0, 0,-1,-1,},{78, 6, 0, 0, 31, 0ull, 0xfull, 0ull, 0, 0, 0, 0,-1,-1,},{82, 7, 0, 0, 31, 0ull, 0x1ull, 0ull, 0, 0, 0, 0,-1,-1,},{83, 8, 0, 0, 31, 0ull, 0x1ull, 0ull, 0, 0, 0, 0,-1,-1,},{81, 9, 0, 0, 31, 0ull, 0x1ull, 0ull, 0, 0, 0, 0,-1,-1,},};
static struct adl_opcode _sym143[] = {
  // ld_aX_Is5    (0)
  { "ld_aX_Is5", 4, 32, 32,  0x3, { 0xc0000000,},0, "", 0, 10, 10, 0, 1, _sym142_operands,0,0,0, 0,&_sym141,0,{}, 0,0,0,0,0,-1, },
};

static struct enum_fields *_sym144[] = { &_sym42, &_sym2, 0, 0, &_sym54, 0, &_sym50,  (struct enum_fields *) -1,};

// Instruction ld_aX_Is8
static adl_instr_attrs _sym146 = { ((uint64_t)(1ULL << instr_ippu)) , 0 };

// Instruction ld_aX_Is8
static struct adl_operand _sym145_operands[] = { {21, 0, ADL_SIGNED, 0, 3, 18446744073709551489ull-1, 127ull, 0ull, 0, 0, 0, 0,-1,-1,},{0, 1, ADL_REGISTER, 0, 11, 0ull, 0x1ull, 0ull, 0, 0, 0, 0,-1,-1,},{23, 2, 0, 0, 12, 0ull, 0x1ull, 0ull, 0, 0, 0, 0,-1,-1,},{9, 3, ADL_SIGNED, 0, 13, 18446744073709551613ull-1, 3ull, 0ull, 0, 0, 0, 0,-1,-1,},{40, 4, ADL_SIGNED, 0, 16, 18446744073709551361ull-1, 255ull, 0ull, 0, 0, 0, 0,-1,-1,},{25, 5, 0, 0, 25, 0ull, 0xfull, 0ull, 0, 0, 0, 0,-1,-1,},{30, 6, 0, 0, 29, 0ull, 0x1ull, 0ull, 0, 0, 0, 0,-1,-1,},{31, 7, 0, 0, 30, 0ull, 0x1ull, 0ull, 0, 0, 0, 0,-1,-1,},{29, 8, 0, 0, 31, 0ull, 0x1ull, 0ull, 0, 0, 0, 0,-1,-1,},};
static struct enum_fields *_sym147[] = { 0, &_sym4, &_sym44, 0, 0, &_sym52, 0, 0, 0,  (struct enum_fields *) -1,};

// Instruction ld_aX_Is8_minus
static adl_instr_attrs _sym149 = { ((uint64_t)(1ULL << instr_ippu)) , 0 };

// Shorthand:  ld_aX_Is8_minus -> ld_aX_Is8;

static bfd_uint64_t _sym151_modifier (const expressionS *operands, unsigned __cia ATTRIBUTE_UNUSED) { return - (IM8n_checker((operands[2].X_add_number),FALSE)); }
static struct adl_operand _sym150_operands[] = { {21, 0, 0, 0, 0, 0, 0, 0, _sym151_modifier, 0, 0,0, -1,-1,},{0, 1, ADL_REGISTER, 0, 11, 0ull, 0x1ull, 0ull, 0, 0, 0, 0,-1,-1,},{23, 0, 0, 0, 12, 0ull, 0x1ull, 0ull, 0, 0, 0, 0,-1,-1,},{9, 3, ADL_SIGNED, 0, 13, 18446744073709551613ull-1, 3ull, 0ull, 0, 0, 0, 0,-1,-1,},{40, 4, ADL_SIGNED, 0, 16, 18446744073709551361ull-1, 255ull, 0ull, 0, 0, 0, 0,-1,-1,},{25, 5, 0, 0, 25, 0ull, 0xfull, 0ull, 0, 0, 0, 0,-1,-1,},{30, 6, 0, 0, 29, 0ull, 0x1ull, 0ull, 0, 0, 0, 0,-1,-1,},{31, 7, 0, 0, 30, 0ull, 0x1ull, 0ull, 0, 0, 0, 0,-1,-1,},{29, 8, 0, 0, 31, 0ull, 0x1ull, 0ull, 0, 0, 0, 0,-1,-1,},};

// Instruction ld_aX_Is8_minus
static struct adl_operand _sym148_operands[] = { {76, 0, 0, 0, 31, 0ull, 0x1ull, 0ull, 0, 0, 0, 0,-1,-1,},{41, 1, ADL_REGISTER, 0, 31, 0ull, 0x1ull, 0ull, 0, 0, 0, 0,-1,-1,},{71, 2, 0, 0, 31, 0ull, 0xffull, 0ull, 0, 0,IM8n_checker, 0,-1,-1,},{53, 3, ADL_SIGNED, 0, 31, 18446744073709551613ull-1, 3ull, 0ull, 0, 0, 0, 0,-1,-1,},{92, 4, ADL_SIGNED, 0, 31, 18446744073709551361ull-1, 255ull, 0ull, 0, 0, 0, 0,-1,-1,},{78, 5, 0, 0, 31, 0ull, 0xfull, 0ull, 0, 0, 0, 0,-1,-1,},{82, 6, 0, 0, 31, 0ull, 0x1ull, 0ull, 0, 0, 0, 0,-1,-1,},{83, 7, 0, 0, 31, 0ull, 0x1ull, 0ull, 0, 0, 0, 0,-1,-1,},{81, 8, 0, 0, 31, 0ull, 0x1ull, 0ull, 0, 0, 0, 0,-1,-1,},};
static struct adl_opcode _sym152[] = {
  // ld_aX_Is8    (0)
  { "ld_aX_Is8", 4, 32, 32,  0x3, { 0xe0000000,},0, "", 0, 9, 9, 0, 1, _sym150_operands,0,0,0, 0,&_sym149,0,{}, 0,0,0,0,0,-1, },
};

static struct enum_fields *_sym153[] = { &_sym42, &_sym2, 0, 0, 0, &_sym50,  (struct enum_fields *) -1,};

// Instruction ld_aX_Is8_plus
static adl_instr_attrs _sym155 = { ((uint64_t)(1ULL << instr_ippu)) , 0 };

// Shorthand:  ld_aX_Is8_plus -> ld_aX_Is8;
static struct adl_operand _sym156_operands[] = { {21, 2, ADL_SIGNED, 0, 3, 18446744073709551489ull-1, 127ull, 0ull, 0, 0, 0, 0,-1,-1,},{0, 1, ADL_REGISTER, 0, 11, 0ull, 0x1ull, 0ull, 0, 0, 0, 0,-1,-1,},{23, 0, 0, 0, 12, 0ull, 0x1ull, 0ull, 0, 0, 0, 0,-1,-1,},{9, 3, ADL_SIGNED, 0, 13, 18446744073709551613ull-1, 3ull, 0ull, 0, 0, 0, 0,-1,-1,},{40, 4, ADL_SIGNED, 0, 16, 18446744073709551361ull-1, 255ull, 0ull, 0, 0, 0, 0,-1,-1,},{25, 5, 0, 0, 25, 0ull, 0xfull, 0ull, 0, 0, 0, 0,-1,-1,},{30, 6, 0, 0, 29, 0ull, 0x1ull, 0ull, 0, 0, 0, 0,-1,-1,},{31, 7, 0, 0, 30, 0ull, 0x1ull, 0ull, 0, 0, 0, 0,-1,-1,},{29, 8, 0, 0, 31, 0ull, 0x1ull, 0ull, 0, 0, 0, 0,-1,-1,},};

// Instruction ld_aX_Is8_plus
static struct adl_operand _sym154_operands[] = { {76, 0, 0, 0, 31, 0ull, 0x1ull, 0ull, 0, 0, 0, 0,-1,-1,},{41, 1, ADL_REGISTER, 0, 31, 0ull, 0x1ull, 0ull, 0, 0, 0, 0,-1,-1,},{72, 2, ADL_SIGNED, 0, 31, 18446744073709551489ull-1, 127ull, 0ull, 0, 0, 0, 0,-1,-1,},{53, 3, ADL_SIGNED, 0, 31, 18446744073709551613ull-1, 3ull, 0ull, 0, 0, 0, 0,-1,-1,},{92, 4, ADL_SIGNED, 0, 31, 18446744073709551361ull-1, 255ull, 0ull, 0, 0, 0, 0,-1,-1,},{78, 5, 0, 0, 31, 0ull, 0xfull, 0ull, 0, 0, 0, 0,-1,-1,},{82, 6, 0, 0, 31, 0ull, 0x1ull, 0ull, 0, 0, 0, 0,-1,-1,},{83, 7, 0, 0, 31, 0ull, 0x1ull, 0ull, 0, 0, 0, 0,-1,-1,},{81, 8, 0, 0, 31, 0ull, 0x1ull, 0ull, 0, 0, 0, 0,-1,-1,},};
static struct adl_opcode _sym157[] = {
  // ld_aX_Is8    (0)
  { "ld_aX_Is8", 4, 32, 32,  0x3, { 0xe0000000,},0, "", 0, 9, 9, 0, 1, _sym156_operands,0,0,0, 0,&_sym155,0,{}, 0,0,0,0,0,-1, },
};

static struct enum_fields *_sym158[] = { &_sym42, &_sym2, 0, 0, 0, &_sym50,  (struct enum_fields *) -1,};

// Instruction ld_aX_mX
static adl_instr_attrs _sym160 = { ((uint64_t)(1ULL << instr_ippu)) , 0 };

// Instruction ld_aX_mX
static struct adl_operand _sym159_operands[] = { {23, 0, 0, 0, 12, 0ull, 0x1ull, 0ull, 0, 0, 0, 0,-1,-1,},{0, 1, ADL_REGISTER, 0, 11, 0ull, 0x1ull, 0ull, 0, 0, 0, 0,-1,-1,},{33, 2, 0, 0, 8, 0ull, 0x1ull, 0ull, 0, 0, 0, 0,-1,-1,},{32, 3, ADL_REGISTER, 0, 9, 0ull, 0x1ull, 0ull, 0, 0, 0, 0,-1,-1,},{9, 4, ADL_SIGNED, 0, 13, 18446744073709551613ull-1, 3ull, 0ull, 0, 0, 0, 0,-1,-1,},{26, 5, 0, 0, 5, 0ull, 0x7ull, 0ull, 0, 0, 0, 0,-1,-1,},{40, 6, ADL_SIGNED, 0, 16, 18446744073709551361ull-1, 255ull, 0ull, 0, 0, 0, 0,-1,-1,},{25, 7, 0, 0, 25, 0ull, 0xfull, 0ull, 0, 0, 0, 0,-1,-1,},{30, 8, 0, 0, 29, 0ull, 0x1ull, 0ull, 0, 0, 0, 0,-1,-1,},{31, 9, 0, 0, 30, 0ull, 0x1ull, 0ull, 0, 0, 0, 0,-1,-1,},{29, 10, 0, 0, 31, 0ull, 0x1ull, 0ull, 0, 0, 0, 0,-1,-1,},};
static struct enum_fields *_sym161[] = { &_sym42, &_sym2, &_sym68, &_sym64, 0, &_sym54, 0, &_sym50,  (struct enum_fields *) -1,};

// Instruction ld_asX_base_Iu6
static adl_instr_attrs _sym163 = { ((uint64_t)(1ULL << instr_ippu)) , 0 };

// Instruction ld_asX_base_Iu6
static struct adl_operand _sym162_operands[] = { {2, 0, ADL_REGISTER, 0, 6, 0ull, 0x3ull, 0ull, 0, 0, 0, 0,-1,-1,},{19, 1, 0, 0, 22, 0ull, 0x3full, 0ull, 0, 0, 0, 0,-1,-1,},{30, 2, 0, 0, 29, 0ull, 0x1ull, 0ull, 0, 0, 0, 0,-1,-1,},{31, 3, 0, 0, 30, 0ull, 0x1ull, 0ull, 0, 0, 0, 0,-1,-1,},{29, 4, 0, 0, 31, 0ull, 0x1ull, 0ull, 0, 0, 0, 0,-1,-1,},};
static struct enum_fields *_sym164[] = { &_sym6, 0,  (struct enum_fields *) -1,};

// Instruction ld_index_aX_Is9
static adl_instr_attrs _sym166 = { ((uint64_t)(1ULL << instr_ippu)) , 0 };

// Instruction ld_index_aX_Is9
static struct adl_operand _sym165_operands[] = { {0, 0, ADL_REGISTER, 0, 11, 0ull, 0x1ull, 0ull, 0, 0, 0, 0,-1,-1,},{23, 1, 0, 0, 12, 0ull, 0x1ull, 0ull, 0, 0, 0, 0,-1,-1,},{22, 2, ADL_SIGNED, 0, 16, 18446744073709551361ull-1, 255ull, 0ull, 0, 0, 0, 0,-1,-1,},{30, 3, 0, 0, 29, 0ull, 0x1ull, 0ull, 0, 0, 0, 0,-1,-1,},{31, 4, 0, 0, 30, 0ull, 0x1ull, 0ull, 0, 0, 0, 0,-1,-1,},{29, 5, 0, 0, 31, 0ull, 0x1ull, 0ull, 0, 0, 0, 0,-1,-1,},};
static struct enum_fields *_sym167[] = { &_sym4, &_sym44, 0, 0, 0, 0,  (struct enum_fields *) -1,};

// Instruction ld_index_aX_Is9_minus_ippu
static adl_instr_attrs _sym169 = { ((uint64_t)(1ULL << instr_ippu)) , 0 };

// Shorthand:  ld_index_aX_Is9_minus_ippu -> ld_index_aX_Is9;

static bfd_uint64_t _sym171_modifier (const expressionS *operands, unsigned __cia ATTRIBUTE_UNUSED) { return - (IM9n_checker((operands[1].X_add_number),FALSE)); }
static struct adl_operand _sym170_operands[] = { {0, 0, ADL_REGISTER, 0, 11, 0ull, 0x1ull, 0ull, 0, 0, 0, 0,-1,-1,},{22, 0, 0, 0, 0, 0, 0, 0, _sym171_modifier, 0, 0,0, -1,-1,},{30, 2, 0, 0, 29, 0ull, 0x1ull, 0ull, 0, 0, 0, 0,-1,-1,},{31, 3, 0, 0, 30, 0ull, 0x1ull, 0ull, 0, 0, 0, 0,-1,-1,},{29, 4, 0, 0, 31, 0ull, 0x1ull, 0ull, 0, 0, 0, 0,-1,-1,},};

// Instruction ld_index_aX_Is9_minus_ippu
static struct adl_operand _sym168_operands[] = { {41, 0, ADL_REGISTER, 0, 31, 0ull, 0x1ull, 0ull, 0, 0, 0, 0,-1,-1,},{74, 1, 0, 0, 31, 0ull, 0x1ffull, 0ull, 0, 0,IM9n_checker, 0,-1,-1,},{82, 2, 0, 0, 31, 0ull, 0x1ull, 0ull, 0, 0, 0, 0,-1,-1,},{83, 3, 0, 0, 31, 0ull, 0x1ull, 0ull, 0, 0, 0, 0,-1,-1,},{81, 4, 0, 0, 31, 0ull, 0x1ull, 0ull, 0, 0, 0, 0,-1,-1,},};
static struct adl_opcode _sym172[] = {
  // ld_index_aX_Is9    (0)
  { "ld_index_aX_Is9", 4, 32, 32,  0x3, { 0x7c000000,},0, "", 0, 5, 5, 0, 0, _sym170_operands,0,0,0, 0,&_sym169,0,{}, 0,0,0,0,0,-1, },
};

static struct enum_fields *_sym173[] = { &_sym2, 0,  (struct enum_fields *) -1,};

// Instruction ld_index_aX_Is9_minus_vcpu
static adl_instr_attrs _sym175 = { ((uint64_t)(1ULL << instr_ippu)) , 0 };

// Shorthand:  ld_index_aX_Is9_minus_vcpu -> ld_index_aX_Is9;

static bfd_uint64_t _sym177_modifier (const expressionS *operands, unsigned __cia ATTRIBUTE_UNUSED) { return - (IM9n_checker((operands[1].X_add_number),FALSE)); }
static struct adl_operand _sym176_operands[] = { {0, 0, ADL_REGISTER, 0, 11, 0ull, 0x1ull, 0ull, 0, 0, 0, 0,-1,-1,},{22, 0, 0, 0, 0, 0, 0, 0, _sym177_modifier, 0, 0,0, -1,-1,},{30, 2, 0, 0, 29, 0ull, 0x1ull, 0ull, 0, 0, 0, 0,-1,-1,},{31, 3, 0, 0, 30, 0ull, 0x1ull, 0ull, 0, 0, 0, 0,-1,-1,},{29, 4, 0, 0, 31, 0ull, 0x1ull, 0ull, 0, 0, 0, 0,-1,-1,},};

// Instruction ld_index_aX_Is9_minus_vcpu
static struct adl_operand _sym174_operands[] = { {41, 0, ADL_REGISTER, 0, 31, 0ull, 0x1ull, 0ull, 0, 0, 0, 0,-1,-1,},{74, 1, 0, 0, 31, 0ull, 0x1ffull, 0ull, 0, 0,IM9n_checker, 0,-1,-1,},{82, 2, 0, 0, 31, 0ull, 0x1ull, 0ull, 0, 0, 0, 0,-1,-1,},{83, 3, 0, 0, 31, 0ull, 0x1ull, 0ull, 0, 0, 0, 0,-1,-1,},{81, 4, 0, 0, 31, 0ull, 0x1ull, 0ull, 0, 0, 0, 0,-1,-1,},};
static struct adl_opcode _sym178[] = {
  // ld_index_aX_Is9    (0)
  { "ld_index_aX_Is9", 4, 32, 32,  0x3, { 0x7c080000,},0, "", 0, 5, 5, 0, 0, _sym176_operands,0,0,0, 0,&_sym175,0,{}, 0,0,0,0,0,-1, },
};

static struct enum_fields *_sym179[] = { &_sym2, 0,  (struct enum_fields *) -1,};

// Instruction ld_index_aX_Is9_plus_ippu
static adl_instr_attrs _sym181 = { ((uint64_t)(1ULL << instr_ippu)) , 0 };

// Shorthand:  ld_index_aX_Is9_plus_ippu -> ld_index_aX_Is9;
static struct adl_operand _sym182_operands[] = { {0, 0, ADL_REGISTER, 0, 11, 0ull, 0x1ull, 0ull, 0, 0, 0, 0,-1,-1,},{22, 1, ADL_SIGNED, 0, 16, 18446744073709551361ull-1, 255ull, 0ull, 0, 0, 0, 0,-1,-1,},{30, 2, 0, 0, 29, 0ull, 0x1ull, 0ull, 0, 0, 0, 0,-1,-1,},{31, 3, 0, 0, 30, 0ull, 0x1ull, 0ull, 0, 0, 0, 0,-1,-1,},{29, 4, 0, 0, 31, 0ull, 0x1ull, 0ull, 0, 0, 0, 0,-1,-1,},};

// Instruction ld_index_aX_Is9_plus_ippu
static struct adl_operand _sym180_operands[] = { {41, 0, ADL_REGISTER, 0, 31, 0ull, 0x1ull, 0ull, 0, 0, 0, 0,-1,-1,},{75, 1, ADL_SIGNED, 0, 31, 18446744073709551361ull-1, 255ull, 0ull, 0, 0, 0, 0,-1,-1,},{82, 2, 0, 0, 31, 0ull, 0x1ull, 0ull, 0, 0, 0, 0,-1,-1,},{83, 3, 0, 0, 31, 0ull, 0x1ull, 0ull, 0, 0, 0, 0,-1,-1,},{81, 4, 0, 0, 31, 0ull, 0x1ull, 0ull, 0, 0, 0, 0,-1,-1,},};
static struct adl_opcode _sym183[] = {
  // ld_index_aX_Is9    (0)
  { "ld_index_aX_Is9", 4, 32, 32,  0x3, { 0x7c000000,},0, "", 0, 5, 5, 0, 0, _sym182_operands,0,0,0, 0,&_sym181,0,{}, 0,0,0,0,0,-1, },
};

static struct enum_fields *_sym184[] = { &_sym2, 0,  (struct enum_fields *) -1,};

// Instruction ld_index_aX_Is9_plus_vcpu
static adl_instr_attrs _sym186 = { ((uint64_t)(1ULL << instr_ippu)) , 0 };

// Shorthand:  ld_index_aX_Is9_plus_vcpu -> ld_index_aX_Is9;
static struct adl_operand _sym187_operands[] = { {0, 0, ADL_REGISTER, 0, 11, 0ull, 0x1ull, 0ull, 0, 0, 0, 0,-1,-1,},{22, 1, ADL_SIGNED, 0, 16, 18446744073709551361ull-1, 255ull, 0ull, 0, 0, 0, 0,-1,-1,},{30, 2, 0, 0, 29, 0ull, 0x1ull, 0ull, 0, 0, 0, 0,-1,-1,},{31, 3, 0, 0, 30, 0ull, 0x1ull, 0ull, 0, 0, 0, 0,-1,-1,},{29, 4, 0, 0, 31, 0ull, 0x1ull, 0ull, 0, 0, 0, 0,-1,-1,},};

// Instruction ld_index_aX_Is9_plus_vcpu
static struct adl_operand _sym185_operands[] = { {41, 0, ADL_REGISTER, 0, 31, 0ull, 0x1ull, 0ull, 0, 0, 0, 0,-1,-1,},{75, 1, ADL_SIGNED, 0, 31, 18446744073709551361ull-1, 255ull, 0ull, 0, 0, 0, 0,-1,-1,},{82, 2, 0, 0, 31, 0ull, 0x1ull, 0ull, 0, 0, 0, 0,-1,-1,},{83, 3, 0, 0, 31, 0ull, 0x1ull, 0ull, 0, 0, 0, 0,-1,-1,},{81, 4, 0, 0, 31, 0ull, 0x1ull, 0ull, 0, 0, 0, 0,-1,-1,},};
static struct adl_opcode _sym188[] = {
  // ld_index_aX_Is9    (0)
  { "ld_index_aX_Is9", 4, 32, 32,  0x3, { 0x7c080000,},0, "", 0, 5, 5, 0, 0, _sym187_operands,0,0,0, 0,&_sym186,0,{}, 0,0,0,0,0,-1, },
};

static struct enum_fields *_sym189[] = { &_sym2, 0,  (struct enum_fields *) -1,};

// Instruction ld_index_aX_mX
static adl_instr_attrs _sym191 = { ((uint64_t)(1ULL << instr_ippu)) , 0 };

// Instruction ld_index_aX_mX
static struct adl_operand _sym190_operands[] = { {33, 0, 0, 0, 8, 0ull, 0x1ull, 0ull, 0, 0, 0, 0,-1,-1,},{32, 1, ADL_REGISTER, 0, 9, 0ull, 0x1ull, 0ull, 0, 0, 0, 0,-1,-1,},{0, 2, ADL_REGISTER, 0, 11, 0ull, 0x1ull, 0ull, 0, 0, 0, 0,-1,-1,},{23, 3, 0, 0, 12, 0ull, 0x1ull, 0ull, 0, 0, 0, 0,-1,-1,},{30, 4, 0, 0, 29, 0ull, 0x1ull, 0ull, 0, 0, 0, 0,-1,-1,},{31, 5, 0, 0, 30, 0ull, 0x1ull, 0ull, 0, 0, 0, 0,-1,-1,},{29, 6, 0, 0, 31, 0ull, 0x1ull, 0ull, 0, 0, 0, 0,-1,-1,},};
static struct enum_fields *_sym192[] = { &_sym70, &_sym66, &_sym4, &_sym44, 0, 0, 0,  (struct enum_fields *) -1,};

// Instruction ld_index_aX_mX_ippu
static adl_instr_attrs _sym194 = { ((uint64_t)(1ULL << instr_ippu)) , 0 };

// Shorthand:  ld_index_aX_mX_ippu -> ld_index_aX_mX;
static struct adl_operand _sym195_operands[] = { {33, 1, 0, 0, 8, 0ull, 0x1ull, 0ull, 0, 0, 0, 0,-1,-1,},{32, 2, ADL_REGISTER, 0, 9, 0ull, 0x1ull, 0ull, 0, 0, 0, 0,-1,-1,},{0, 0, ADL_REGISTER, 0, 11, 0ull, 0x1ull, 0ull, 0, 0, 0, 0,-1,-1,},{30, 3, 0, 0, 29, 0ull, 0x1ull, 0ull, 0, 0, 0, 0,-1,-1,},{31, 4, 0, 0, 30, 0ull, 0x1ull, 0ull, 0, 0, 0, 0,-1,-1,},{29, 5, 0, 0, 31, 0ull, 0x1ull, 0ull, 0, 0, 0, 0,-1,-1,},};

// Instruction ld_index_aX_mX_ippu
static struct adl_operand _sym193_operands[] = { {41, 0, ADL_REGISTER, 0, 31, 0ull, 0x1ull, 0ull, 0, 0, 0, 0,-1,-1,},{85, 1, 0, 0, 31, 0ull, 0x1ull, 0ull, 0, 0, 0, 0,-1,-1,},{84, 2, ADL_REGISTER, 0, 31, 0ull, 0x1ull, 0ull, 0, 0, 0, 0,-1,-1,},{82, 3, 0, 0, 31, 0ull, 0x1ull, 0ull, 0, 0, 0, 0,-1,-1,},{83, 4, 0, 0, 31, 0ull, 0x1ull, 0ull, 0, 0, 0, 0,-1,-1,},{81, 5, 0, 0, 31, 0ull, 0x1ull, 0ull, 0, 0, 0, 0,-1,-1,},};
static struct adl_opcode _sym196[] = {
  // ld_index_aX_mX    (0)
  { "ld_index_aX_mX", 4, 32, 32,  0x3, { 0x7e000000,},0, "", 0, 6, 6, 0, 0, _sym195_operands,0,0,0, 0,&_sym194,0,{}, 0,0,0,0,0,-1, },
};

static struct enum_fields *_sym197[] = { &_sym2, &_sym68, &_sym64,  (struct enum_fields *) -1,};

// Instruction ld_index_aX_mX_vcpu
static adl_instr_attrs _sym199 = { ((uint64_t)(1ULL << instr_ippu)) , 0 };

// Shorthand:  ld_index_aX_mX_vcpu -> ld_index_aX_mX;
static struct adl_operand _sym200_operands[] = { {33, 1, 0, 0, 8, 0ull, 0x1ull, 0ull, 0, 0, 0, 0,-1,-1,},{32, 2, ADL_REGISTER, 0, 9, 0ull, 0x1ull, 0ull, 0, 0, 0, 0,-1,-1,},{0, 0, ADL_REGISTER, 0, 11, 0ull, 0x1ull, 0ull, 0, 0, 0, 0,-1,-1,},{30, 3, 0, 0, 29, 0ull, 0x1ull, 0ull, 0, 0, 0, 0,-1,-1,},{31, 4, 0, 0, 30, 0ull, 0x1ull, 0ull, 0, 0, 0, 0,-1,-1,},{29, 5, 0, 0, 31, 0ull, 0x1ull, 0ull, 0, 0, 0, 0,-1,-1,},};

// Instruction ld_index_aX_mX_vcpu
static struct adl_operand _sym198_operands[] = { {41, 0, ADL_REGISTER, 0, 31, 0ull, 0x1ull, 0ull, 0, 0, 0, 0,-1,-1,},{85, 1, 0, 0, 31, 0ull, 0x1ull, 0ull, 0, 0, 0, 0,-1,-1,},{84, 2, ADL_REGISTER, 0, 31, 0ull, 0x1ull, 0ull, 0, 0, 0, 0,-1,-1,},{82, 3, 0, 0, 31, 0ull, 0x1ull, 0ull, 0, 0, 0, 0,-1,-1,},{83, 4, 0, 0, 31, 0ull, 0x1ull, 0ull, 0, 0, 0, 0,-1,-1,},{81, 5, 0, 0, 31, 0ull, 0x1ull, 0ull, 0, 0, 0, 0,-1,-1,},};
static struct adl_opcode _sym201[] = {
  // ld_index_aX_mX    (0)
  { "ld_index_aX_mX", 4, 32, 32,  0x3, { 0x7e080000,},0, "", 0, 6, 6, 0, 0, _sym200_operands,0,0,0, 0,&_sym199,0,{}, 0,0,0,0,0,-1, },
};

static struct enum_fields *_sym202[] = { &_sym2, &_sym68, &_sym64,  (struct enum_fields *) -1,};

// Instruction ld_mask_aX_Is9
static adl_instr_attrs _sym204 = { ((uint64_t)(1ULL << instr_ippu)) , 0 };

// Instruction ld_mask_aX_Is9
static struct adl_operand _sym203_operands[] = { {0, 0, ADL_REGISTER, 0, 11, 0ull, 0x1ull, 0ull, 0, 0, 0, 0,-1,-1,},{23, 1, 0, 0, 12, 0ull, 0x1ull, 0ull, 0, 0, 0, 0,-1,-1,},{22, 2, ADL_SIGNED, 0, 16, 18446744073709551361ull-1, 255ull, 0ull, 0, 0, 0, 0,-1,-1,},{30, 3, 0, 0, 29, 0ull, 0x1ull, 0ull, 0, 0, 0, 0,-1,-1,},{31, 4, 0, 0, 30, 0ull, 0x1ull, 0ull, 0, 0, 0, 0,-1,-1,},{29, 5, 0, 0, 31, 0ull, 0x1ull, 0ull, 0, 0, 0, 0,-1,-1,},};
static struct enum_fields *_sym205[] = { &_sym4, &_sym44, 0, 0, 0, 0,  (struct enum_fields *) -1,};

// Instruction ld_mask_aX_Is9_minus_ippu
static adl_instr_attrs _sym207 = { ((uint64_t)(1ULL << instr_ippu)) , 0 };

// Shorthand:  ld_mask_aX_Is9_minus_ippu -> ld_mask_aX_Is9;

static bfd_uint64_t _sym209_modifier (const expressionS *operands, unsigned __cia ATTRIBUTE_UNUSED) { return - (IM9n_checker((operands[1].X_add_number),FALSE)); }
static struct adl_operand _sym208_operands[] = { {0, 0, ADL_REGISTER, 0, 11, 0ull, 0x1ull, 0ull, 0, 0, 0, 0,-1,-1,},{22, 0, 0, 0, 0, 0, 0, 0, _sym209_modifier, 0, 0,0, -1,-1,},{30, 2, 0, 0, 29, 0ull, 0x1ull, 0ull, 0, 0, 0, 0,-1,-1,},{31, 3, 0, 0, 30, 0ull, 0x1ull, 0ull, 0, 0, 0, 0,-1,-1,},{29, 4, 0, 0, 31, 0ull, 0x1ull, 0ull, 0, 0, 0, 0,-1,-1,},};

// Instruction ld_mask_aX_Is9_minus_ippu
static struct adl_operand _sym206_operands[] = { {41, 0, ADL_REGISTER, 0, 31, 0ull, 0x1ull, 0ull, 0, 0, 0, 0,-1,-1,},{74, 1, 0, 0, 31, 0ull, 0x1ffull, 0ull, 0, 0,IM9n_checker, 0,-1,-1,},{82, 2, 0, 0, 31, 0ull, 0x1ull, 0ull, 0, 0, 0, 0,-1,-1,},{83, 3, 0, 0, 31, 0ull, 0x1ull, 0ull, 0, 0, 0, 0,-1,-1,},{81, 4, 0, 0, 31, 0ull, 0x1ull, 0ull, 0, 0, 0, 0,-1,-1,},};
static struct adl_opcode _sym210[] = {
  // ld_mask_aX_Is9    (0)
  { "ld_mask_aX_Is9", 4, 32, 32,  0x3, { 0x78000000,},0, "", 0, 5, 5, 0, 0, _sym208_operands,0,0,0, 0,&_sym207,0,{}, 0,0,0,0,0,-1, },
};

static struct enum_fields *_sym211[] = { &_sym2, 0,  (struct enum_fields *) -1,};

// Instruction ld_mask_aX_Is9_minus_vcpu
static adl_instr_attrs _sym213 = { ((uint64_t)(1ULL << instr_ippu)) , 0 };

// Shorthand:  ld_mask_aX_Is9_minus_vcpu -> ld_mask_aX_Is9;

static bfd_uint64_t _sym215_modifier (const expressionS *operands, unsigned __cia ATTRIBUTE_UNUSED) { return - (IM9n_checker((operands[1].X_add_number),FALSE)); }
static struct adl_operand _sym214_operands[] = { {0, 0, ADL_REGISTER, 0, 11, 0ull, 0x1ull, 0ull, 0, 0, 0, 0,-1,-1,},{22, 0, 0, 0, 0, 0, 0, 0, _sym215_modifier, 0, 0,0, -1,-1,},{30, 2, 0, 0, 29, 0ull, 0x1ull, 0ull, 0, 0, 0, 0,-1,-1,},{31, 3, 0, 0, 30, 0ull, 0x1ull, 0ull, 0, 0, 0, 0,-1,-1,},{29, 4, 0, 0, 31, 0ull, 0x1ull, 0ull, 0, 0, 0, 0,-1,-1,},};

// Instruction ld_mask_aX_Is9_minus_vcpu
static struct adl_operand _sym212_operands[] = { {41, 0, ADL_REGISTER, 0, 31, 0ull, 0x1ull, 0ull, 0, 0, 0, 0,-1,-1,},{74, 1, 0, 0, 31, 0ull, 0x1ffull, 0ull, 0, 0,IM9n_checker, 0,-1,-1,},{82, 2, 0, 0, 31, 0ull, 0x1ull, 0ull, 0, 0, 0, 0,-1,-1,},{83, 3, 0, 0, 31, 0ull, 0x1ull, 0ull, 0, 0, 0, 0,-1,-1,},{81, 4, 0, 0, 31, 0ull, 0x1ull, 0ull, 0, 0, 0, 0,-1,-1,},};
static struct adl_opcode _sym216[] = {
  // ld_mask_aX_Is9    (0)
  { "ld_mask_aX_Is9", 4, 32, 32,  0x3, { 0x78080000,},0, "", 0, 5, 5, 0, 0, _sym214_operands,0,0,0, 0,&_sym213,0,{}, 0,0,0,0,0,-1, },
};

static struct enum_fields *_sym217[] = { &_sym2, 0,  (struct enum_fields *) -1,};

// Instruction ld_mask_aX_Is9_plus_ippu
static adl_instr_attrs _sym219 = { ((uint64_t)(1ULL << instr_ippu)) , 0 };

// Shorthand:  ld_mask_aX_Is9_plus_ippu -> ld_mask_aX_Is9;
static struct adl_operand _sym220_operands[] = { {0, 0, ADL_REGISTER, 0, 11, 0ull, 0x1ull, 0ull, 0, 0, 0, 0,-1,-1,},{22, 1, ADL_SIGNED, 0, 16, 18446744073709551361ull-1, 255ull, 0ull, 0, 0, 0, 0,-1,-1,},{30, 2, 0, 0, 29, 0ull, 0x1ull, 0ull, 0, 0, 0, 0,-1,-1,},{31, 3, 0, 0, 30, 0ull, 0x1ull, 0ull, 0, 0, 0, 0,-1,-1,},{29, 4, 0, 0, 31, 0ull, 0x1ull, 0ull, 0, 0, 0, 0,-1,-1,},};

// Instruction ld_mask_aX_Is9_plus_ippu
static struct adl_operand _sym218_operands[] = { {41, 0, ADL_REGISTER, 0, 31, 0ull, 0x1ull, 0ull, 0, 0, 0, 0,-1,-1,},{75, 1, ADL_SIGNED, 0, 31, 18446744073709551361ull-1, 255ull, 0ull, 0, 0, 0, 0,-1,-1,},{82, 2, 0, 0, 31, 0ull, 0x1ull, 0ull, 0, 0, 0, 0,-1,-1,},{83, 3, 0, 0, 31, 0ull, 0x1ull, 0ull, 0, 0, 0, 0,-1,-1,},{81, 4, 0, 0, 31, 0ull, 0x1ull, 0ull, 0, 0, 0, 0,-1,-1,},};
static struct adl_opcode _sym221[] = {
  // ld_mask_aX_Is9    (0)
  { "ld_mask_aX_Is9", 4, 32, 32,  0x3, { 0x78000000,},0, "", 0, 5, 5, 0, 0, _sym220_operands,0,0,0, 0,&_sym219,0,{}, 0,0,0,0,0,-1, },
};

static struct enum_fields *_sym222[] = { &_sym2, 0,  (struct enum_fields *) -1,};

// Instruction ld_mask_aX_Is9_plus_vcpu
static adl_instr_attrs _sym224 = { ((uint64_t)(1ULL << instr_ippu)) , 0 };

// Shorthand:  ld_mask_aX_Is9_plus_vcpu -> ld_mask_aX_Is9;
static struct adl_operand _sym225_operands[] = { {0, 0, ADL_REGISTER, 0, 11, 0ull, 0x1ull, 0ull, 0, 0, 0, 0,-1,-1,},{22, 1, ADL_SIGNED, 0, 16, 18446744073709551361ull-1, 255ull, 0ull, 0, 0, 0, 0,-1,-1,},{30, 2, 0, 0, 29, 0ull, 0x1ull, 0ull, 0, 0, 0, 0,-1,-1,},{31, 3, 0, 0, 30, 0ull, 0x1ull, 0ull, 0, 0, 0, 0,-1,-1,},{29, 4, 0, 0, 31, 0ull, 0x1ull, 0ull, 0, 0, 0, 0,-1,-1,},};

// Instruction ld_mask_aX_Is9_plus_vcpu
static struct adl_operand _sym223_operands[] = { {41, 0, ADL_REGISTER, 0, 31, 0ull, 0x1ull, 0ull, 0, 0, 0, 0,-1,-1,},{75, 1, ADL_SIGNED, 0, 31, 18446744073709551361ull-1, 255ull, 0ull, 0, 0, 0, 0,-1,-1,},{82, 2, 0, 0, 31, 0ull, 0x1ull, 0ull, 0, 0, 0, 0,-1,-1,},{83, 3, 0, 0, 31, 0ull, 0x1ull, 0ull, 0, 0, 0, 0,-1,-1,},{81, 4, 0, 0, 31, 0ull, 0x1ull, 0ull, 0, 0, 0, 0,-1,-1,},};
static struct adl_opcode _sym226[] = {
  // ld_mask_aX_Is9    (0)
  { "ld_mask_aX_Is9", 4, 32, 32,  0x3, { 0x78080000,},0, "", 0, 5, 5, 0, 0, _sym225_operands,0,0,0, 0,&_sym224,0,{}, 0,0,0,0,0,-1, },
};

static struct enum_fields *_sym227[] = { &_sym2, 0,  (struct enum_fields *) -1,};

// Instruction ld_mask_aX_mX
static adl_instr_attrs _sym229 = { ((uint64_t)(1ULL << instr_ippu)) , 0 };

// Instruction ld_mask_aX_mX
static struct adl_operand _sym228_operands[] = { {33, 0, 0, 0, 8, 0ull, 0x1ull, 0ull, 0, 0, 0, 0,-1,-1,},{32, 1, ADL_REGISTER, 0, 9, 0ull, 0x1ull, 0ull, 0, 0, 0, 0,-1,-1,},{0, 2, ADL_REGISTER, 0, 11, 0ull, 0x1ull, 0ull, 0, 0, 0, 0,-1,-1,},{23, 3, 0, 0, 12, 0ull, 0x1ull, 0ull, 0, 0, 0, 0,-1,-1,},{30, 4, 0, 0, 29, 0ull, 0x1ull, 0ull, 0, 0, 0, 0,-1,-1,},{31, 5, 0, 0, 30, 0ull, 0x1ull, 0ull, 0, 0, 0, 0,-1,-1,},{29, 6, 0, 0, 31, 0ull, 0x1ull, 0ull, 0, 0, 0, 0,-1,-1,},};
static struct enum_fields *_sym230[] = { &_sym70, &_sym66, &_sym4, &_sym44, 0, 0, 0,  (struct enum_fields *) -1,};

// Instruction ld_mask_aX_mX_ippu
static adl_instr_attrs _sym232 = { ((uint64_t)(1ULL << instr_ippu)) , 0 };

// Shorthand:  ld_mask_aX_mX_ippu -> ld_mask_aX_mX;
static struct adl_operand _sym233_operands[] = { {33, 1, 0, 0, 8, 0ull, 0x1ull, 0ull, 0, 0, 0, 0,-1,-1,},{32, 2, ADL_REGISTER, 0, 9, 0ull, 0x1ull, 0ull, 0, 0, 0, 0,-1,-1,},{0, 0, ADL_REGISTER, 0, 11, 0ull, 0x1ull, 0ull, 0, 0, 0, 0,-1,-1,},{30, 3, 0, 0, 29, 0ull, 0x1ull, 0ull, 0, 0, 0, 0,-1,-1,},{31, 4, 0, 0, 30, 0ull, 0x1ull, 0ull, 0, 0, 0, 0,-1,-1,},{29, 5, 0, 0, 31, 0ull, 0x1ull, 0ull, 0, 0, 0, 0,-1,-1,},};

// Instruction ld_mask_aX_mX_ippu
static struct adl_operand _sym231_operands[] = { {41, 0, ADL_REGISTER, 0, 31, 0ull, 0x1ull, 0ull, 0, 0, 0, 0,-1,-1,},{85, 1, 0, 0, 31, 0ull, 0x1ull, 0ull, 0, 0, 0, 0,-1,-1,},{84, 2, ADL_REGISTER, 0, 31, 0ull, 0x1ull, 0ull, 0, 0, 0, 0,-1,-1,},{82, 3, 0, 0, 31, 0ull, 0x1ull, 0ull, 0, 0, 0, 0,-1,-1,},{83, 4, 0, 0, 31, 0ull, 0x1ull, 0ull, 0, 0, 0, 0,-1,-1,},{81, 5, 0, 0, 31, 0ull, 0x1ull, 0ull, 0, 0, 0, 0,-1,-1,},};
static struct adl_opcode _sym234[] = {
  // ld_mask_aX_mX    (0)
  { "ld_mask_aX_mX", 4, 32, 32,  0x3, { 0x7a000000,},0, "", 0, 6, 6, 0, 0, _sym233_operands,0,0,0, 0,&_sym232,0,{}, 0,0,0,0,0,-1, },
};

static struct enum_fields *_sym235[] = { &_sym2, &_sym68, &_sym64,  (struct enum_fields *) -1,};

// Instruction ld_mask_aX_mX_vcpu
static adl_instr_attrs _sym237 = { ((uint64_t)(1ULL << instr_ippu)) , 0 };

// Shorthand:  ld_mask_aX_mX_vcpu -> ld_mask_aX_mX;
static struct adl_operand _sym238_operands[] = { {33, 1, 0, 0, 8, 0ull, 0x1ull, 0ull, 0, 0, 0, 0,-1,-1,},{32, 2, ADL_REGISTER, 0, 9, 0ull, 0x1ull, 0ull, 0, 0, 0, 0,-1,-1,},{0, 0, ADL_REGISTER, 0, 11, 0ull, 0x1ull, 0ull, 0, 0, 0, 0,-1,-1,},{30, 3, 0, 0, 29, 0ull, 0x1ull, 0ull, 0, 0, 0, 0,-1,-1,},{31, 4, 0, 0, 30, 0ull, 0x1ull, 0ull, 0, 0, 0, 0,-1,-1,},{29, 5, 0, 0, 31, 0ull, 0x1ull, 0ull, 0, 0, 0, 0,-1,-1,},};

// Instruction ld_mask_aX_mX_vcpu
static struct adl_operand _sym236_operands[] = { {41, 0, ADL_REGISTER, 0, 31, 0ull, 0x1ull, 0ull, 0, 0, 0, 0,-1,-1,},{85, 1, 0, 0, 31, 0ull, 0x1ull, 0ull, 0, 0, 0, 0,-1,-1,},{84, 2, ADL_REGISTER, 0, 31, 0ull, 0x1ull, 0ull, 0, 0, 0, 0,-1,-1,},{82, 3, 0, 0, 31, 0ull, 0x1ull, 0ull, 0, 0, 0, 0,-1,-1,},{83, 4, 0, 0, 31, 0ull, 0x1ull, 0ull, 0, 0, 0, 0,-1,-1,},{81, 5, 0, 0, 31, 0ull, 0x1ull, 0ull, 0, 0, 0, 0,-1,-1,},};
static struct adl_opcode _sym239[] = {
  // ld_mask_aX_mX    (0)
  { "ld_mask_aX_mX", 4, 32, 32,  0x3, { 0x7a080000,},0, "", 0, 6, 6, 0, 0, _sym238_operands,0,0,0, 0,&_sym237,0,{}, 0,0,0,0,0,-1, },
};

static struct enum_fields *_sym240[] = { &_sym2, &_sym68, &_sym64,  (struct enum_fields *) -1,};

// Instruction mv_ippu_reg
static adl_instr_attrs _sym242 = { ((uint64_t)(1ULL << instr_ippu)) , 0 };

// Instruction mv_ippu_reg
static struct adl_operand _sym241_operands[] = { {8, 0, 0, 0, 6, 0ull, 0xfull, 0ull, 0, 0, 0, 0,-1,-1,},{37, 1, 0, 0, 10, 0ull, 0xfull, 0ull, 0, 0, 0, 0,-1,-1,},{30, 2, 0, 0, 29, 0ull, 0x1ull, 0ull, 0, 0, 0, 0,-1,-1,},{31, 3, 0, 0, 30, 0ull, 0x1ull, 0ull, 0, 0, 0, 0,-1,-1,},{29, 4, 0, 0, 31, 0ull, 0x1ull, 0ull, 0, 0, 0, 0,-1,-1,},};
static struct enum_fields *_sym243[] = { &_sym30, &_sym72,  (struct enum_fields *) -1,};

// Instruction mv_ippu_reg_I17_mX
static adl_instr_attrs _sym245 = { ((uint64_t)(1ULL << instr_ippu)) , 0 };

// Instruction mv_ippu_reg_I17_mX
static struct adl_operand _sym244_operands[] = { {6, 0, 0, 0, 9, 0ull, 0x1ull, 0ull, 0, 0, 0, 0,-1,-1,},{16, 1, ADL_ABSOLUTE | ADL_EXT_SIGNED, 0, 11, 18446744073709486081ull-1, 131071ull, 0ull, 0, 0, 0, 0,-1,-1,},{30, 2, 0, 0, 29, 0ull, 0x1ull, 0ull, 0, 0, 0, 0,-1,-1,},{31, 3, 0, 0, 30, 0ull, 0x1ull, 0ull, 0, 0, 0, 0,-1,-1,},{29, 4, 0, 0, 31, 0ull, 0x1ull, 0ull, 0, 0, 0, 0,-1,-1,},};
static struct enum_fields *_sym246[] = { &_sym32, 0,  (struct enum_fields *) -1,};

// Instruction mv_ippu_reg_I17_non_mX
static adl_instr_attrs _sym248 = { ((uint64_t)(1ULL << instr_ippu)) , 0 };

// Instruction mv_ippu_reg_I17_non_mX
static struct adl_operand _sym247_operands[] = { {7, 0, 0, 0, 6, 0ull, 0xfull, 0ull, 0, 0, 0, 0,-1,-1,},{14, 1, ADL_ABSOLUTE, 0, 11, 0ull, 0x1ffffull, 0ull, 0, 0, 0, 0,-1,-1,},{30, 2, 0, 0, 29, 0ull, 0x1ull, 0ull, 0, 0, 0, 0,-1,-1,},{31, 3, 0, 0, 30, 0ull, 0x1ull, 0ull, 0, 0, 0, 0,-1,-1,},{29, 4, 0, 0, 31, 0ull, 0x1ull, 0ull, 0, 0, 0, 0,-1,-1,},};
static struct enum_fields *_sym249[] = { &_sym36, 0,  (struct enum_fields *) -1,};

// Instruction nop
static adl_instr_attrs _sym251 = { ((uint64_t)(1ULL << instr_ippu)) , 0 };

// Instruction nop
static struct adl_operand _sym250_operands[] = { {30, 0, 0, 0, 29, 0ull, 0x1ull, 0ull, 0, 0, 0, 0,-1,-1,},{31, 1, 0, 0, 30, 0ull, 0x1ull, 0ull, 0, 0, 0, 0,-1,-1,},{29, 2, 0, 0, 31, 0ull, 0x1ull, 0ull, 0, 0, 0, 0,-1,-1,},};
static struct enum_fields *_sym252[] = {  (struct enum_fields *) -1,};

// Instruction rts
static adl_instr_attrs _sym254 = { ((uint64_t)(1ULL << instr_ippu)) , 0 };

// Shorthand:  rts -> jmp;
static struct adl_operand _sym255_operands[] = { {30, 0, 0, 0, 29, 0ull, 0x1ull, 0ull, 0, 0, 0, 0,-1,-1,},{31, 1, 0, 0, 30, 0ull, 0x1ull, 0ull, 0, 0, 0, 0,-1,-1,},{29, 2, 0, 0, 31, 0ull, 0x1ull, 0ull, 0, 0, 0, 0,-1,-1,},};

// Instruction rts
static struct adl_operand _sym253_operands[] = { {82, 0, 0, 0, 31, 0ull, 0x1ull, 0ull, 0, 0, 0, 0,-1,-1,},{83, 1, 0, 0, 31, 0ull, 0x1ull, 0ull, 0, 0, 0, 0,-1,-1,},{81, 2, 0, 0, 31, 0ull, 0x1ull, 0ull, 0, 0, 0, 0,-1,-1,},};
static struct adl_opcode _sym256[] = {
  // jmp    (0)
  { "jmp", 4, 32, 32,  0x3, { 0x10f00000,},0, "", 0, 3, 3, 0, 0, _sym255_operands,0,0,0, 0,&_sym254,0,{}, 0,0,0,0,0,-1, },
};

static struct enum_fields *_sym257[] = {  (struct enum_fields *) -1,};

// Instruction rts_nz
static adl_instr_attrs _sym259 = { ((uint64_t)(1ULL << instr_ippu)) , 0 };

// Shorthand:  rts_nz -> jmp;
static struct adl_operand _sym260_operands[] = { {30, 0, 0, 0, 29, 0ull, 0x1ull, 0ull, 0, 0, 0, 0,-1,-1,},{31, 1, 0, 0, 30, 0ull, 0x1ull, 0ull, 0, 0, 0, 0,-1,-1,},{29, 2, 0, 0, 31, 0ull, 0x1ull, 0ull, 0, 0, 0, 0,-1,-1,},};

// Instruction rts_nz
static struct adl_operand _sym258_operands[] = { {82, 0, 0, 0, 31, 0ull, 0x1ull, 0ull, 0, 0, 0, 0,-1,-1,},{83, 1, 0, 0, 31, 0ull, 0x1ull, 0ull, 0, 0, 0, 0,-1,-1,},{81, 2, 0, 0, 31, 0ull, 0x1ull, 0ull, 0, 0, 0, 0,-1,-1,},};
static struct adl_opcode _sym261[] = {
  // jmp    (0)
  { "jmp", 4, 32, 32,  0x3, { 0x10e00000,},0, "", 0, 3, 3, 0, 0, _sym260_operands,0,0,0, 0,&_sym259,0,{}, 0,0,0,0,0,-1, },
};

static struct enum_fields *_sym262[] = {  (struct enum_fields *) -1,};

// Instruction rts_z
static adl_instr_attrs _sym264 = { ((uint64_t)(1ULL << instr_ippu)) , 0 };

// Shorthand:  rts_z -> jmp;
static struct adl_operand _sym265_operands[] = { {30, 0, 0, 0, 29, 0ull, 0x1ull, 0ull, 0, 0, 0, 0,-1,-1,},{31, 1, 0, 0, 30, 0ull, 0x1ull, 0ull, 0, 0, 0, 0,-1,-1,},{29, 2, 0, 0, 31, 0ull, 0x1ull, 0ull, 0, 0, 0, 0,-1,-1,},};

// Instruction rts_z
static struct adl_operand _sym263_operands[] = { {82, 0, 0, 0, 31, 0ull, 0x1ull, 0ull, 0, 0, 0, 0,-1,-1,},{83, 1, 0, 0, 31, 0ull, 0x1ull, 0ull, 0, 0, 0, 0,-1,-1,},{81, 2, 0, 0, 31, 0ull, 0x1ull, 0ull, 0, 0, 0, 0,-1,-1,},};
static struct adl_opcode _sym266[] = {
  // jmp    (0)
  { "jmp", 4, 32, 32,  0x3, { 0x10d00000,},0, "", 0, 3, 3, 0, 0, _sym265_operands,0,0,0, 0,&_sym264,0,{}, 0,0,0,0,0,-1, },
};

static struct enum_fields *_sym267[] = {  (struct enum_fields *) -1,};

// Instruction set_br_aX_mode
static adl_instr_attrs _sym269 = { ((uint64_t)(1ULL << instr_ippu)) , 0 };

// Instruction set_br_aX_mode
static struct adl_operand _sym268_operands[] = { {0, 0, ADL_REGISTER, 0, 11, 0ull, 0x1ull, 0ull, 0, 0, 0, 0,-1,-1,},{3, 1, 0, 0, 24, 0ull, 0xfull, 0ull, 0, 0, 0, 0,-1,-1,},{30, 2, 0, 0, 29, 0ull, 0x1ull, 0ull, 0, 0, 0, 0,-1,-1,},{31, 3, 0, 0, 30, 0ull, 0x1ull, 0ull, 0, 0, 0, 0,-1,-1,},{29, 4, 0, 0, 31, 0ull, 0x1ull, 0ull, 0, 0, 0, 0,-1,-1,},};
static struct enum_fields *_sym270[] = { &_sym2, &_sym14,  (struct enum_fields *) -1,};

// Instruction set_dr_config
static adl_instr_attrs _sym272 = { ((uint64_t)(1ULL << instr_ippu)) , 0 };

// Instruction set_dr_config
static struct adl_operand _sym271_operands[] = { {5, 0, 0, 0, 8, 0ull, 0xfull, 0ull, 0, 0, 0, 0,-1,-1,},{17, 1, 0, 0, 13, 0ull, 0x7ull, 0ull, 0, 0, 0, 0,-1,-1,},{10, 2, 0, 0, 17, 0ull, 0x7ffull, 0ull, 0, 0, 0, 0,-1,-1,},{30, 3, 0, 0, 29, 0ull, 0x1ull, 0ull, 0, 0, 0, 0,-1,-1,},{31, 4, 0, 0, 30, 0ull, 0x1ull, 0ull, 0, 0, 0, 0,-1,-1,},{29, 5, 0, 0, 31, 0ull, 0x1ull, 0ull, 0, 0, 0, 0,-1,-1,},};
static struct enum_fields *_sym273[] = { &_sym24, 0, 0,  (struct enum_fields *) -1,};

// Instruction set_dr_radix
static adl_instr_attrs _sym275 = { ((uint64_t)(1ULL << instr_ippu)) , 0 };

// Instruction set_dr_radix
static struct adl_operand _sym274_operands[] = { {5, 0, 0, 0, 8, 0ull, 0xfull, 0ull, 0, 0, 0, 0,-1,-1,},{34, 1, 0, 0, 13, 0ull, 0x7ull, 0ull, 0, 0, 0, 0,-1,-1,},{10, 2, 0, 0, 17, 0ull, 0x7ffull, 0ull, 0, 0, 0, 0,-1,-1,},{30, 3, 0, 0, 29, 0ull, 0x1ull, 0ull, 0, 0, 0, 0,-1,-1,},{31, 4, 0, 0, 30, 0ull, 0x1ull, 0ull, 0, 0, 0, 0,-1,-1,},{29, 5, 0, 0, 31, 0ull, 0x1ull, 0ull, 0, 0, 0, 0,-1,-1,},};
static struct enum_fields *_sym276[] = { &_sym24, 0, 0,  (struct enum_fields *) -1,};

// Instruction set_loop
static adl_instr_attrs _sym278 = { ((uint64_t)(1ULL << instr_ippu)) , 0 };

// Instruction set_loop
static struct adl_operand _sym277_operands[] = { {28, 0, 0, 0, 5, 0ull, 0x1ull, 0ull, 0, 0, 0, 0,-1,-1,},{2, 1, ADL_REGISTER, 0, 6, 0ull, 0x3ull, 0ull, 0, 0, 0, 0,-1,-1,},{36, 2, 0, 0, 8, 0ull, 0x1ull, 0ull, 0, 0, 0, 0,-1,-1,},{20, 3, 0, 0, 20, 0ull, 0xffull, 0ull, 0, 0, 0, 0,-1,-1,},{30, 4, 0, 0, 29, 0ull, 0x1ull, 0ull, 0, 0, 0, 0,-1,-1,},{31, 5, 0, 0, 30, 0ull, 0x1ull, 0ull, 0, 0, 0, 0,-1,-1,},{29, 6, 0, 0, 31, 0ull, 0x1ull, 0ull, 0, 0, 0, 0,-1,-1,},};
static struct enum_fields *_sym279[] = { &_sym62, &_sym12, 0, 0, 0, 0, 0,  (struct enum_fields *) -1,};

// Instruction set_loop_Iu1_Iu8
static adl_instr_attrs _sym281 = { ((uint64_t)(1ULL << instr_ippu)) , 0 };

// Shorthand:  set_loop_Iu1_Iu8 -> set_loop;

static bfd_uint64_t _sym283_modifier (const expressionS *operands, unsigned __cia ATTRIBUTE_UNUSED) { return (IM9_1_256_checker((operands[1].X_add_number),FALSE)) - 1; }
static struct adl_operand _sym282_operands[] = { {36, 0, 0, 0, 8, 0ull, 0x1ull, 0ull, 0, 0, 0, 0,-1,-1,},{20, 0, 0, 0, 0, 0, 0, 0, _sym283_modifier, 0, 0,0, -1,-1,},{30, 2, 0, 0, 29, 0ull, 0x1ull, 0ull, 0, 0, 0, 0,-1,-1,},{31, 3, 0, 0, 30, 0ull, 0x1ull, 0ull, 0, 0, 0, 0,-1,-1,},{29, 4, 0, 0, 31, 0ull, 0x1ull, 0ull, 0, 0, 0, 0,-1,-1,},};

// Instruction set_loop_Iu1_Iu8
static struct adl_operand _sym280_operands[] = { {88, 0, 0, 0, 31, 0ull, 0x1ull, 0ull, 0, 0, 0, 0,-1,-1,},{73, 1, 0, 0, 31, 0ull, 0x1ffull, 0ull, 0, 0,IM9_1_256_checker, 0,-1,-1,},{82, 2, 0, 0, 31, 0ull, 0x1ull, 0ull, 0, 0, 0, 0,-1,-1,},{83, 3, 0, 0, 31, 0ull, 0x1ull, 0ull, 0, 0, 0, 0,-1,-1,},{81, 4, 0, 0, 31, 0ull, 0x1ull, 0ull, 0, 0, 0, 0,-1,-1,},};
static struct adl_opcode _sym284[] = {
  // set_loop    (0)
  { "set_loop", 4, 32, 32,  0x3, { 0x18000000,},0, "", 0, 5, 5, 0, 0, _sym282_operands,0,0,0, 0,&_sym281,0,{}, 0,0,0,0,0,-1, },
};

static struct enum_fields *_sym285[] = { 0, 0,  (struct enum_fields *) -1,};

// Instruction set_loop_Iu1_asX
static adl_instr_attrs _sym287 = { ((uint64_t)(1ULL << instr_ippu)) , 0 };

// Shorthand:  set_loop_Iu1_asX -> set_loop;
static struct adl_operand _sym288_operands[] = { {2, 1, ADL_REGISTER, 0, 6, 0ull, 0x3ull, 0ull, 0, 0, 0, 0,-1,-1,},{36, 0, 0, 0, 8, 0ull, 0x1ull, 0ull, 0, 0, 0, 0,-1,-1,},{30, 2, 0, 0, 29, 0ull, 0x1ull, 0ull, 0, 0, 0, 0,-1,-1,},{31, 3, 0, 0, 30, 0ull, 0x1ull, 0ull, 0, 0, 0, 0,-1,-1,},{29, 4, 0, 0, 31, 0ull, 0x1ull, 0ull, 0, 0, 0, 0,-1,-1,},};

// Instruction set_loop_Iu1_asX
static struct adl_operand _sym286_operands[] = { {88, 0, 0, 0, 31, 0ull, 0x1ull, 0ull, 0, 0, 0, 0,-1,-1,},{42, 1, ADL_REGISTER, 0, 31, 0ull, 0x3ull, 0ull, 0, 0, 0, 0,-1,-1,},{82, 2, 0, 0, 31, 0ull, 0x1ull, 0ull, 0, 0, 0, 0,-1,-1,},{83, 3, 0, 0, 31, 0ull, 0x1ull, 0ull, 0, 0, 0, 0,-1,-1,},{81, 4, 0, 0, 31, 0ull, 0x1ull, 0ull, 0, 0, 0, 0,-1,-1,},};
static struct adl_opcode _sym289[] = {
  // set_loop    (0)
  { "set_loop", 4, 32, 32,  0x3, { 0x1c000000,},0, "", 0, 5, 5, 0, 0, _sym288_operands,0,0,0, 0,&_sym287,0,{}, 0,0,0,0,0,-1, },
};

static struct enum_fields *_sym290[] = { 0, &_sym6,  (struct enum_fields *) -1,};

// Instruction set_mask_all
static adl_instr_attrs _sym292 = { ((uint64_t)(1ULL << instr_ippu)) , 0 };

// Instruction set_mask_all
static struct adl_operand _sym291_operands[] = { {30, 0, 0, 0, 29, 0ull, 0x1ull, 0ull, 0, 0, 0, 0,-1,-1,},{31, 1, 0, 0, 30, 0ull, 0x1ull, 0ull, 0, 0, 0, 0,-1,-1,},{29, 2, 0, 0, 31, 0ull, 0x1ull, 0ull, 0, 0, 0, 0,-1,-1,},};
static struct enum_fields *_sym293[] = {  (struct enum_fields *) -1,};

// Instruction set_mask_bit
static adl_instr_attrs _sym295 = { ((uint64_t)(1ULL << instr_ippu)) , 0 };

// Instruction set_mask_bit
static struct adl_operand _sym294_operands[] = { {11, 0, 0, 0, 16, 0ull, 0xfffull, 0ull, 0, 0, 0, 0,-1,-1,},{30, 1, 0, 0, 29, 0ull, 0x1ull, 0ull, 0, 0, 0, 0,-1,-1,},{31, 2, 0, 0, 30, 0ull, 0x1ull, 0ull, 0, 0, 0, 0,-1,-1,},{29, 3, 0, 0, 31, 0ull, 0x1ull, 0ull, 0, 0, 0, 0,-1,-1,},};
static struct enum_fields *_sym296[] = { 0,  (struct enum_fields *) -1,};

// Instruction set_range_aY_asA_Iu17
static adl_instr_attrs _sym298 = { ((uint64_t)(1ULL << instr_ippu)) , 0 };

// Instruction set_range_aY_asA_Iu17
static struct adl_operand _sym297_operands[] = { {2, 0, ADL_REGISTER, 0, 6, 0ull, 0x3ull, 0ull, 0, 0, 0, 0,-1,-1,},{0, 1, ADL_REGISTER, 0, 11, 0ull, 0x1ull, 0ull, 0, 0, 0, 0,-1,-1,},{15, 2, 0, 0, 12, 0ull, 0x1ffffull, 0ull, 0, 0, 0, 0,-1,-1,},{30, 3, 0, 0, 29, 0ull, 0x1ull, 0ull, 0, 0, 0, 0,-1,-1,},{31, 4, 0, 0, 30, 0ull, 0x1ull, 0ull, 0, 0, 0, 0,-1,-1,},{29, 5, 0, 0, 31, 0ull, 0x1ull, 0ull, 0, 0, 0, 0,-1,-1,},};
static struct enum_fields *_sym299[] = { &_sym12, &_sym4, 0, 0, 0, 0,  (struct enum_fields *) -1,};

// Instruction set_range_aY_asA_Iu17_syn
static adl_instr_attrs _sym301 = { ((uint64_t)(1ULL << instr_ippu)) , 0 };

// Shorthand:  set_range_aY_asA_Iu17_syn -> set_range_aY_asA_Iu17;

static bfd_uint64_t _sym303_modifier (const expressionS *operands, unsigned __cia ATTRIBUTE_UNUSED) { return (IM18_1_131072_checker((operands[2].X_add_number),FALSE)) - 1; }
static struct adl_operand _sym302_operands[] = { {2, 1, ADL_REGISTER, 0, 6, 0ull, 0x3ull, 0ull, 0, 0, 0, 0,-1,-1,},{0, 0, ADL_REGISTER, 0, 11, 0ull, 0x1ull, 0ull, 0, 0, 0, 0,-1,-1,},{15, 0, 0, 0, 0, 0, 0, 0, _sym303_modifier, 0, 0,0, -1,-1,},{30, 3, 0, 0, 29, 0ull, 0x1ull, 0ull, 0, 0, 0, 0,-1,-1,},{31, 4, 0, 0, 30, 0ull, 0x1ull, 0ull, 0, 0, 0, 0,-1,-1,},{29, 5, 0, 0, 31, 0ull, 0x1ull, 0ull, 0, 0, 0, 0,-1,-1,},};

// Instruction set_range_aY_asA_Iu17_syn
static struct adl_operand _sym300_operands[] = { {41, 0, ADL_REGISTER, 0, 31, 0ull, 0x1ull, 0ull, 0, 0, 0, 0,-1,-1,},{42, 1, ADL_REGISTER, 0, 31, 0ull, 0x3ull, 0ull, 0, 0, 0, 0,-1,-1,},{65, 2, 0, 0, 31, 0ull, 0x3ffffull, 0ull, 0, 0,IM18_1_131072_checker, 0,-1,-1,},{82, 3, 0, 0, 31, 0ull, 0x1ull, 0ull, 0, 0, 0, 0,-1,-1,},{83, 4, 0, 0, 31, 0ull, 0x1ull, 0ull, 0, 0, 0, 0,-1,-1,},{81, 5, 0, 0, 31, 0ull, 0x1ull, 0ull, 0, 0, 0, 0,-1,-1,},};
static struct adl_opcode _sym304[] = {
  // set_range_aY_asA_Iu17    (0)
  { "set_range_aY_asA_Iu17", 4, 32, 32,  0x3, { 0x68000000,},0, "", 0, 6, 6, 0, 0, _sym302_operands,0,0,0, 0,&_sym301,0,{}, 0,0,0,0,0,-1, },
};

static struct enum_fields *_sym305[] = { &_sym2, &_sym6, 0,  (struct enum_fields *) -1,};

// Instruction set_range_aY_asA_asB
static adl_instr_attrs _sym307 = { ((uint64_t)(1ULL << instr_ippu)) , 0 };

// Instruction set_range_aY_asA_asB
static struct adl_operand _sym306_operands[] = { {0, 0, ADL_REGISTER, 0, 11, 0ull, 0x1ull, 0ull, 0, 0, 0, 0,-1,-1,},{2, 1, ADL_REGISTER, 0, 6, 0ull, 0x3ull, 0ull, 0, 0, 0, 0,-1,-1,},{1, 2, ADL_REGISTER, 0, 8, 0ull, 0x3ull, 0ull, 0, 0, 0, 0,-1,-1,},{30, 3, 0, 0, 29, 0ull, 0x1ull, 0ull, 0, 0, 0, 0,-1,-1,},{31, 4, 0, 0, 30, 0ull, 0x1ull, 0ull, 0, 0, 0, 0,-1,-1,},{29, 5, 0, 0, 31, 0ull, 0x1ull, 0ull, 0, 0, 0, 0,-1,-1,},};
static struct enum_fields *_sym308[] = { &_sym2, &_sym6, &_sym8,  (struct enum_fields *) -1,};

// Instruction st_aX_Is5
static adl_instr_attrs _sym310 = { ((uint64_t)(1ULL << instr_ippu)) , 0 };

// Instruction st_aX_Is5
static struct adl_operand _sym309_operands[] = { {38, 0, 0, 0, 3, 0ull, 0x7ull, 0ull, 0, 0, 0, 0,-1,-1,},{18, 1, ADL_SIGNED, 0, 6, 18446744073709551601ull-1, 15ull, 0ull, 0, 0, 0, 0,-1,-1,},{0, 2, ADL_REGISTER, 0, 11, 0ull, 0x1ull, 0ull, 0, 0, 0, 0,-1,-1,},{23, 3, 0, 0, 12, 0ull, 0x1ull, 0ull, 0, 0, 0, 0,-1,-1,},{9, 4, ADL_SIGNED, 0, 13, 18446744073709551613ull-1, 3ull, 0ull, 0, 0, 0, 0,-1,-1,},{35, 5, ADL_SIGNED, 0, 16, 18446744073709551361ull-1, 255ull, 0ull, 0, 0, 0, 0,-1,-1,},{39, 6, 0, 0, 26, 0ull, 0x7ull, 0ull, 0, 0, 0, 0,-1,-1,},{30, 7, 0, 0, 29, 0ull, 0x1ull, 0ull, 0, 0, 0, 0,-1,-1,},{31, 8, 0, 0, 30, 0ull, 0x1ull, 0ull, 0, 0, 0, 0,-1,-1,},{29, 9, 0, 0, 31, 0ull, 0x1ull, 0ull, 0, 0, 0, 0,-1,-1,},};
static struct enum_fields *_sym311[] = { &_sym78, 0, &_sym4, &_sym44, 0, 0, &_sym82, 0, 0, 0,  (struct enum_fields *) -1,};

// Instruction st_aX_Is5_minus
static adl_instr_attrs _sym313 = { ((uint64_t)(1ULL << instr_ippu)) , 0 };

// Shorthand:  st_aX_Is5_minus -> st_aX_Is5;

static bfd_uint64_t _sym315_modifier (const expressionS *operands, unsigned __cia ATTRIBUTE_UNUSED) { return - (IM5n_checker((operands[2].X_add_number),FALSE)); }
static struct adl_operand _sym314_operands[] = { {38, 4, 0, 0, 3, 0ull, 0x7ull, 0ull, 0, 0, 0, 0,-1,-1,},{18, 0, 0, 0, 0, 0, 0, 0, _sym315_modifier, 0, 0,0, -1,-1,},{0, 1, ADL_REGISTER, 0, 11, 0ull, 0x1ull, 0ull, 0, 0, 0, 0,-1,-1,},{23, 0, 0, 0, 12, 0ull, 0x1ull, 0ull, 0, 0, 0, 0,-1,-1,},{9, 3, ADL_SIGNED, 0, 13, 18446744073709551613ull-1, 3ull, 0ull, 0, 0, 0, 0,-1,-1,},{35, 5, ADL_SIGNED, 0, 16, 18446744073709551361ull-1, 255ull, 0ull, 0, 0, 0, 0,-1,-1,},{39, 6, 0, 0, 26, 0ull, 0x7ull, 0ull, 0, 0, 0, 0,-1,-1,},{30, 7, 0, 0, 29, 0ull, 0x1ull, 0ull, 0, 0, 0, 0,-1,-1,},{31, 8, 0, 0, 30, 0ull, 0x1ull, 0ull, 0, 0, 0, 0,-1,-1,},{29, 9, 0, 0, 31, 0ull, 0x1ull, 0ull, 0, 0, 0, 0,-1,-1,},};

// Instruction st_aX_Is5_minus
static struct adl_operand _sym312_operands[] = { {76, 0, 0, 0, 31, 0ull, 0x1ull, 0ull, 0, 0, 0, 0,-1,-1,},{41, 1, ADL_REGISTER, 0, 31, 0ull, 0x1ull, 0ull, 0, 0, 0, 0,-1,-1,},{67, 2, 0, 0, 31, 0ull, 0x1full, 0ull, 0, 0,IM5n_checker, 0,-1,-1,},{53, 3, ADL_SIGNED, 0, 31, 18446744073709551613ull-1, 3ull, 0ull, 0, 0, 0, 0,-1,-1,},{90, 4, 0, 0, 31, 0ull, 0x7ull, 0ull, 0, 0, 0, 0,-1,-1,},{87, 5, ADL_SIGNED, 0, 31, 18446744073709551361ull-1, 255ull, 0ull, 0, 0, 0, 0,-1,-1,},{91, 6, 0, 0, 31, 0ull, 0x7ull, 0ull, 0, 0, 0, 0,-1,-1,},{82, 7, 0, 0, 31, 0ull, 0x1ull, 0ull, 0, 0, 0, 0,-1,-1,},{83, 8, 0, 0, 31, 0ull, 0x1ull, 0ull, 0, 0, 0, 0,-1,-1,},{81, 9, 0, 0, 31, 0ull, 0x1ull, 0ull, 0, 0, 0, 0,-1,-1,},};
static struct adl_opcode _sym316[] = {
  // st_aX_Is5    (0)
  { "st_aX_Is5", 4, 32, 32,  0x3, { 0xa0000040,},0, "", 0, 10, 10, 0, 1, _sym314_operands,0,0,0, 0,&_sym313,0,{}, 0,0,0,0,0,-1, },
};

static struct enum_fields *_sym317[] = { &_sym42, &_sym2, 0, 0, &_sym76, 0, &_sym80,  (struct enum_fields *) -1,};

// Instruction st_aX_Is5_plus
static adl_instr_attrs _sym319 = { ((uint64_t)(1ULL << instr_ippu)) , 0 };

// Shorthand:  st_aX_Is5_plus -> st_aX_Is5;
static struct adl_operand _sym320_operands[] = { {38, 4, 0, 0, 3, 0ull, 0x7ull, 0ull, 0, 0, 0, 0,-1,-1,},{18, 2, ADL_SIGNED, 0, 6, 18446744073709551601ull-1, 15ull, 0ull, 0, 0, 0, 0,-1,-1,},{0, 1, ADL_REGISTER, 0, 11, 0ull, 0x1ull, 0ull, 0, 0, 0, 0,-1,-1,},{23, 0, 0, 0, 12, 0ull, 0x1ull, 0ull, 0, 0, 0, 0,-1,-1,},{9, 3, ADL_SIGNED, 0, 13, 18446744073709551613ull-1, 3ull, 0ull, 0, 0, 0, 0,-1,-1,},{35, 5, ADL_SIGNED, 0, 16, 18446744073709551361ull-1, 255ull, 0ull, 0, 0, 0, 0,-1,-1,},{39, 6, 0, 0, 26, 0ull, 0x7ull, 0ull, 0, 0, 0, 0,-1,-1,},{30, 7, 0, 0, 29, 0ull, 0x1ull, 0ull, 0, 0, 0, 0,-1,-1,},{31, 8, 0, 0, 30, 0ull, 0x1ull, 0ull, 0, 0, 0, 0,-1,-1,},{29, 9, 0, 0, 31, 0ull, 0x1ull, 0ull, 0, 0, 0, 0,-1,-1,},};

// Instruction st_aX_Is5_plus
static struct adl_operand _sym318_operands[] = { {76, 0, 0, 0, 31, 0ull, 0x1ull, 0ull, 0, 0, 0, 0,-1,-1,},{41, 1, ADL_REGISTER, 0, 31, 0ull, 0x1ull, 0ull, 0, 0, 0, 0,-1,-1,},{68, 2, ADL_SIGNED, 0, 31, 18446744073709551601ull-1, 15ull, 0ull, 0, 0, 0, 0,-1,-1,},{53, 3, ADL_SIGNED, 0, 31, 18446744073709551613ull-1, 3ull, 0ull, 0, 0, 0, 0,-1,-1,},{90, 4, 0, 0, 31, 0ull, 0x7ull, 0ull, 0, 0, 0, 0,-1,-1,},{87, 5, ADL_SIGNED, 0, 31, 18446744073709551361ull-1, 255ull, 0ull, 0, 0, 0, 0,-1,-1,},{91, 6, 0, 0, 31, 0ull, 0x7ull, 0ull, 0, 0, 0, 0,-1,-1,},{82, 7, 0, 0, 31, 0ull, 0x1ull, 0ull, 0, 0, 0, 0,-1,-1,},{83, 8, 0, 0, 31, 0ull, 0x1ull, 0ull, 0, 0, 0, 0,-1,-1,},{81, 9, 0, 0, 31, 0ull, 0x1ull, 0ull, 0, 0, 0, 0,-1,-1,},};
static struct adl_opcode _sym321[] = {
  // st_aX_Is5    (0)
  { "st_aX_Is5", 4, 32, 32,  0x3, { 0xa0000040,},0, "", 0, 10, 10, 0, 1, _sym320_operands,0,0,0, 0,&_sym319,0,{}, 0,0,0,0,0,-1, },
};

static struct enum_fields *_sym322[] = { &_sym42, &_sym2, 0, 0, &_sym76, 0, &_sym80,  (struct enum_fields *) -1,};

// Instruction st_aX_Is8
static adl_instr_attrs _sym324 = { ((uint64_t)(1ULL << instr_ippu)) , 0 };

// Instruction st_aX_Is8
static struct adl_operand _sym323_operands[] = { {21, 0, ADL_SIGNED, 0, 3, 18446744073709551489ull-1, 127ull, 0ull, 0, 0, 0, 0,-1,-1,},{0, 1, ADL_REGISTER, 0, 11, 0ull, 0x1ull, 0ull, 0, 0, 0, 0,-1,-1,},{23, 2, 0, 0, 12, 0ull, 0x1ull, 0ull, 0, 0, 0, 0,-1,-1,},{9, 3, ADL_SIGNED, 0, 13, 18446744073709551613ull-1, 3ull, 0ull, 0, 0, 0, 0,-1,-1,},{35, 4, ADL_SIGNED, 0, 16, 18446744073709551361ull-1, 255ull, 0ull, 0, 0, 0, 0,-1,-1,},{39, 5, 0, 0, 26, 0ull, 0x7ull, 0ull, 0, 0, 0, 0,-1,-1,},{30, 6, 0, 0, 29, 0ull, 0x1ull, 0ull, 0, 0, 0, 0,-1,-1,},{31, 7, 0, 0, 30, 0ull, 0x1ull, 0ull, 0, 0, 0, 0,-1,-1,},{29, 8, 0, 0, 31, 0ull, 0x1ull, 0ull, 0, 0, 0, 0,-1,-1,},};
static struct enum_fields *_sym325[] = { 0, &_sym4, &_sym44, 0, 0, &_sym82, 0, 0, 0,  (struct enum_fields *) -1,};

// Instruction st_aX_Is8_minus
static adl_instr_attrs _sym327 = { ((uint64_t)(1ULL << instr_ippu)) , 0 };

// Shorthand:  st_aX_Is8_minus -> st_aX_Is8;

static bfd_uint64_t _sym329_modifier (const expressionS *operands, unsigned __cia ATTRIBUTE_UNUSED) { return - (IM8n_checker((operands[2].X_add_number),FALSE)); }
static struct adl_operand _sym328_operands[] = { {21, 0, 0, 0, 0, 0, 0, 0, _sym329_modifier, 0, 0,0, -1,-1,},{0, 1, ADL_REGISTER, 0, 11, 0ull, 0x1ull, 0ull, 0, 0, 0, 0,-1,-1,},{23, 0, 0, 0, 12, 0ull, 0x1ull, 0ull, 0, 0, 0, 0,-1,-1,},{9, 3, ADL_SIGNED, 0, 13, 18446744073709551613ull-1, 3ull, 0ull, 0, 0, 0, 0,-1,-1,},{35, 4, ADL_SIGNED, 0, 16, 18446744073709551361ull-1, 255ull, 0ull, 0, 0, 0, 0,-1,-1,},{39, 5, 0, 0, 26, 0ull, 0x7ull, 0ull, 0, 0, 0, 0,-1,-1,},{30, 6, 0, 0, 29, 0ull, 0x1ull, 0ull, 0, 0, 0, 0,-1,-1,},{31, 7, 0, 0, 30, 0ull, 0x1ull, 0ull, 0, 0, 0, 0,-1,-1,},{29, 8, 0, 0, 31, 0ull, 0x1ull, 0ull, 0, 0, 0, 0,-1,-1,},};

// Instruction st_aX_Is8_minus
static struct adl_operand _sym326_operands[] = { {76, 0, 0, 0, 31, 0ull, 0x1ull, 0ull, 0, 0, 0, 0,-1,-1,},{41, 1, ADL_REGISTER, 0, 31, 0ull, 0x1ull, 0ull, 0, 0, 0, 0,-1,-1,},{71, 2, 0, 0, 31, 0ull, 0xffull, 0ull, 0, 0,IM8n_checker, 0,-1,-1,},{53, 3, ADL_SIGNED, 0, 31, 18446744073709551613ull-1, 3ull, 0ull, 0, 0, 0, 0,-1,-1,},{87, 4, ADL_SIGNED, 0, 31, 18446744073709551361ull-1, 255ull, 0ull, 0, 0, 0, 0,-1,-1,},{91, 5, 0, 0, 31, 0ull, 0x7ull, 0ull, 0, 0, 0, 0,-1,-1,},{82, 6, 0, 0, 31, 0ull, 0x1ull, 0ull, 0, 0, 0, 0,-1,-1,},{83, 7, 0, 0, 31, 0ull, 0x1ull, 0ull, 0, 0, 0, 0,-1,-1,},{81, 8, 0, 0, 31, 0ull, 0x1ull, 0ull, 0, 0, 0, 0,-1,-1,},};
static struct adl_opcode _sym330[] = {
  // st_aX_Is8    (0)
  { "st_aX_Is8", 4, 32, 32,  0x3, { 0xa0000000,},0, "", 0, 9, 9, 0, 1, _sym328_operands,0,0,0, 0,&_sym327,0,{}, 0,0,0,0,0,-1, },
};

static struct enum_fields *_sym331[] = { &_sym42, &_sym2, 0, 0, 0, &_sym80,  (struct enum_fields *) -1,};

// Instruction st_aX_Is8_plus
static adl_instr_attrs _sym333 = { ((uint64_t)(1ULL << instr_ippu)) , 0 };

// Shorthand:  st_aX_Is8_plus -> st_aX_Is8;
static struct adl_operand _sym334_operands[] = { {21, 2, ADL_SIGNED, 0, 3, 18446744073709551489ull-1, 127ull, 0ull, 0, 0, 0, 0,-1,-1,},{0, 1, ADL_REGISTER, 0, 11, 0ull, 0x1ull, 0ull, 0, 0, 0, 0,-1,-1,},{23, 0, 0, 0, 12, 0ull, 0x1ull, 0ull, 0, 0, 0, 0,-1,-1,},{9, 3, ADL_SIGNED, 0, 13, 18446744073709551613ull-1, 3ull, 0ull, 0, 0, 0, 0,-1,-1,},{35, 4, ADL_SIGNED, 0, 16, 18446744073709551361ull-1, 255ull, 0ull, 0, 0, 0, 0,-1,-1,},{39, 5, 0, 0, 26, 0ull, 0x7ull, 0ull, 0, 0, 0, 0,-1,-1,},{30, 6, 0, 0, 29, 0ull, 0x1ull, 0ull, 0, 0, 0, 0,-1,-1,},{31, 7, 0, 0, 30, 0ull, 0x1ull, 0ull, 0, 0, 0, 0,-1,-1,},{29, 8, 0, 0, 31, 0ull, 0x1ull, 0ull, 0, 0, 0, 0,-1,-1,},};

// Instruction st_aX_Is8_plus
static struct adl_operand _sym332_operands[] = { {76, 0, 0, 0, 31, 0ull, 0x1ull, 0ull, 0, 0, 0, 0,-1,-1,},{41, 1, ADL_REGISTER, 0, 31, 0ull, 0x1ull, 0ull, 0, 0, 0, 0,-1,-1,},{72, 2, ADL_SIGNED, 0, 31, 18446744073709551489ull-1, 127ull, 0ull, 0, 0, 0, 0,-1,-1,},{53, 3, ADL_SIGNED, 0, 31, 18446744073709551613ull-1, 3ull, 0ull, 0, 0, 0, 0,-1,-1,},{87, 4, ADL_SIGNED, 0, 31, 18446744073709551361ull-1, 255ull, 0ull, 0, 0, 0, 0,-1,-1,},{91, 5, 0, 0, 31, 0ull, 0x7ull, 0ull, 0, 0, 0, 0,-1,-1,},{82, 6, 0, 0, 31, 0ull, 0x1ull, 0ull, 0, 0, 0, 0,-1,-1,},{83, 7, 0, 0, 31, 0ull, 0x1ull, 0ull, 0, 0, 0, 0,-1,-1,},{81, 8, 0, 0, 31, 0ull, 0x1ull, 0ull, 0, 0, 0, 0,-1,-1,},};
static struct adl_opcode _sym335[] = {
  // st_aX_Is8    (0)
  { "st_aX_Is8", 4, 32, 32,  0x3, { 0xa0000000,},0, "", 0, 9, 9, 0, 1, _sym334_operands,0,0,0, 0,&_sym333,0,{}, 0,0,0,0,0,-1, },
};

static struct enum_fields *_sym336[] = { &_sym42, &_sym2, 0, 0, 0, &_sym80,  (struct enum_fields *) -1,};

// Instruction st_aX_mX
static adl_instr_attrs _sym338 = { ((uint64_t)(1ULL << instr_ippu)) , 0 };

// Instruction st_aX_mX
static struct adl_operand _sym337_operands[] = { {23, 0, 0, 0, 12, 0ull, 0x1ull, 0ull, 0, 0, 0, 0,-1,-1,},{0, 1, ADL_REGISTER, 0, 11, 0ull, 0x1ull, 0ull, 0, 0, 0, 0,-1,-1,},{33, 2, 0, 0, 8, 0ull, 0x1ull, 0ull, 0, 0, 0, 0,-1,-1,},{32, 3, ADL_REGISTER, 0, 9, 0ull, 0x1ull, 0ull, 0, 0, 0, 0,-1,-1,},{9, 4, ADL_SIGNED, 0, 13, 18446744073709551613ull-1, 3ull, 0ull, 0, 0, 0, 0,-1,-1,},{38, 5, 0, 0, 3, 0ull, 0x7ull, 0ull, 0, 0, 0, 0,-1,-1,},{35, 6, ADL_SIGNED, 0, 16, 18446744073709551361ull-1, 255ull, 0ull, 0, 0, 0, 0,-1,-1,},{39, 7, 0, 0, 26, 0ull, 0x7ull, 0ull, 0, 0, 0, 0,-1,-1,},{30, 8, 0, 0, 29, 0ull, 0x1ull, 0ull, 0, 0, 0, 0,-1,-1,},{31, 9, 0, 0, 30, 0ull, 0x1ull, 0ull, 0, 0, 0, 0,-1,-1,},{29, 10, 0, 0, 31, 0ull, 0x1ull, 0ull, 0, 0, 0, 0,-1,-1,},};
static struct enum_fields *_sym339[] = { &_sym42, &_sym2, &_sym68, &_sym64, 0, &_sym76, 0, &_sym80,  (struct enum_fields *) -1,};

// Instruction loop_begin_0
static adl_instr_attrs _sym341 = { ((uint64_t)(1ULL << instr_loop_begin)) , 0 };

// Instruction loop_begin_0
static struct adl_operand _sym340_operands[] = {  0 };
static struct enum_fields *_sym342[] = {  (struct enum_fields *) -1,};

// Instruction loop_begin_1
static adl_instr_attrs _sym344 = { ((uint64_t)(1ULL << instr_loop_begin)) | ((uint64_t)(1ULL << instr_loop_1)) , 0 };

// Instruction loop_begin_1
static struct adl_operand _sym343_operands[] = {  0 };
static struct enum_fields *_sym345[] = {  (struct enum_fields *) -1,};

// Instruction loop_end_0
static adl_instr_attrs _sym347 = { ((uint64_t)(1ULL << instr_loop_end)) , 0 };

// Instruction loop_end_0
static struct adl_operand _sym346_operands[] = {  0 };
static struct enum_fields *_sym348[] = {  (struct enum_fields *) -1,};

// Instruction loop_end_1
static adl_instr_attrs _sym350 = { ((uint64_t)(1ULL << instr_loop_end)) | ((uint64_t)(1ULL << instr_loop_1)) , 0 };

// Instruction loop_end_1
static struct adl_operand _sym349_operands[] = {  0 };
static struct enum_fields *_sym351[] = {  (struct enum_fields *) -1,};

// Instructions named 'clr'.
static struct adl_opcode _sym352[] = {
  // clr_Rx    (0)
  { "clr_Rx", 4, 32, 32,  0x0, { 0x4f000000,},_sym85, "^ *(r0|r1|r0, r1|r0,r1|r1, r0|r1,r0)$", 0, 4, 4, 0, 0, _sym83_operands,0,0,0, 0,&_sym84,0,{}, 0,0,0,0,0,0, },
};

// Instructions named 'clr.mask'.
static struct adl_opcode _sym353[] = {
  // clr_mask_bit    (0)
  { "clr_mask_bit", 4, 32, 32,  0x0, { 0x41000000,},_sym91, "^ *([^},[ ]+)$", 0, 4, 4, 0, 0, _sym89_operands,0,0,0, 0,&_sym90,0,{}, 0,0,0,0,0,0, },
};

// Instructions named 'clr.mask.all'.
static struct adl_opcode _sym354[] = {
  // clr_mask_all    (0)
  { "clr_mask_all", 4, 32, 32,  0x0, { 0x44000000,},_sym88, "$", 0, 3, 3, 0, 0, _sym86_operands,0,0,0, 0,&_sym87,0,{}, 0,0,0,0,0,-1, },
};

// Instructions named 'cmp.bit'.
static struct adl_opcode _sym355[] = {
  // cmp_bit    (0)
  { "cmp_bit", 4, 32, 32,  0x0, { 0x40000000,},_sym94, "^ *([^},[ ]+)$", 0, 4, 4, 0, 0, _sym92_operands,0,0,0, 0,&_sym93,0,{}, 0,0,0,0,0,0, },
};

// Instructions named 'done'.
static struct adl_opcode _sym356[] = {
  // done    (0)
  { "done", 4, 32, 32,  0x0, { 0x8000000,},_sym97, "$", 0, 3, 3, 0, 0, _sym95_operands,0,0,0, 0,&_sym96,0,{}, 0,0,0,0,0,-1, },
};

// Instructions named 'jmp'.
static struct adl_opcode _sym357[] = {
  // jmp    (0)
  { "jmp", 4, 32, 32,  0x0, { 0x10000000,},_sym100, "^ *([^} ,\t,]+),([^} ,\t,]+)$", 0, 5, 7, 0, 0, _sym98_operands,0,0,0, 0,&_sym99,0,{}, 0,0,0,0,0,0, },
// jmp_jmp    (1)
{ "jmp_jmp", 0, 32, 32,  0x0, { 0 },_sym105, "^ *([^},[ ]+)$", 0, 4, 4, 0, 0, _sym101_operands,_sym104,1,0, 0,&_sym102,0,{}, 0,0,0,0,0,1, },
};

// Instructions named 'jmp.nz'.
static struct adl_opcode _sym358[] = {
  // jmp_nz    (0)
  { "jmp_nz", 0, 32, 32,  0x0, { 0 },_sym110, "^ *([^},[ ]+)$", 0, 4, 4, 0, 0, _sym106_operands,_sym109,1,0, 0,&_sym107,0,{}, 0,0,0,0,0,0, },
};

// Instructions named 'jmp.z'.
static struct adl_opcode _sym359[] = {
  // jmp_z    (0)
  { "jmp_z", 0, 32, 32,  0x0, { 0 },_sym115, "^ *([^},[ ]+)$", 0, 4, 4, 0, 0, _sym111_operands,_sym114,1,0, 0,&_sym112,0,{}, 0,0,0,0,0,0, },
};

// Instructions named 'jsr'.
static struct adl_opcode _sym360[] = {
  // jsr    (0)
  { "jsr", 0, 32, 32,  0x0, { 0 },_sym120, "^ *([^},[ ]+)$", 0, 4, 4, 0, 0, _sym116_operands,_sym119,1,0, 0,&_sym117,0,{}, 0,0,0,0,0,0, },
};

// Instructions named 'jsr.nz'.
static struct adl_opcode _sym361[] = {
  // jsr_nz    (0)
  { "jsr_nz", 0, 32, 32,  0x0, { 0 },_sym125, "^ *([^},[ ]+)$", 0, 4, 4, 0, 0, _sym121_operands,_sym124,1,0, 0,&_sym122,0,{}, 0,0,0,0,0,0, },
};

// Instructions named 'jsr.z'.
static struct adl_opcode _sym362[] = {
  // jsr_z    (0)
  { "jsr_z", 0, 32, 32,  0x0, { 0 },_sym130, "^ *([^},[ ]+)$", 0, 4, 4, 0, 0, _sym126_operands,_sym129,1,0, 0,&_sym127,0,{}, 0,0,0,0,0,0, },
};

// Instructions named 'ld'.
static struct adl_opcode _sym363[] = {
  // ld_aX_mX    (0)
  { "ld_aX_mX", 4, 32, 32,  0x0, { 0x70000000,},_sym161, "^ *(\\.ippu|\\.vcpu) \\[(a0|a1)\\](\\+|\\-)(m0|m1),([^},[[ ,,,, ]+),(normal|br|dr|br_dr|vindirect|indirect),([^},[[ ,,,, ]+),(normal|e256|e128|e64|e32|e16|e8|e4|L2H|H2L|L2L|H2H)$", 0, 11, 11, 0, 1, _sym159_operands,0,0,1, 0,&_sym160,0,{}, 0,0,0,0,0,0, },
// ld_aX_Is5_minus    (1)
{ "ld_aX_Is5_minus", 0, 32, 32,  0x0, { 0 },_sym139, "^ *(\\.ippu|\\.vcpu) \\[(a0|a1)\\]\\-([^},[[ ,,,, ]+),([^},[[ ,,,, ]+),(normal|br|dr|br_dr|vindirect|indirect),([^},[[ ,,,, ]+),(normal|e256|e128|e64|e32|e16|e8|e4|L2H|H2L|L2L|H2H)$", 0, 10, 10, 0, 1, _sym134_operands,_sym138,1,1, 0,&_sym135,0,{}, 0,0,0,0,0,1, },
// ld_aX_Is5_plus    (2)
{ "ld_aX_Is5_plus", 0, 32, 32,  0x0, { 0 },_sym144, "^ *(\\.ippu|\\.vcpu) \\[(a0|a1)\\]\\+([^},[[ ,,,, ]+),([^},[[ ,,,, ]+),(normal|br|dr|br_dr|vindirect|indirect),([^},[[ ,,,, ]+),(normal|e256|e128|e64|e32|e16|e8|e4|L2H|H2L|L2L|H2H)$", 0, 10, 10, 0, 1, _sym140_operands,_sym143,1,1, 0,&_sym141,0,{}, 0,0,0,0,0,2, },
// ld_aX_Is8_minus    (3)
{ "ld_aX_Is8_minus", 0, 32, 32,  0x0, { 0 },_sym153, "^ *(\\.ippu|\\.vcpu) \\[(a0|a1)\\]\\-([^},[[ ,,, ]+),([^},[[ ,,, ]+),([^},[[ ,,, ]+),(normal|e256|e128|e64|e32|e16|e8|e4|L2H|H2L|L2L|H2H)$", 0, 9, 9, 0, 1, _sym148_operands,_sym152,1,1, 0,&_sym149,0,{}, 0,0,0,0,0,3, },
// ld_aX_Is8_plus    (4)
{ "ld_aX_Is8_plus", 0, 32, 32,  0x0, { 0 },_sym158, "^ *(\\.ippu|\\.vcpu) \\[(a0|a1)\\]\\+([^},[[ ,,, ]+),([^},[[ ,,, ]+),([^},[[ ,,, ]+),(normal|e256|e128|e64|e32|e16|e8|e4|L2H|H2L|L2L|H2H)$", 0, 9, 9, 0, 1, _sym154_operands,_sym157,1,1, 0,&_sym155,0,{}, 0,0,0,0,0,4, },
// ld_asX_base_Iu6    (5)
{ "ld_asX_base_Iu6", 4, 32, 32,  0x0, { 0x50000000,},_sym164, "^ *(as0|as1|as2|as3),([^},[, ]+)$", 0, 5, 5, 0, 0, _sym162_operands,0,0,0, 0,&_sym163,0,{}, 0,0,0,0,0,5, },
};

// Instructions named 'ld.index.ippu'.
static struct adl_opcode _sym364[] = {
  // ld_index_aX_mX_ippu    (0)
  { "ld_index_aX_mX_ippu", 0, 32, 32,  0x0, { 0 },_sym197, "^ *\\[(a0|a1)\\](\\+|\\-)(m0|m1)$", 0, 6, 6, 0, 0, _sym193_operands,_sym196,1,0, 0,&_sym194,0,{}, 0,0,0,0,0,0, },
  // ld_index_aX_Is9_minus_ippu    (1)
  { "ld_index_aX_Is9_minus_ippu", 0, 32, 32,  0x0, { 0 },_sym173, "^ *\\[(a0|a1)\\]\\-([^},[[ ]+)$", 0, 5, 5, 0, 0, _sym168_operands,_sym172,1,0, 0,&_sym169,0,{}, 0,0,0,0,0,1, },
// ld_index_aX_Is9_plus_ippu    (2)
{ "ld_index_aX_Is9_plus_ippu", 0, 32, 32,  0x0, { 0 },_sym184, "^ *\\[(a0|a1)\\]\\+([^},[[ ]+)$", 0, 5, 5, 0, 0, _sym180_operands,_sym183,1,0, 0,&_sym181,0,{}, 0,0,0,0,0,2, },
};

// Instructions named 'ld.index.vcpu'.
static struct adl_opcode _sym365[] = {
  // ld_index_aX_mX_vcpu    (0)
  { "ld_index_aX_mX_vcpu", 0, 32, 32,  0x0, { 0 },_sym202, "^ *\\[(a0|a1)\\](\\+|\\-)(m0|m1)$", 0, 6, 6, 0, 0, _sym198_operands,_sym201,1,0, 0,&_sym199,0,{}, 0,0,0,0,0,0, },
  // ld_index_aX_Is9_minus_vcpu    (1)
  { "ld_index_aX_Is9_minus_vcpu", 0, 32, 32,  0x0, { 0 },_sym179, "^ *\\[(a0|a1)\\]\\-([^},[[ ]+)$", 0, 5, 5, 0, 0, _sym174_operands,_sym178,1,0, 0,&_sym175,0,{}, 0,0,0,0,0,1, },
// ld_index_aX_Is9_plus_vcpu    (2)
{ "ld_index_aX_Is9_plus_vcpu", 0, 32, 32,  0x0, { 0 },_sym189, "^ *\\[(a0|a1)\\]\\+([^},[[ ]+)$", 0, 5, 5, 0, 0, _sym185_operands,_sym188,1,0, 0,&_sym186,0,{}, 0,0,0,0,0,2, },
};

// Instructions named 'ld.mask.ippu'.
static struct adl_opcode _sym366[] = {
  // ld_mask_aX_mX_ippu    (0)
  { "ld_mask_aX_mX_ippu", 0, 32, 32,  0x0, { 0 },_sym235, "^ *\\[(a0|a1)\\](\\+|\\-)(m0|m1)$", 0, 6, 6, 0, 0, _sym231_operands,_sym234,1,0, 0,&_sym232,0,{}, 0,0,0,0,0,0, },
  // ld_mask_aX_Is9_minus_ippu    (1)
  { "ld_mask_aX_Is9_minus_ippu", 0, 32, 32,  0x0, { 0 },_sym211, "^ *\\[(a0|a1)\\]\\-([^},[[ ]+)$", 0, 5, 5, 0, 0, _sym206_operands,_sym210,1,0, 0,&_sym207,0,{}, 0,0,0,0,0,1, },
// ld_mask_aX_Is9_plus_ippu    (2)
{ "ld_mask_aX_Is9_plus_ippu", 0, 32, 32,  0x0, { 0 },_sym222, "^ *\\[(a0|a1)\\]\\+([^},[[ ]+)$", 0, 5, 5, 0, 0, _sym218_operands,_sym221,1,0, 0,&_sym219,0,{}, 0,0,0,0,0,2, },
};

// Instructions named 'ld.mask.vcpu'.
static struct adl_opcode _sym367[] = {
  // ld_mask_aX_mX_vcpu    (0)
  { "ld_mask_aX_mX_vcpu", 0, 32, 32,  0x0, { 0 },_sym240, "^ *\\[(a0|a1)\\](\\+|\\-)(m0|m1)$", 0, 6, 6, 0, 0, _sym236_operands,_sym239,1,0, 0,&_sym237,0,{}, 0,0,0,0,0,0, },
  // ld_mask_aX_Is9_minus_vcpu    (1)
  { "ld_mask_aX_Is9_minus_vcpu", 0, 32, 32,  0x0, { 0 },_sym217, "^ *\\[(a0|a1)\\]\\-([^},[[ ]+)$", 0, 5, 5, 0, 0, _sym212_operands,_sym216,1,0, 0,&_sym213,0,{}, 0,0,0,0,0,1, },
// ld_mask_aX_Is9_plus_vcpu    (2)
{ "ld_mask_aX_Is9_plus_vcpu", 0, 32, 32,  0x0, { 0 },_sym227, "^ *\\[(a0|a1)\\]\\+([^},[[ ]+)$", 0, 5, 5, 0, 0, _sym223_operands,_sym226,1,0, 0,&_sym224,0,{}, 0,0,0,0,0,2, },
};

// Instructions named 'ld_ax_is5'.
static struct adl_opcode _sym368[] = {
  // ld_aX_Is5    (0)
  { "ld_aX_Is5", 4, 32, 32,  0x0, { 0xc0000000,},_sym133, "^ *([^} ,\t,]+),([^} ,\t,]+),([^} ,\t,]+),([^} ,\t,]+),([^} ,\t,]+),([^} ,\t,]+),([^} ,\t,]+)$", 0, 10, 17, 0, 0, _sym131_operands,0,0,0, 0,&_sym132,0,{}, 0,0,0,0,0,0, },
};

// Instructions named 'ld_ax_is8'.
static struct adl_opcode _sym369[] = {
  // ld_aX_Is8    (0)
  { "ld_aX_Is8", 4, 32, 32,  0x0, { 0xe0000000,},_sym147, "^ *([^} ,\t,]+),([^} ,\t,]+),([^} ,\t,]+),([^} ,\t,]+),([^} ,\t,]+),([^} ,\t,]+)$", 0, 9, 15, 0, 0, _sym145_operands,0,0,0, 0,&_sym146,0,{}, 0,0,0,0,0,0, },
};

// Instructions named 'ld_index_ax_is9'.
static struct adl_opcode _sym370[] = {
  // ld_index_aX_Is9    (0)
  { "ld_index_aX_Is9", 4, 32, 32,  0x0, { 0x7c000000,},_sym167, "^ *([^} ,\t,]+),([^} ,\t,]+),([^} ,\t,]+)$", 0, 6, 9, 0, 0, _sym165_operands,0,0,0, 0,&_sym166,0,{}, 0,0,0,0,0,0, },
};

// Instructions named 'ld_index_ax_mx'.
static struct adl_opcode _sym371[] = {
  // ld_index_aX_mX    (0)
  { "ld_index_aX_mX", 4, 32, 32,  0x0, { 0x7e000000,},_sym192, "^ *([^} ,\t,]+),([^} ,\t,]+),([^} ,\t,]+),([^} ,\t,]+)$", 0, 7, 11, 0, 0, _sym190_operands,0,0,0, 0,&_sym191,0,{}, 0,0,0,0,0,0, },
};

// Instructions named 'ld_mask_ax_is9'.
static struct adl_opcode _sym372[] = {
  // ld_mask_aX_Is9    (0)
  { "ld_mask_aX_Is9", 4, 32, 32,  0x0, { 0x78000000,},_sym205, "^ *([^} ,\t,]+),([^} ,\t,]+),([^} ,\t,]+)$", 0, 6, 9, 0, 0, _sym203_operands,0,0,0, 0,&_sym204,0,{}, 0,0,0,0,0,0, },
};

// Instructions named 'ld_mask_ax_mx'.
static struct adl_opcode _sym373[] = {
  // ld_mask_aX_mX    (0)
  { "ld_mask_aX_mX", 4, 32, 32,  0x0, { 0x7a000000,},_sym230, "^ *([^} ,\t,]+),([^} ,\t,]+),([^} ,\t,]+),([^} ,\t,]+)$", 0, 7, 11, 0, 0, _sym228_operands,0,0,0, 0,&_sym229,0,{}, 0,0,0,0,0,0, },
};

// Instructions named 'loop_begin'.
static struct adl_opcode _sym374[] = {
  // loop_begin_0    (0)
  { "loop_begin_0", 0, 3, 32,  0x0, { 0x40000000,},_sym342, "^ *0$", 0, 0, 0, 0, 0, _sym340_operands,0,0,0, 0,&_sym341,0,{}, 0,0,0,0,0,-1, },
  // loop_begin_1    (1)
  { "loop_begin_1", 0, 3, 32,  0x0, { 0xc0000000,},_sym345, "^ *1$", 0, 0, 0, 0, 0, _sym343_operands,0,0,0, 0,&_sym344,0,{}, 0,0,0,0,0,-1, },
};

// Instructions named 'loop_end'.
static struct adl_opcode _sym375[] = {
  // loop_end_0    (0)
  { "loop_end_0", 0, 3, 32,  0x0, { 0x20000000,},_sym348, "^ *0$", 0, 0, 0, 0, 0, _sym346_operands,0,0,0, 0,&_sym347,0,{}, 0,0,0,0,0,-1, },
  // loop_end_1    (1)
  { "loop_end_1", 0, 3, 32,  0x0, { 0xa0000000,},_sym351, "^ *1$", 0, 0, 0, 0, 0, _sym349_operands,0,0,0, 0,&_sym350,0,{}, 0,0,0,0,0,-1, },
};

// Instructions named 'mv'.
static struct adl_opcode _sym376[] = {
  // mv_ippu_reg    (0)
  { "mv_ippu_reg", 4, 32, 32,  0x0, { 0x54000000,},_sym243, "^ *(a0|a1|m0|m1|as0|as1|as2|as3|vindx_ptr|di_d|di_offset_unit|r_rd_ptr|r_wr_ptr|elem_mask_ptr|mem_elem_rd_ptr|mem_elem_wr_ptr),(a0|a1|m0|m1|as0|as1|as2|as3|vindx_ptr|di_d|di_offset_unit|r_rd_ptr|r_wr_ptr|elem_mask_ptr|mem_elem_rd_ptr|mem_elem_wr_ptr)$", 0, 5, 5, 0, 0, _sym241_operands,0,0,0, 0,&_sym242,0,{}, 0,0,0,0,0,0, },
  // mv_ippu_reg_I17_mX    (1)
  { "mv_ippu_reg_I17_mX", 4, 32, 32,  0x0, { 0x60800000,},_sym246, "^ *(m0|m1),([^},[, ]+)$", 0, 5, 5, 0, 0, _sym244_operands,0,0,0, 0,&_sym245,0,{}, 0,0,0,0,0,1, },
// mv_ippu_reg_I17_non_mX    (2)
{ "mv_ippu_reg_I17_non_mX", 4, 32, 32,  0x0, { 0x60000000,},_sym249, "^ *(a0|a1|as0|as1|as2|as3|vindx_ptr|di_d|di_offset_unit|r_rd_ptr|r_wr_ptr|elem_mask_ptr|mem_elem_rd_ptr|mem_elem_wr_ptr),([^},[, ]+)$", 0, 5, 5, 0, 0, _sym247_operands,0,0,0, 0,&_sym248,0,{}, 0,0,0,0,0,2, },
};

// Instructions named 'nop'.
static struct adl_opcode _sym377[] = {
  // nop    (0)
  { "nop", 4, 32, 32,  0x0, { },_sym252, "$", 0, 3, 3, 0, 0, _sym250_operands,0,0,0, 0,&_sym251,0,{}, 0,0,0,0,0,-1, },
};

// Instructions named 'rts'.
static struct adl_opcode _sym378[] = {
  // rts    (0)
  { "rts", 0, 32, 32,  0x0, { 0 },_sym257, "$", 0, 3, 3, 0, 0, _sym253_operands,_sym256,1,0, 0,&_sym254,0,{}, 0,0,0,0,0,-1, },
};

// Instructions named 'rts.nz'.
static struct adl_opcode _sym379[] = {
  // rts_nz    (0)
  { "rts_nz", 0, 32, 32,  0x0, { 0 },_sym262, "$", 0, 3, 3, 0, 0, _sym258_operands,_sym261,1,0, 0,&_sym259,0,{}, 0,0,0,0,0,-1, },
};

// Instructions named 'rts.z'.
static struct adl_opcode _sym380[] = {
  // rts_z    (0)
  { "rts_z", 0, 32, 32,  0x0, { 0 },_sym267, "$", 0, 3, 3, 0, 0, _sym263_operands,_sym266,1,0, 0,&_sym264,0,{}, 0,0,0,0,0,-1, },
};

// Instructions named 'set.br'.
static struct adl_opcode _sym381[] = {
  // set_br_aX_mode    (0)
  { "set_br_aX_mode", 4, 32, 32,  0x0, { 0x5c000000,},_sym270, "^ *(a0|a1),(fft32|fft64|fft128|fft256|fft512|fft1024|fft2048|fft4096|fft8192|fft16384)$", 0, 5, 5, 0, 0, _sym268_operands,0,0,0, 0,&_sym269,0,{}, 0,0,0,0,0,0, },
};

// Instructions named 'set.dr.config'.
static struct adl_opcode _sym382[] = {
  // set_dr_config    (0)
  { "set_dr_config", 4, 32, 32,  0x0, { 0x58000000,},_sym273, "^ *(1|2|3|4|5|6|7|8|9|10),([^},[,, ]+),([^},[,, ]+)$", 0, 6, 6, 0, 0, _sym271_operands,0,0,0, 0,&_sym272,0,{}, 0,0,0,0,0,0, },
};

// Instructions named 'set.dr.radix'.
static struct adl_opcode _sym383[] = {
  // set_dr_radix    (0)
  { "set_dr_radix", 4, 32, 32,  0x0, { 0x5a000000,},_sym276, "^ *(1|2|3|4|5|6|7|8|9|10),([^},[,, ]+),([^},[,, ]+)$", 0, 6, 6, 0, 0, _sym274_operands,0,0,0, 0,&_sym275,0,{}, 0,0,0,0,0,0, },
};

// Instructions named 'set.loop'.
static struct adl_opcode _sym384[] = {
  // set_loop_Iu1_asX    (0)
  { "set_loop_Iu1_asX", 0, 32, 32,  0x0, { 0 },_sym290, "^ *([^},[, ]+),(as0|as1|as2|as3)$", 0, 5, 5, 0, 0, _sym286_operands,_sym289,1,0, 0,&_sym287,0,{}, 0,0,0,0,0,0, },
// set_loop_Iu1_Iu8    (1)
{ "set_loop_Iu1_Iu8", 0, 32, 32,  0x0, { 0 },_sym285, "^ *([^},[, ]+),([^},[, ]+)$", 0, 5, 5, 0, 0, _sym280_operands,_sym284,1,0, 0,&_sym281,0,{}, 0,0,0,0,0,1, },
};

// Instructions named 'set.mask'.
static struct adl_opcode _sym385[] = {
  // set_mask_bit    (0)
  { "set_mask_bit", 4, 32, 32,  0x0, { 0x42000000,},_sym296, "^ *([^},[ ]+)$", 0, 4, 4, 0, 0, _sym294_operands,0,0,0, 0,&_sym295,0,{}, 0,0,0,0,0,0, },
};

// Instructions named 'set.mask.all'.
static struct adl_opcode _sym386[] = {
  // set_mask_all    (0)
  { "set_mask_all", 4, 32, 32,  0x0, { 0x45000000,},_sym293, "$", 0, 3, 3, 0, 0, _sym291_operands,0,0,0, 0,&_sym292,0,{}, 0,0,0,0,0,-1, },
};

// Instructions named 'set.range'.
static struct adl_opcode _sym387[] = {
  // set_range_aY_asA_asB    (0)
  { "set_range_aY_asA_asB", 4, 32, 32,  0x0, { 0x6c000000,},_sym308, "^ *(a0|a1),(as0|as1|as2|as3),(as0|as1|as2|as3)$", 0, 6, 6, 0, 0, _sym306_operands,0,0,0, 0,&_sym307,0,{}, 0,0,0,0,0,-1, },
  // set_range_aY_asA_Iu17_syn    (1)
  { "set_range_aY_asA_Iu17_syn", 0, 32, 32,  0x0, { 0 },_sym305, "^ *(a0|a1),(as0|as1|as2|as3),([^},[,, ]+)$", 0, 6, 6, 0, 0, _sym300_operands,_sym304,1,0, 0,&_sym301,0,{}, 0,0,0,0,0,1, },
};

// Instructions named 'set_loop'.
static struct adl_opcode _sym388[] = {
  // set_loop    (0)
  { "set_loop", 4, 32, 32,  0x0, { 0x18000000,},_sym279, "^ *([^} ,\t,]+),([^} ,\t,]+),([^} ,\t,]+),([^} ,\t,]+)$", 0, 7, 11, 0, 0, _sym277_operands,0,0,0, 0,&_sym278,0,{}, 0,0,0,0,0,0, },
};

// Instructions named 'set_range_ay_asa_iu17'.
static struct adl_opcode _sym389[] = {
  // set_range_aY_asA_Iu17    (0)
  { "set_range_aY_asA_Iu17", 4, 32, 32,  0x0, { 0x68000000,},_sym299, "^ *([^} ,\t,]+),([^} ,\t,]+),([^} ,\t,]+)$", 0, 6, 9, 0, 0, _sym297_operands,0,0,0, 0,&_sym298,0,{}, 0,0,0,0,0,0, },
};

// Instructions named 'st'.
static struct adl_opcode _sym390[] = {
  // st_aX_mX    (0)
  { "st_aX_mX", 4, 32, 32,  0x0, { 0x80000040,},_sym339, "^ *(\\.ippu|\\.vcpu) \\[(a0|a1)\\](\\+|\\-)(m0|m1),([^},[[ ,,,, ]+),(normal|br|dr|br_dr|indirect),([^},[[ ,,,, ]+),(normal|e32|e16|e8|e4)$", 0, 11, 11, 0, 1, _sym337_operands,0,0,1, 0,&_sym338,0,{}, 0,0,0,0,0,0, },
// st_aX_Is5_minus    (1)
{ "st_aX_Is5_minus", 0, 32, 32,  0x0, { 0 },_sym317, "^ *(\\.ippu|\\.vcpu) \\[(a0|a1)\\]\\-([^},[[ ,,,, ]+),([^},[[ ,,,, ]+),(normal|br|dr|br_dr|indirect),([^},[[ ,,,, ]+),(normal|e32|e16|e8|e4)$", 0, 10, 10, 0, 1, _sym312_operands,_sym316,1,1, 0,&_sym313,0,{}, 0,0,0,0,0,1, },
// st_aX_Is5_plus    (2)
{ "st_aX_Is5_plus", 0, 32, 32,  0x0, { 0 },_sym322, "^ *(\\.ippu|\\.vcpu) \\[(a0|a1)\\]\\+([^},[[ ,,,, ]+),([^},[[ ,,,, ]+),(normal|br|dr|br_dr|indirect),([^},[[ ,,,, ]+),(normal|e32|e16|e8|e4)$", 0, 10, 10, 0, 1, _sym318_operands,_sym321,1,1, 0,&_sym319,0,{}, 0,0,0,0,0,2, },
// st_aX_Is8_minus    (3)
{ "st_aX_Is8_minus", 0, 32, 32,  0x0, { 0 },_sym331, "^ *(\\.ippu|\\.vcpu) \\[(a0|a1)\\]\\-([^},[[ ,,, ]+),([^},[[ ,,, ]+),([^},[[ ,,, ]+),(normal|e32|e16|e8|e4)$", 0, 9, 9, 0, 1, _sym326_operands,_sym330,1,1, 0,&_sym327,0,{}, 0,0,0,0,0,3, },
// st_aX_Is8_plus    (4)
{ "st_aX_Is8_plus", 0, 32, 32,  0x0, { 0 },_sym336, "^ *(\\.ippu|\\.vcpu) \\[(a0|a1)\\]\\+([^},[[ ,,, ]+),([^},[[ ,,, ]+),([^},[[ ,,, ]+),(normal|e32|e16|e8|e4)$", 0, 9, 9, 0, 1, _sym332_operands,_sym335,1,1, 0,&_sym333,0,{}, 0,0,0,0,0,4, },
};

// Instructions named 'st_ax_is5'.
static struct adl_opcode _sym391[] = {
  // st_aX_Is5    (0)
  { "st_aX_Is5", 4, 32, 32,  0x0, { 0xa0000040,},_sym311, "^ *([^} ,\t,]+),([^} ,\t,]+),([^} ,\t,]+),([^} ,\t,]+),([^} ,\t,]+),([^} ,\t,]+),([^} ,\t,]+)$", 0, 10, 17, 0, 0, _sym309_operands,0,0,0, 0,&_sym310,0,{}, 0,0,0,0,0,0, },
};

// Instructions named 'st_ax_is8'.
static struct adl_opcode _sym392[] = {
  // st_aX_Is8    (0)
  { "st_aX_Is8", 4, 32, 32,  0x0, { 0xa0000000,},_sym325, "^ *([^} ,\t,]+),([^} ,\t,]+),([^} ,\t,]+),([^} ,\t,]+),([^} ,\t,]+),([^} ,\t,]+)$", 0, 9, 15, 0, 0, _sym323_operands,0,0,0, 0,&_sym324,0,{}, 0,0,0,0,0,0, },
};

// Instruction table.
static struct adl_instr other_instructions [] = {
  { "clr", 1, _sym352 },
  { "clr.mask", 1, _sym353 },
  { "clr.mask.all", 1, _sym354 },
  { "cmp.bit", 1, _sym355 },
  { "done", 1, _sym356 },
  { "jmp", 2, _sym357 },
  { "jmp.nz", 1, _sym358 },
  { "jmp.z", 1, _sym359 },
  { "jsr", 1, _sym360 },
  { "jsr.nz", 1, _sym361 },
  { "jsr.z", 1, _sym362 },
  { "ld", 6, _sym363 },
  { "ld.index.ippu", 3, _sym364 },
  { "ld.index.vcpu", 3, _sym365 },
  { "ld.mask.ippu", 3, _sym366 },
  { "ld.mask.vcpu", 3, _sym367 },
  { "ld_ax_is5", 1, _sym368 },
  { "ld_ax_is8", 1, _sym369 },
  { "ld_index_ax_is9", 1, _sym370 },
  { "ld_index_ax_mx", 1, _sym371 },
  { "ld_mask_ax_is9", 1, _sym372 },
  { "ld_mask_ax_mx", 1, _sym373 },
  { "loop_begin", 2, _sym374 },
  { "loop_end", 2, _sym375 },
  { "mv", 3, _sym376 },
  { "nop", 1, _sym377 },
  { "rts", 1, _sym378 },
  { "rts.nz", 1, _sym379 },
  { "rts.z", 1, _sym380 },
  { "set.br", 1, _sym381 },
  { "set.dr.config", 1, _sym382 },
  { "set.dr.radix", 1, _sym383 },
  { "set.loop", 2, _sym384 },
  { "set.mask", 1, _sym385 },
  { "set.mask.all", 1, _sym386 },
  { "set.range", 2, _sym387 },
  { "set_loop", 1, _sym388 },
  { "set_range_ay_asa_iu17", 1, _sym389 },
  { "st", 5, _sym390 },
  { "st_ax_is5", 1, _sym391 },
  { "st_ax_is8", 1, _sym392 },
};

static const int num_other_instructions = 41;

static const struct adl_name_pair ppc_regnames[] = {
  {"a0",0},
  {"a1",1},
  {"as0",0},
  {"as1",1},
  {"as2",2},
  {"as3",3},
  {"m0",0},
  {"m1",1},
  {"r0",0},
  {"r1",1},
  {"normal",0},
  {"br",1},
  {"dr",2},
  {"br_dr",3},
  {"vindirect",4},
  {"indirect",5},
  {"l2h",6},
  {"h2l",7},
  {"l2l",8},
  {"h2h",9},
  {"e256",10},
  {"e128",11},
  {"e64",12},
  {"e32",13},
  {"e16",14},
  {"e8",15},
  {"e4",16},
  {"fft32",17},
  {"fft64",18},
  {"fft128",19},
  {"fft256",20},
  {"fft512",21},
  {"fft1024",22},
  {"fft2048",23},
  {"fft4096",24},
  {"fft8192",25},
  {"fft16384",26},
  {"imm",27},
  {"indx",0},
  {"di_d",1},
  {"di_offset_unit",2},
  {"r_rd_ptr",3},
  {"r_wr_ptr",4},
  {"elem_mask_ptr",5},
  {"mem_elem_rd_ptr",6},
  {"mem_elem_wr_ptr",7},
  {"di_r",8},
};

static const int num_ppc_regnames = 47;

static const char *ppc_itnames[] = {
  "default",
};


static reloc_howto_type ppc_elf_howto_table[] = {
  HOWTO(17,2,3,17,0,0,complain_overflow_dont,bfd_elf_generic_reloc,"R_IPPU_DMEM_17",0,0,0,0), // relocation R_IPPU_DMEM_17 (R_IPPU_DMEM_17)
  HOWTO(16,2,1,16,0,0,complain_overflow_dont,bfd_elf_generic_reloc,"R_IPPU_PRAM_16",0,0,0,0), // relocation R_IPPU_PRAM_16 (R_IPPU_PRAM_16)
  HOWTO(18,0,2,32,0,0,complain_overflow_dont,bfd_elf_generic_reloc,"R_OCRAM_LAB_32",0,0,0,0), // relocation R_OCRAM_LAB_32 (R_OCRAM_LAB_32)
  HOWTO(9,2,3,17,0,0,complain_overflow_dont,bfd_elf_generic_reloc,"R_VSPA_DMEM_17",0,0,0,0), // relocation R_VSPA_DMEM_17 (R_VSPA_DMEM_17)
  HOWTO(5,2,3,17,0,0,complain_overflow_dont,bfd_elf_generic_reloc,"R_VSPA_HW_HI_17",0,0,0,0), // relocation R_VSPA_HW_HI_17 (R_VSPA_HW_HI_17)
  HOWTO(4,2,3,17,0,0,complain_overflow_dont,bfd_elf_generic_reloc,"R_VSPA_HW_LO_17",0,0,0,0), // relocation R_VSPA_HW_LO_17 (R_VSPA_HW_LO_17)
  HOWTO(13,2,3,17,0,0,complain_overflow_dont,bfd_elf_generic_reloc,"R_VSPA_LAB_17",0,0,0,0), // relocation R_VSPA_LAB_17 (R_VSPA_LAB_17)
  HOWTO(11,2,2,32,0,0,complain_overflow_dont,bfd_elf_generic_reloc,"R_VSPA_LAB_32",0,0,0,0), // relocation R_VSPA_LAB_32 (R_VSPA_LAB_32)
  HOWTO(10,3,1,10,0,0,complain_overflow_dont,bfd_elf_generic_reloc,"R_VSPA_PMEM_10",0,0,0,0), // relocation R_VSPA_PMEM_10 (R_VSPA_PMEM_10)
  HOWTO(8,2,3,17,0,0,complain_overflow_dont,bfd_elf_generic_reloc,"R_VSPA_PMEM_17",0,0,0,0), // relocation R_VSPA_PMEM_17 (R_VSPA_PMEM_17)
  HOWTO(15,2,3,17,0,0,complain_overflow_dont,bfd_elf_generic_reloc,"R_VSPA_SP_HI_17",0,0,0,0), // relocation R_VSPA_SP_HI_17 (R_VSPA_SP_HI_17)
  HOWTO(14,2,3,17,0,0,complain_overflow_dont,bfd_elf_generic_reloc,"R_VSPA_SP_LO_17",0,0,0,0), // relocation R_VSPA_SP_LO_17 (R_VSPA_SP_LO_17)
  HOWTO(1,0,0,8,0,0,complain_overflow_dont,bfd_elf_generic_reloc,"R_VSPA_8",0,0,0,0), // relocation R_VSPA_8 (_1byte)
  HOWTO(2,0,1,16,0,0,complain_overflow_dont,bfd_elf_generic_reloc,"R_VSPA_16",0,0,0,0), // relocation R_VSPA_16 (_2byte)
  HOWTO(3,0,2,32,0,0,complain_overflow_dont,bfd_elf_generic_reloc,"R_VSPA_32",0,0,0,0), // relocation R_VSPA_32 (_4byte)
  HOWTO(12,2,2,32,0,0,complain_overflow_dont,bfd_elf_generic_reloc,"R_VSPA_LAB_IND_32",0,0,0,0), // relocation R_VSPA_LAB_IND_32 (_word)
  HOWTO(19,0,2,32,0,0,complain_overflow_dont,bfd_elf_generic_reloc,"R_OCRAM_LAB_IND_32",0,0,0,0), // relocation R_OCRAM_LAB_IND_32 (_word_ocram_sym_)
  EMPTY_HOWTO(-1)
};

static unsigned num_ppc_elf_howtos = 18;

// Relocations ordered by name, for fast name -> type searches.
static struct adl_name_pair ppc_relocs_by_index [] = {
   { "R_IPPU_DMEM_17", 0 }, // R_IPPU_DMEM_17
   { "R_IPPU_PRAM_16", 1 }, // R_IPPU_PRAM_16
   { "R_OCRAM_LAB_32", 2 }, // R_OCRAM_LAB_32
   { "R_VSPA_DMEM_17", 3 }, // R_VSPA_DMEM_17
   { "R_VSPA_HW_HI_17", 4 }, // R_VSPA_HW_HI_17
   { "R_VSPA_HW_LO_17", 5 }, // R_VSPA_HW_LO_17
   { "R_VSPA_LAB_17", 6 }, // R_VSPA_LAB_17
   { "R_VSPA_LAB_32", 7 }, // R_VSPA_LAB_32
   { "R_VSPA_PMEM_10", 8 }, // R_VSPA_PMEM_10
   { "R_VSPA_PMEM_17", 9 }, // R_VSPA_PMEM_17
   { "R_VSPA_SP_HI_17", 10 }, // R_VSPA_SP_HI_17
   { "R_VSPA_SP_LO_17", 11 }, // R_VSPA_SP_LO_17
   { "_1byte", 12 }, // R_VSPA_8
   { "_2byte", 13 }, // R_VSPA_16
   { "_4byte", 14 }, // R_VSPA_32
   { "_word", 15 }, // R_VSPA_LAB_IND_32
   { "_word_ocram_sym_", 16 }, // R_OCRAM_LAB_IND_32
};

static const int num_ppc_relocs_by_index = 17;


// Relocation offsets.
static struct adl_int_pair ppc_reloc_offsets [] = {
   { 17,4 }, // R_IPPU_DMEM_17
   { 16,4 }, // R_IPPU_PRAM_16
   { 18,2 }, // R_OCRAM_LAB_32
   { 9,19 }, // R_VSPA_DMEM_17
   { 5,31 }, // R_VSPA_HW_HI_17
   { 4,6 }, // R_VSPA_HW_LO_17
   { 13,20 }, // R_VSPA_LAB_17
   { 11,2 }, // R_VSPA_LAB_32
   { 10,30 }, // R_VSPA_PMEM_10
   { 8,20 }, // R_VSPA_PMEM_17
   { 15,27 }, // R_VSPA_SP_HI_17
   { 14,2 }, // R_VSPA_SP_LO_17
   { 1,0 }, // R_VSPA_8
   { 2,0 }, // R_VSPA_16
   { 3,0 }, // R_VSPA_32
   { 12,0 }, // R_VSPA_LAB_IND_32
   { 19,0 }, // R_OCRAM_LAB_IND_32
};

static const int num_ppc_reloc_offsets = 17;

static const char *instr_names[] = {
  "clr",
  "clr.mask",
  "clr.mask.all",
  "cmp.bit",
  "done",
  "jmp",
  "jmp.nz",
  "jmp.z",
  "jsr",
  "jsr.nz",
  "jsr.z",
  "ld",
  "ld.index.ippu",
  "ld.index.vcpu",
  "ld.mask.ippu",
  "ld.mask.vcpu",
  "ld_ax_is5",
  "ld_ax_is8",
  "ld_index_ax_is9",
  "ld_index_ax_mx",
  "ld_mask_ax_is9",
  "ld_mask_ax_mx",
  "loop_begin",
  "loop_end",
  "mv",
  "nop",
  "rts",
  "rts.nz",
  "rts.z",
  "set.br",
  "set.dr.config",
  "set.dr.radix",
  "set.loop",
  "set.mask",
  "set.mask.all",
  "set.range",
  "set_loop",
  "set_range_ay_asa_iu17",
  "st",
  "st_ax_is5",
  "st_ax_is8",
};

static int num_instr_names = 41;

static const char *instr_pfx_fields[] = {
   0 };

static int num_instr_pfx_fields = 0;

//
// Helper code.
//


static void post_packet_asm(adl::InstrBundle & b,int current_position ATTRIBUTE_UNUSED)
{
       adl::InstrBundle bb ;
       adl::InstrInfo ii ;
       bool extIPPU = false , extLoopBegin = false , extLoopEnd = false ;
       bool extLoopBegin1 = false , extLoopEnd1 = false ;
       int posIPPU = - 1 ;
       int Size = b . size (  ) ;
       bool extFlag ;
      if ( ( Size < 1 ) || ( Size > 3 ) ) {
            { std::ostringstream ss; ss    <<  "Invalid instruction formation size: "  <<  Size ; error(ss.str().c_str(),adl_group_size(current_position) - 1,current_position); } ;
        } else {
            for (  int i = 0 ; i < Size ; ++ i ) {
                  extFlag = false ;
                  if ( b [ i ] . instrHasAttr ( instr_ippu ) ) {
                        if ( extIPPU ) {
                              { std::ostringstream ss; ss    <<  "Invalid IPPU instruction at the position of "  <<  i + 1 ; error(ss.str().c_str(),adl_group_size(current_position) - 1,current_position); } ;
                          } else {
                              extIPPU = true ;
                              posIPPU = i ;
                          }
                        extFlag = true ;
                    }
                  if ( b [ i ] . instrHasAttr ( instr_loop_begin ) ) {
                        if ( extLoopBegin ) {
                              { std::ostringstream ss; ss    <<  "Invalid loop_begin at the position of "  <<  i + 1 ; error(ss.str().c_str(),adl_group_size(current_position) - 1,current_position); } ;
                          } else {
                              extLoopBegin = true ;
                              if ( b [ i ] . instrHasAttr ( instr_loop_1 ) ) {
                                    extLoopBegin1 = true ;
                                }
                          }
                        extFlag = true ;
                    }
                  if ( b [ i ] . instrHasAttr ( instr_loop_end ) ) {
                        if ( extLoopEnd ) {
                              { std::ostringstream ss; ss    <<  "Invalid loop_end at the position of "  <<  i + 1 ; error(ss.str().c_str(),adl_group_size(current_position) - 1,current_position); } ;
                          } else {
                              extLoopEnd = true ;
                              if ( b [ i ] . instrHasAttr ( instr_loop_1 ) ) {
                                    extLoopEnd1 = true ;
                                }
                          }
                        extFlag = true ;
                    }
                  if ( ! extFlag ) {
                        { std::ostringstream ss; ss    <<  "Invalid instruction at the position of "  <<  i + 1 ; error(ss.str().c_str(),adl_group_size(current_position) - 1,current_position); } ;
                    }
              }
            if ( ! extIPPU && ( extLoopBegin || extLoopEnd ) ) {
                  ii = createInstr ( 3 , "nop" , 0 , 0 , 0 ) ;
              } else if ( extIPPU ) {
                  ii = b [ posIPPU ] ;
              }
            if ( extLoopBegin ) {
                  adl_set_field(83,83,1,ii) ;
                  if ( extLoopBegin1 ) {
                        adl_set_field(82,82,1,ii) ;
                    }
              }
            if ( extLoopEnd ) {
                  adl_set_field(81,81,1,ii) ;
                  if ( extLoopEnd1 ) {
                        adl_set_field(82,82,1,ii) ;
                    }
              }
        }
      bb . push_back ( ii ) ;
      b = bb ;
}
static struct adl_asm_instr asm_instrs[] = {
   {"",0 } 
};
static int num_asm_instrs = 0;
static int internal_current_table = 0;
static bool show_warnings = false;
static struct hash_control *instr_hash[1];

static struct hash_control *reg_hash;

static struct hash_control *asm_instr_hash;

static struct hash_control *instr_pfx_fields_hash;

static const char *terminating_chars     = "\t .{}\n";

static const char *min_terminating_chars = "\t {}\n";

static bool setup_endianness()
{
  adl_setup_endianness(false); return true;
}

static bool setup_endianness_var = setup_endianness();

void ippu_md_begin()
{
  adl_setup_general(min_terminating_chars,terminating_chars,1,0,0,post_packet_asm,0,init_queue_size, show_warnings, true);
  adl_setup_comments(init_comment_strs, init_num_comment_strs, init_line_comment_strs, init_num_line_comment_strs);
  adl_setup_instrfields(ppc_operands, num_ppc_operands,ppc_operands_by_index, num_ppc_operands_by_index);
  adl_setup_grouping(packet_begin_chars, packet_end_chars);
  adl_setup_prefix(pfx_queue, 0,0,0,reset_prefix_counters);
  adl_setup_instr_separators(instr_separator_chars);
  adl_setup_relocations(ppc_elf_howto_table,num_ppc_elf_howtos,ppc_relocs_by_index,num_ppc_relocs_by_index,ppc_reloc_offsets,num_ppc_reloc_offsets);
  instr_hash[0] = adl_setup_instructions(other_instructions,num_other_instructions,ppc_operands);
  reg_hash = adl_setup_name_hash(ppc_regnames,num_ppc_regnames,"register");
  asm_instr_hash = 0;
  instr_pfx_fields_hash = 0;
}


extern "C" void ippu_md_assemble(char *str, unsigned line_number)
{
  adl_assemble(str,instr_hash[internal_current_table],asm_instr_hash,reg_hash,instr_pfx_fields_hash,11,internal_current_table,ppc_itnames[internal_current_table], line_number);
}

extern "C" void ippu_md_apply_fix (fixS *fixP ,valueT *valP ,segT seg)
{
  adl_apply_fix(fixP,valP,seg);
}

int ppc_parse_option(int,char*);

extern "C" int ippu_md_parse_option (int c,char *arg)
{
  if (c == 'd') {
    show_warnings = TRUE;
    return 1;
  } else if (c == 'm') {
    if (!strcmp(arg,"default")) {
      internal_current_table = 0;
      return 1;
    }
     else if (!strcmp(arg,"instr_loop")) {
      internal_current_table = 1;
      return 1;
    }
  }
  return ppc_parse_option(c,arg);
}

void ppc_show_usage(FILE*);

extern "C" void ippu_md_show_usage (FILE *stream ATTRIBUTE_UNUSED)
{
  fprintf (stream,
  "\nInstruction-selection options:\n\n"
  "-mdefault		Select the default instruction table.\n"
  "-minstr_loop		Select the 'instr_loop' instruction table.\n"
  "-d			Show debugging warnings about undefined symbols.\n"
  );
  ppc_show_usage(stream);
}

extern "C" void ippu_adl_get_instr_names(const char ***names, int *num_names)
{
  *names = instr_names;
  *num_names = num_instr_names;
};

extern "C" void ippu_adl_get_instr_ops(const struct adl_name_pair **names, int* num_names)
{
  *names = ppc_regnames;
  *num_names = num_ppc_regnames;
}

extern "C" bfd_boolean  ippu_dt_debug(void);

extern "C" bfd_boolean  ippu_dt_debug(void)
{
  #ifdef _DEVTECH_DEBUG_
  return TRUE;
  #else
  return FALSE;
  #endif
}

#include "ippu-assembler.inc"

const size_t idx_list_0[] = { 1 };
const size_t idx_list_1[] = { 2 };

size_t num_ippu_modifiers = 10;
struct modifier_info ippu_modifiers[] = {
	{ _sym137_modifier, 1, idx_list_1 },
	{ _sym151_modifier, 1, idx_list_1 },
	{ _sym171_modifier, 1, idx_list_0 },
	{ _sym177_modifier, 1, idx_list_0 },
	{ _sym209_modifier, 1, idx_list_0 },
	{ _sym215_modifier, 1, idx_list_0 },
	{ _sym283_modifier, 1, idx_list_0 },
	{ _sym303_modifier, 1, idx_list_1 },
	{ _sym315_modifier, 1, idx_list_1 },
	{ _sym329_modifier, 1, idx_list_1 },
	{ NULL, 0, NULL, },
};

// Pre-processed
#define _Enable_shared static _Enable_shared

/*
	
	Assembler code implementation file for ppc generated by ADL.
	
	*/

#ifndef _MSC_VER
extern "C" {
  #  include "as.h"
}
#endif

#include <stdio.h>
#include <sstream>
#include <string>

extern "C" {
  #  include "as.h"
  #  include "bfd/elf-bfd.h"
  #  include "bfd/bfd.h"
  #  include "bfd/libbfd.h"
}

#define __NO_RNUMBER__

#include "adl-asm-impl.h"
#include "adl-asm-info.h"

#define bits adl::le_intbv
#define sbits adl::le_sintbv

#define ns_bits adl::le_intbv
#define ns_sbits adl::le_sintbv

extern "C" {
  #include "tc-ppc.h"
}

using namespace std;




/* Figure out the BFD architecture to use.  These functions 
   are called well before ippu_md_begin, when the output file is opened.  */ 

enum bfd_architecture ippu_ppc_arch () 
{
  return ADL_TARGET_ARCH;
}

const char packet_begin_chars[] = "{\n";
  const char packet_end_chars[] = "}\n";
static const char *init_comment_strs[] = {"//",};
static int init_num_comment_strs = 1;
static const char *init_line_comment_strs[] = {"//",};
static int init_num_line_comment_strs = 1;
static int init_queue_size = 2;
static int init_queue_offset = 0;
unsigned long ippu_ppc_mach ()
{
  return default_adl_mach();
}

extern char*
ippu_ppc_target_format ()
{
  return default_adl_target_format();
}

static const char instr_separator_chars[] = ";";


enum InstrAttrs {
  instr_ippu = 0x0,
  instr_loop_begin = 0x1,
  instr_loop_end = 0x2,
  instr_loop_1 = 0x3,
};

static void error(const char *msg,int pos ATTRIBUTE_UNUSED,int current_position ATTRIBUTE_UNUSED) ATTRIBUTE_UNUSED;
static void error(const char *msg,int pos ATTRIBUTE_UNUSED,int current_position ATTRIBUTE_UNUSED)
{
  adl_error(msg,pos,current_position);
}

static void info(const char *msg,int pos ATTRIBUTE_UNUSED,int current_position ATTRIBUTE_UNUSED) ATTRIBUTE_UNUSED;
static void info(const char *msg,int pos ATTRIBUTE_UNUSED,int current_position ATTRIBUTE_UNUSED)
{
  adl_info(msg,pos,current_position);
}

// Prefix variables.
static struct adl_prefix_field *pfx_fields0[] = { 0 };
static struct adl_prefix_field *pfx_fields1[] = { 0 };
static struct adl_prefix_fields pfx_queue[] = {{pfx_fields0},{pfx_fields1},};
// Prefix counters.

static void reset_prefix_counters()
{
}

//
// Instruction field inserter functions.
//

static  void set_AA_width_32(unsigned *x ATTRIBUTE_UNUSED, bfd_uint64_t val ATTRIBUTE_UNUSED) {
  x[0] |= ((val&0x1) << 20);
}

static  void set_AM_width_32(unsigned *x ATTRIBUTE_UNUSED, bfd_uint64_t val ATTRIBUTE_UNUSED) {
  x[0] |= ((val&0x3) << 20);
}

static  void set_ARG_IPPU_VCPU_width_32(unsigned *x ATTRIBUTE_UNUSED, bfd_uint64_t val ATTRIBUTE_UNUSED) {
  x[0] |= ((val&0x1) << 19);
}

static  void set_AS2_imp_bits__23_22__width_32(unsigned *x ATTRIBUTE_UNUSED, bfd_uint64_t val ATTRIBUTE_UNUSED) {
  x[0] |= ((val&0x3) << 22);
}

static  void set_AS_imp_bits__25_24__width_32(unsigned *x ATTRIBUTE_UNUSED, bfd_uint64_t val ATTRIBUTE_UNUSED) {
  x[0] |= ((val&0x3) << 24);
}

static  void set_BR_MODE_width_32(unsigned *x ATTRIBUTE_UNUSED, bfd_uint64_t val ATTRIBUTE_UNUSED) {
  x[0] |= ((val&0xf) << 4);
}

static  void set_BR_MODE_imp_bits__7_4__width_32(unsigned *x ATTRIBUTE_UNUSED, bfd_uint64_t val ATTRIBUTE_UNUSED) {
  x[0] |= ((val&0xf) << 4);
}

static  void set_CC_width_32(unsigned *x ATTRIBUTE_UNUSED, bfd_uint64_t val ATTRIBUTE_UNUSED) {
  x[0] |= ((val&0x3) << 20);
}

static  void set_CLR_DST_imp_bits__6_3__width_32(unsigned *x ATTRIBUTE_UNUSED, bfd_uint64_t val ATTRIBUTE_UNUSED) {
  x[0] |= ((val&0xf) << 3);
}

static  void set_DIGIT_INDEX_imp_bits__23_20__width_32(unsigned *x ATTRIBUTE_UNUSED, bfd_uint64_t val ATTRIBUTE_UNUSED) {
  x[0] |= ((val&0xf) << 20);
}

static  void set_DST_REG_MX_imp_bits__22_22__width_32(unsigned *x ATTRIBUTE_UNUSED, bfd_uint64_t val ATTRIBUTE_UNUSED) {
  x[0] |= ((val&0x1) << 22);
}

static  void set_DST_REG_NON_MX_imp_bits__25_22__width_32(unsigned *x ATTRIBUTE_UNUSED, bfd_uint64_t val ATTRIBUTE_UNUSED) {
  x[0] |= ((val&0xf) << 22);
}

static  void set_DST_REG_imp_bits__25_22__width_32(unsigned *x ATTRIBUTE_UNUSED, bfd_uint64_t val ATTRIBUTE_UNUSED) {
  x[0] |= ((val&0xf) << 22);
}

static  void set_ELEM_OFFSET_width_32(unsigned *x ATTRIBUTE_UNUSED, bfd_uint64_t val ATTRIBUTE_UNUSED) {
  x[0] |= ((val&0x7) << 16);
}

static  void set_ER_MODE_width_32(unsigned *x ATTRIBUTE_UNUSED, bfd_uint64_t val ATTRIBUTE_UNUSED) {
  x[0] |= ((val&0xf) << 4);
}

static  void set_ER_MODE_imp_bits__7_4__width_32(unsigned *x ATTRIBUTE_UNUSED, bfd_uint64_t val ATTRIBUTE_UNUSED) {
  x[0] |= ((val&0xf) << 4);
}

static  void set_IDX_IPPU_VCPU_width_32(unsigned *x ATTRIBUTE_UNUSED, bfd_uint64_t val ATTRIBUTE_UNUSED) {
  x[0] |= ((val&0x1) << 19);
}

static  void set_IM11_imp_bits__14_4__width_32(unsigned *x ATTRIBUTE_UNUSED, bfd_uint64_t val ATTRIBUTE_UNUSED) {
  x[0] |= ((val&0x7ff) << 4);
}

static  void set_IM12_imp_bits__15_4__width_32(unsigned *x ATTRIBUTE_UNUSED, bfd_uint64_t val ATTRIBUTE_UNUSED) {
  x[0] |= ((val&0xfff) << 4);
}

static  void set_IM12s_imp_bits__15_4__width_32(unsigned *x ATTRIBUTE_UNUSED, bfd_uint64_t val ATTRIBUTE_UNUSED) {
  x[0] |= ((val&0xfff) << 4);
}

static  void set_IM16R16_width_32(unsigned *x ATTRIBUTE_UNUSED, bfd_uint64_t val ATTRIBUTE_UNUSED) {
  x[0] |= ((val&0xffff) << 4);
}

static  void set_IM19sR17_imp_bits__3_3_x_21_4__width_32(unsigned *x ATTRIBUTE_UNUSED, bfd_uint64_t val ATTRIBUTE_UNUSED) {
  x[0] |= ((val&0x3ffff) << 4);
  val >>=   0x12;
  x[0] |= ((val&0x1) << 3);
}

static  void set_IM19s_imp_bits__22_21_x_19_3__width_32(unsigned *x ATTRIBUTE_UNUSED, bfd_uint64_t val ATTRIBUTE_UNUSED) {
  x[0] |= ((val&0x1ffff) << 3);
  val >>=   0x11;
  x[0] |= ((val&0x3) << 21);
}

static  void set_IM3_imp_bits__18_16__width_32(unsigned *x ATTRIBUTE_UNUSED, bfd_uint64_t val ATTRIBUTE_UNUSED) {
  x[0] |= ((val&0x7) << 16);
}

static  void set_IM4s_ofst_imp_bits__24_21__width_32(unsigned *x ATTRIBUTE_UNUSED, bfd_uint64_t val ATTRIBUTE_UNUSED) {
  x[0] |= ((val&0xf) << 21);
}

static  void set_IM5s_ofst_imp_bits__25_21__width_32(unsigned *x ATTRIBUTE_UNUSED, bfd_uint64_t val ATTRIBUTE_UNUSED) {
  x[0] |= ((val&0x1f) << 21);
}

static  void set_IM6_imp_bits__9_4__width_32(unsigned *x ATTRIBUTE_UNUSED, bfd_uint64_t val ATTRIBUTE_UNUSED) {
  x[0] |= ((val&0x3f) << 4);
}

static  void set_IM8_imp_bits__11_4__width_32(unsigned *x ATTRIBUTE_UNUSED, bfd_uint64_t val ATTRIBUTE_UNUSED) {
  x[0] |= ((val&0xff) << 4);
}

static  void set_IM8s_imp_bits__28_21__width_32(unsigned *x ATTRIBUTE_UNUSED, bfd_uint64_t val ATTRIBUTE_UNUSED) {
  x[0] |= ((val&0xff) << 21);
}

static  void set_IM8s_ofst_imp_bits__28_21__width_32(unsigned *x ATTRIBUTE_UNUSED, bfd_uint64_t val ATTRIBUTE_UNUSED) {
  x[0] |= ((val&0xff) << 21);
}

static  void set_IM9s_imp_bits__15_7__width_32(unsigned *x ATTRIBUTE_UNUSED, bfd_uint64_t val ATTRIBUTE_UNUSED) {
  x[0] |= ((val&0x1ff) << 7);
}

static  void set_IM9s_ofst_imp_bits__15_7__width_32(unsigned *x ATTRIBUTE_UNUSED, bfd_uint64_t val ATTRIBUTE_UNUSED) {
  x[0] |= ((val&0x1ff) << 7);
}

static  void set_IPPU_VCPU_width_32(unsigned *x ATTRIBUTE_UNUSED, bfd_uint64_t val ATTRIBUTE_UNUSED) {
  x[0] |= ((val&0x1) << 19);
}

static  void set_IV_MODE_width_32(unsigned *x ATTRIBUTE_UNUSED, bfd_uint64_t val ATTRIBUTE_UNUSED) {
  x[0] |= ((val&0x3) << 3);
}

static  void set_IY_width_32(unsigned *x ATTRIBUTE_UNUSED, bfd_uint64_t val ATTRIBUTE_UNUSED) {
  x[0] |= ((val&0x1) << 25);
}

static  void set_IY_imp_bits__25_25__width_32(unsigned *x ATTRIBUTE_UNUSED, bfd_uint64_t val ATTRIBUTE_UNUSED) {
  x[0] |= ((val&0x1) << 25);
}

static  void set_LATCH_MODE_width_32(unsigned *x ATTRIBUTE_UNUSED, bfd_uint64_t val ATTRIBUTE_UNUSED) {
  x[0] |= ((val&0xf) << 3);
}

static  void set_LD_MODE_imp_bits__26_24__width_32(unsigned *x ATTRIBUTE_UNUSED, bfd_uint64_t val ATTRIBUTE_UNUSED) {
  x[0] |= ((val&0x7) << 24);
}

static  void set_LD_MODE_imp_bits__28_26__width_32(unsigned *x ATTRIBUTE_UNUSED, bfd_uint64_t val ATTRIBUTE_UNUSED) {
  x[0] |= ((val&0x7) << 26);
}

static  void set_LOOP_AS_IMM_imp_bits__26_26__width_32(unsigned *x ATTRIBUTE_UNUSED, bfd_uint64_t val ATTRIBUTE_UNUSED) {
  x[0] |= ((val&0x1) << 26);
}

static  void set_LOOP_END_imp_bits__0_0__width_32(unsigned *x ATTRIBUTE_UNUSED, bfd_uint64_t val ATTRIBUTE_UNUSED) {
  x[0] |= ((val&0x1));
}

static  void set_LOOP_INDEX_imp_bits__2_2__width_32(unsigned *x ATTRIBUTE_UNUSED, bfd_uint64_t val ATTRIBUTE_UNUSED) {
  x[0] |= ((val&0x1) << 2);
}

static  void set_LOOP_START_imp_bits__1_1__width_32(unsigned *x ATTRIBUTE_UNUSED, bfd_uint64_t val ATTRIBUTE_UNUSED) {
  x[0] |= ((val&0x1) << 1);
}

static  void set_MASK_IPPU_VCPU_width_32(unsigned *x ATTRIBUTE_UNUSED, bfd_uint64_t val ATTRIBUTE_UNUSED) {
  x[0] |= ((val&0x1) << 19);
}

static  void set_MM_width_32(unsigned *x ATTRIBUTE_UNUSED, bfd_uint64_t val ATTRIBUTE_UNUSED) {
  x[0] |= ((val&0x1) << 22);
}

static  void set_PLUS_MINUS_width_32(unsigned *x ATTRIBUTE_UNUSED, bfd_uint64_t val ATTRIBUTE_UNUSED) {
  x[0] |= ((val&0x1) << 23);
}

static  void set_RADIX_imp_bits__18_16__width_32(unsigned *x ATTRIBUTE_UNUSED, bfd_uint64_t val ATTRIBUTE_UNUSED) {
  x[0] |= ((val&0x7) << 16);
}

static  void set_RD_OFFSET_width_32(unsigned *x ATTRIBUTE_UNUSED, bfd_uint64_t val ATTRIBUTE_UNUSED) {
  x[0] |= ((val&0x1ff) << 7);
}

static  void set_SET_LOOP_INDEX_imp_bits__23_23__width_32(unsigned *x ATTRIBUTE_UNUSED, bfd_uint64_t val ATTRIBUTE_UNUSED) {
  x[0] |= ((val&0x1) << 23);
}

static  void set_SRC_REG_imp_bits__21_18__width_32(unsigned *x ATTRIBUTE_UNUSED, bfd_uint64_t val ATTRIBUTE_UNUSED) {
  x[0] |= ((val&0xf) << 18);
}

static  void set_ST_MODE_imp_bits__28_26__width_32(unsigned *x ATTRIBUTE_UNUSED, bfd_uint64_t val ATTRIBUTE_UNUSED) {
  x[0] |= ((val&0x7) << 26);
}

static  void set_VINX_IPPU_VCPU_width_32(unsigned *x ATTRIBUTE_UNUSED, bfd_uint64_t val ATTRIBUTE_UNUSED) {
  x[0] |= ((val&0x1) << 19);
}

static  void set_WRITE_MODE_width_32(unsigned *x ATTRIBUTE_UNUSED, bfd_uint64_t val ATTRIBUTE_UNUSED) {
  x[0] |= ((val&0x7) << 3);
}

static  void set_WR_OFFSET_width_32(unsigned *x ATTRIBUTE_UNUSED, bfd_uint64_t val ATTRIBUTE_UNUSED) {
  x[0] |= ((val&0x1ff) << 7);
}

static  void set_reserved_imp_bits__18_3__width_32(unsigned *x ATTRIBUTE_UNUSED, bfd_uint64_t val ATTRIBUTE_UNUSED) {
  x[0] |= ((val&0xffff) << 3);
}

static  void set_reserved_imp_bits__18_5__width_32(unsigned *x ATTRIBUTE_UNUSED, bfd_uint64_t val ATTRIBUTE_UNUSED) {
  x[0] |= ((val&0x3fff) << 5);
}

static  void set_reserved_imp_bits__21_21__width_32(unsigned *x ATTRIBUTE_UNUSED, bfd_uint64_t val ATTRIBUTE_UNUSED) {
  x[0] |= ((val&0x1) << 21);
}

static  void set_reserved_imp_bits__23_20_x_18_10_x_3_3__width_32(unsigned *x ATTRIBUTE_UNUSED, bfd_uint64_t val ATTRIBUTE_UNUSED) {
  x[0] |= ((val&0x1) << 3);
  val >>=   0x1;
  x[0] |= ((val&0x1ff) << 10);
  val >>=   0x9;
  x[0] |= ((val&0xf) << 20);
}

static  void set_reserved_imp_bits__23_22_x_18_16__width_32(unsigned *x ATTRIBUTE_UNUSED, bfd_uint64_t val ATTRIBUTE_UNUSED) {
  x[0] |= ((val&0x7) << 16);
  val >>=   0x3;
  x[0] |= ((val&0x3) << 22);
}

static  void set_reserved_imp_bits__23_22_x_18_16_x_6_5__width_32(unsigned *x ATTRIBUTE_UNUSED, bfd_uint64_t val ATTRIBUTE_UNUSED) {
  x[0] |= ((val&0x3) << 5);
  val >>=   0x2;
  x[0] |= ((val&0x7) << 16);
  val >>=   0x3;
  x[0] |= ((val&0x3) << 22);
}

static  void set_reserved_imp_bits__24_22_x_18_16__width_32(unsigned *x ATTRIBUTE_UNUSED, bfd_uint64_t val ATTRIBUTE_UNUSED) {
  x[0] |= ((val&0x7) << 16);
  val >>=   0x3;
  x[0] |= ((val&0x7) << 22);
}

static  void set_reserved_imp_bits__24_24_x_18_3__width_32(unsigned *x ATTRIBUTE_UNUSED, bfd_uint64_t val ATTRIBUTE_UNUSED) {
  x[0] |= ((val&0xffff) << 3);
  val >>=   0x10;
  x[0] |= ((val&0x1) << 24);
}


//
// Instruction field clearer functions.
//

static  void clear_AA_width_32(unsigned *x ATTRIBUTE_UNUSED) {
    x[0] = x[0] & (~0x100000);
  
}

static  void clear_AM_width_32(unsigned *x ATTRIBUTE_UNUSED) {
    x[0] = x[0] & (~0x300000);
  
}

static  void clear_ARG_IPPU_VCPU_width_32(unsigned *x ATTRIBUTE_UNUSED) {
    x[0] = x[0] & (~0x80000);
  
}

static  void clear_AS2_imp_bits__23_22__width_32(unsigned *x ATTRIBUTE_UNUSED) {
    x[0] = x[0] & (~0xc00000);
  
}

static  void clear_AS_imp_bits__25_24__width_32(unsigned *x ATTRIBUTE_UNUSED) {
    x[0] = x[0] & (~0x3000000);
  
}

static  void clear_BR_MODE_width_32(unsigned *x ATTRIBUTE_UNUSED) {
    x[0] = x[0] & (~0xf0);
  
}

static  void clear_BR_MODE_imp_bits__7_4__width_32(unsigned *x ATTRIBUTE_UNUSED) {
    x[0] = x[0] & (~0xf0);
  
}

static  void clear_CC_width_32(unsigned *x ATTRIBUTE_UNUSED) {
    x[0] = x[0] & (~0x300000);
  
}

static  void clear_CLR_DST_imp_bits__6_3__width_32(unsigned *x ATTRIBUTE_UNUSED) {
    x[0] = x[0] & (~0x78);
  
}

static  void clear_DIGIT_INDEX_imp_bits__23_20__width_32(unsigned *x ATTRIBUTE_UNUSED) {
    x[0] = x[0] & (~0xf00000);
  
}

static  void clear_DST_REG_MX_imp_bits__22_22__width_32(unsigned *x ATTRIBUTE_UNUSED) {
    x[0] = x[0] & (~0x400000);
  
}

static  void clear_DST_REG_NON_MX_imp_bits__25_22__width_32(unsigned *x ATTRIBUTE_UNUSED) {
    x[0] = x[0] & (~0x3c00000);
  
}

static  void clear_DST_REG_imp_bits__25_22__width_32(unsigned *x ATTRIBUTE_UNUSED) {
    x[0] = x[0] & (~0x3c00000);
  
}

static  void clear_ELEM_OFFSET_width_32(unsigned *x ATTRIBUTE_UNUSED) {
    x[0] = x[0] & (~0x70000);
  
}

static  void clear_ER_MODE_width_32(unsigned *x ATTRIBUTE_UNUSED) {
    x[0] = x[0] & (~0xf0);
  
}

static  void clear_ER_MODE_imp_bits__7_4__width_32(unsigned *x ATTRIBUTE_UNUSED) {
    x[0] = x[0] & (~0xf0);
  
}

static  void clear_IDX_IPPU_VCPU_width_32(unsigned *x ATTRIBUTE_UNUSED) {
    x[0] = x[0] & (~0x80000);
  
}

static  void clear_IM11_imp_bits__14_4__width_32(unsigned *x ATTRIBUTE_UNUSED) {
    x[0] = x[0] & (~0x7ff0);
  
}

static  void clear_IM12_imp_bits__15_4__width_32(unsigned *x ATTRIBUTE_UNUSED) {
    x[0] = x[0] & (~0xfff0);
  
}

static  void clear_IM12s_imp_bits__15_4__width_32(unsigned *x ATTRIBUTE_UNUSED) {
    x[0] = x[0] & (~0xfff0);
  
}

static  void clear_IM16R16_width_32(unsigned *x ATTRIBUTE_UNUSED) {
    x[0] = x[0] & (~0xffff0);
  
}

static  void clear_IM19sR17_imp_bits__3_3_x_21_4__width_32(unsigned *x ATTRIBUTE_UNUSED) {
    x[0] = x[0] & (~0x3ffff8);
  
}

static  void clear_IM19s_imp_bits__22_21_x_19_3__width_32(unsigned *x ATTRIBUTE_UNUSED) {
    x[0] = x[0] & (~0x6ffff8);
  
}

static  void clear_IM3_imp_bits__18_16__width_32(unsigned *x ATTRIBUTE_UNUSED) {
    x[0] = x[0] & (~0x70000);
  
}

static  void clear_IM4s_ofst_imp_bits__24_21__width_32(unsigned *x ATTRIBUTE_UNUSED) {
    x[0] = x[0] & (~0x1e00000);
  
}

static  void clear_IM5s_ofst_imp_bits__25_21__width_32(unsigned *x ATTRIBUTE_UNUSED) {
    x[0] = x[0] & (~0x3e00000);
  
}

static  void clear_IM6_imp_bits__9_4__width_32(unsigned *x ATTRIBUTE_UNUSED) {
    x[0] = x[0] & (~0x3f0);
  
}

static  void clear_IM8_imp_bits__11_4__width_32(unsigned *x ATTRIBUTE_UNUSED) {
    x[0] = x[0] & (~0xff0);
  
}

static  void clear_IM8s_imp_bits__28_21__width_32(unsigned *x ATTRIBUTE_UNUSED) {
    x[0] = x[0] & (~0x1fe00000);
  
}

static  void clear_IM8s_ofst_imp_bits__28_21__width_32(unsigned *x ATTRIBUTE_UNUSED) {
    x[0] = x[0] & (~0x1fe00000);
  
}

static  void clear_IM9s_imp_bits__15_7__width_32(unsigned *x ATTRIBUTE_UNUSED) {
    x[0] = x[0] & (~0xff80);
  
}

static  void clear_IM9s_ofst_imp_bits__15_7__width_32(unsigned *x ATTRIBUTE_UNUSED) {
    x[0] = x[0] & (~0xff80);
  
}

static  void clear_IPPU_VCPU_width_32(unsigned *x ATTRIBUTE_UNUSED) {
    x[0] = x[0] & (~0x80000);
  
}

static  void clear_IV_MODE_width_32(unsigned *x ATTRIBUTE_UNUSED) {
    x[0] = x[0] & (~0x18);
  
}

static  void clear_IY_width_32(unsigned *x ATTRIBUTE_UNUSED) {
    x[0] = x[0] & (~0x2000000);
  
}

static  void clear_IY_imp_bits__25_25__width_32(unsigned *x ATTRIBUTE_UNUSED) {
    x[0] = x[0] & (~0x2000000);
  
}

static  void clear_LATCH_MODE_width_32(unsigned *x ATTRIBUTE_UNUSED) {
    x[0] = x[0] & (~0x78);
  
}

static  void clear_LD_MODE_imp_bits__26_24__width_32(unsigned *x ATTRIBUTE_UNUSED) {
    x[0] = x[0] & (~0x7000000);
  
}

static  void clear_LD_MODE_imp_bits__28_26__width_32(unsigned *x ATTRIBUTE_UNUSED) {
    x[0] = x[0] & (~0x1c000000);
  
}

static  void clear_LOOP_AS_IMM_imp_bits__26_26__width_32(unsigned *x ATTRIBUTE_UNUSED) {
    x[0] = x[0] & (~0x4000000);
  
}

static  void clear_LOOP_END_imp_bits__0_0__width_32(unsigned *x ATTRIBUTE_UNUSED) {
    x[0] = x[0] & (~0x1);
  
}

static  void clear_LOOP_INDEX_imp_bits__2_2__width_32(unsigned *x ATTRIBUTE_UNUSED) {
    x[0] = x[0] & (~0x4);
  
}

static  void clear_LOOP_START_imp_bits__1_1__width_32(unsigned *x ATTRIBUTE_UNUSED) {
    x[0] = x[0] & (~0x2);
  
}

static  void clear_MASK_IPPU_VCPU_width_32(unsigned *x ATTRIBUTE_UNUSED) {
    x[0] = x[0] & (~0x80000);
  
}

static  void clear_MM_width_32(unsigned *x ATTRIBUTE_UNUSED) {
    x[0] = x[0] & (~0x400000);
  
}

static  void clear_PLUS_MINUS_width_32(unsigned *x ATTRIBUTE_UNUSED) {
    x[0] = x[0] & (~0x800000);
  
}

static  void clear_RADIX_imp_bits__18_16__width_32(unsigned *x ATTRIBUTE_UNUSED) {
    x[0] = x[0] & (~0x70000);
  
}

static  void clear_RD_OFFSET_width_32(unsigned *x ATTRIBUTE_UNUSED) {
    x[0] = x[0] & (~0xff80);
  
}

static  void clear_SET_LOOP_INDEX_imp_bits__23_23__width_32(unsigned *x ATTRIBUTE_UNUSED) {
    x[0] = x[0] & (~0x800000);
  
}

static  void clear_SRC_REG_imp_bits__21_18__width_32(unsigned *x ATTRIBUTE_UNUSED) {
    x[0] = x[0] & (~0x3c0000);
  
}

static  void clear_ST_MODE_imp_bits__28_26__width_32(unsigned *x ATTRIBUTE_UNUSED) {
    x[0] = x[0] & (~0x1c000000);
  
}

static  void clear_VINX_IPPU_VCPU_width_32(unsigned *x ATTRIBUTE_UNUSED) {
    x[0] = x[0] & (~0x80000);
  
}

static  void clear_WRITE_MODE_width_32(unsigned *x ATTRIBUTE_UNUSED) {
    x[0] = x[0] & (~0x38);
  
}

static  void clear_WR_OFFSET_width_32(unsigned *x ATTRIBUTE_UNUSED) {
    x[0] = x[0] & (~0xff80);
  
}

static  void clear_reserved_imp_bits__18_3__width_32(unsigned *x ATTRIBUTE_UNUSED) {
    x[0] = x[0] & (~0x7fff8);
  
}

static  void clear_reserved_imp_bits__18_5__width_32(unsigned *x ATTRIBUTE_UNUSED) {
    x[0] = x[0] & (~0x7ffe0);
  
}

static  void clear_reserved_imp_bits__21_21__width_32(unsigned *x ATTRIBUTE_UNUSED) {
    x[0] = x[0] & (~0x200000);
  
}

static  void clear_reserved_imp_bits__23_20_x_18_10_x_3_3__width_32(unsigned *x ATTRIBUTE_UNUSED) {
    x[0] = x[0] & (~0xf7fc08);
  
}

static  void clear_reserved_imp_bits__23_22_x_18_16__width_32(unsigned *x ATTRIBUTE_UNUSED) {
    x[0] = x[0] & (~0xc70000);
  
}

static  void clear_reserved_imp_bits__23_22_x_18_16_x_6_5__width_32(unsigned *x ATTRIBUTE_UNUSED) {
    x[0] = x[0] & (~0xc70060);
  
}

static  void clear_reserved_imp_bits__24_22_x_18_16__width_32(unsigned *x ATTRIBUTE_UNUSED) {
    x[0] = x[0] & (~0x1c70000);
  
}

static  void clear_reserved_imp_bits__24_24_x_18_3__width_32(unsigned *x ATTRIBUTE_UNUSED) {
    x[0] = x[0] & (~0x107fff8);
  
}


static bfd_uint64_t IM9_1_256_checker(bfd_uint64_t n, bool check_only){
  bfd_boolean result1 = FALSE;
  bfd_boolean result2 = FALSE;
  if (1ULL <= n && n <= 256ULL) {
      result1 = TRUE;
  } 
  result2 = TRUE;
  
  if (check_only) {
       return (result1 && result2) ? 1 : 0;}
  
  if (!(result1 && result2)) {
      as_fatal(_("Operand IM9_1_256 is out of bounds"));
      return -1;
  }
  return n;
};
// For field AA
static enum_field _sym1[] = { { "a0", 0 }, { "a1", 1 }, };
static enum_fields _sym2 = { _sym1 , 2 };

// For field AM
static enum_field _sym3[] = { { "a0", 0 }, { "a1", 1 }, { "a2", 2 }, { "a3", 3 }, };
static enum_fields _sym4 = { _sym3 , 4 };

// For field ARG_IPPU_VCPU
static enum_field _sym5[] = { { ".arg.ippu", 0 }, { ".arg.vcpu", 1 }, { ".ippu", 0 }, { ".vcpu", 1 }, };
static enum_fields _sym6 = { _sym5 , 4 };

// For field AS
static enum_field _sym7[] = { { "as0", 0 }, { "as1", 1 }, { "as2", 2 }, { "as3", 3 }, };
static enum_fields _sym8 = { _sym7 , 4 };

// For field AS2
static enum_field _sym9[] = { { "as0", 0 }, { "as1", 1 }, { "as2", 2 }, { "as3", 3 }, };
static enum_fields _sym10 = { _sym9 , 4 };

// For field AS2_imp_bits__23_22_
static enum_field _sym11[] = { { "as0", 0 }, { "as1", 1 }, { "as2", 2 }, { "as3", 3 }, };
static enum_fields _sym12 = { _sym11 , 4 };

// For field AS_imp_bits__25_24_
static enum_field _sym13[] = { { "as0", 0 }, { "as1", 1 }, { "as2", 2 }, { "as3", 3 }, };
static enum_fields _sym14 = { _sym13 , 4 };

// For field BR_MODE
static enum_field _sym15[] = { { "fft1024", 5 }, { "fft128", 2 }, { "fft16384", 9 }, { "fft2048", 6 }, { "fft256", 3 }, { "fft32", 0 }, { "fft4096", 7 }, { "fft512", 4 }, { "fft64", 1 }, { "fft8192", 8 }, { "mode0", 0 }, { "mode1", 1 }, { "mode2", 2 }, { "mode3", 3 }, { "mode4", 4 }, { "mode5", 5 }, { "mode6", 6 }, { "mode7", 7 }, { "mode8", 8 }, { "mode9", 9 }, };
static enum_fields _sym16 = { _sym15 , 20 };

// For field BR_MODE_imp_bits__7_4_
static enum_field _sym17[] = { { "fft1024", 5 }, { "fft128", 2 }, { "fft16384", 9 }, { "fft2048", 6 }, { "fft256", 3 }, { "fft32", 0 }, { "fft4096", 7 }, { "fft512", 4 }, { "fft64", 1 }, { "fft8192", 8 }, { "mode0", 0 }, { "mode1", 1 }, { "mode2", 2 }, { "mode3", 3 }, { "mode4", 4 }, { "mode5", 5 }, { "mode6", 6 }, { "mode7", 7 }, { "mode8", 8 }, { "mode9", 9 }, };
static enum_fields _sym18 = { _sym17 , 20 };

// For field CC
static enum_field _sym19[] = { { "", 3 }, { ".nz", 2 }, { ".z", 1 }, };
static enum_fields _sym20 = { _sym19 , 3 };

// For field CLR_DST
static enum_field _sym21[] = { { "r0", 1 }, { "r0,r1", 3 }, { "r0,r1,r2", 7 }, { "r0,r1,r2,r3", 15 }, { "r0,r1,r3", 11 }, { "r0,r1,r3,r2", 15 }, { "r0,r2", 5 }, { "r0,r2,r1", 7 }, { "r0,r2,r1,r3", 15 }, { "r0,r2,r3", 13 }, { "r0,r2,r3,r1", 15 }, { "r0,r3", 9 }, { "r0,r3,r1", 11 }, { "r0,r3,r1,r2", 15 }, { "r0,r3,r2", 13 }, { "r0,r3,r2,r1", 15 }, { "r1", 2 }, { "r1,r0", 3 }, { "r1,r0,r2", 7 }, { "r1,r0,r2,r3", 15 }, { "r1,r0,r3", 11 }, { "r1,r0,r3,r2", 15 }, { "r1,r2", 6 }, { "r1,r2,r0", 7 }, { "r1,r2,r0,r3", 15 }, { "r1,r2,r3", 14 }, { "r1,r2,r3,r0", 15 }, { "r1,r3", 10 }, { "r1,r3,r0", 11 }, { "r1,r3,r0,r2", 15 }, { "r1,r3,r2", 14 }, { "r1,r3,r2,r0", 15 }, { "r2", 4 }, { "r2,r0", 5 }, { "r2,r0,r1", 7 }, { "r2,r0,r1,r3", 15 }, { "r2,r0,r3", 13 }, { "r2,r0,r3,r1", 15 }, { "r2,r1", 6 }, { "r2,r1,r0", 7 }, { "r2,r1,r0,r3", 15 }, { "r2,r1,r3", 14 }, { "r2,r1,r3,r0", 15 }, { "r2,r3", 12 }, { "r2,r3,r0", 13 }, { "r2,r3,r0,r1", 15 }, { "r2,r3,r1", 14 }, { "r2,r3,r1,r0", 15 }, { "r3", 8 }, { "r3,r0", 9 }, { "r3,r0,r1", 11 }, { "r3,r0,r1,r2", 15 }, { "r3,r0,r2", 13 }, { "r3,r0,r2,r1", 15 }, { "r3,r1", 10 }, { "r3,r1,r0", 11 }, { "r3,r1,r0,r2", 15 }, { "r3,r1,r2", 14 }, { "r3,r1,r2,r0", 15 }, { "r3,r2", 12 }, { "r3,r2,r0", 13 }, { "r3,r2,r0,r1", 15 }, { "r3,r2,r1", 14 }, { "r3,r2,r1,r0", 15 }, };
static enum_fields _sym22 = { _sym21 , 64 };

// For field CLR_DST_imp_bits__6_3_
static enum_field _sym23[] = { { "r0", 1 }, { "r0,r1", 3 }, { "r0,r1,r2", 7 }, { "r0,r1,r2,r3", 15 }, { "r0,r1,r3", 11 }, { "r0,r1,r3,r2", 15 }, { "r0,r2", 5 }, { "r0,r2,r1", 7 }, { "r0,r2,r1,r3", 15 }, { "r0,r2,r3", 13 }, { "r0,r2,r3,r1", 15 }, { "r0,r3", 9 }, { "r0,r3,r1", 11 }, { "r0,r3,r1,r2", 15 }, { "r0,r3,r2", 13 }, { "r0,r3,r2,r1", 15 }, { "r1", 2 }, { "r1,r0", 3 }, { "r1,r0,r2", 7 }, { "r1,r0,r2,r3", 15 }, { "r1,r0,r3", 11 }, { "r1,r0,r3,r2", 15 }, { "r1,r2", 6 }, { "r1,r2,r0", 7 }, { "r1,r2,r0,r3", 15 }, { "r1,r2,r3", 14 }, { "r1,r2,r3,r0", 15 }, { "r1,r3", 10 }, { "r1,r3,r0", 11 }, { "r1,r3,r0,r2", 15 }, { "r1,r3,r2", 14 }, { "r1,r3,r2,r0", 15 }, { "r2", 4 }, { "r2,r0", 5 }, { "r2,r0,r1", 7 }, { "r2,r0,r1,r3", 15 }, { "r2,r0,r3", 13 }, { "r2,r0,r3,r1", 15 }, { "r2,r1", 6 }, { "r2,r1,r0", 7 }, { "r2,r1,r0,r3", 15 }, { "r2,r1,r3", 14 }, { "r2,r1,r3,r0", 15 }, { "r2,r3", 12 }, { "r2,r3,r0", 13 }, { "r2,r3,r0,r1", 15 }, { "r2,r3,r1", 14 }, { "r2,r3,r1,r0", 15 }, { "r3", 8 }, { "r3,r0", 9 }, { "r3,r0,r1", 11 }, { "r3,r0,r1,r2", 15 }, { "r3,r0,r2", 13 }, { "r3,r0,r2,r1", 15 }, { "r3,r1", 10 }, { "r3,r1,r0", 11 }, { "r3,r1,r0,r2", 15 }, { "r3,r1,r2", 14 }, { "r3,r1,r2,r0", 15 }, { "r3,r2", 12 }, { "r3,r2,r0", 13 }, { "r3,r2,r0,r1", 15 }, { "r3,r2,r1", 14 }, { "r3,r2,r1,r0", 15 }, };
static enum_fields _sym24 = { _sym23 , 64 };

// For field DIGIT_INDEX
static enum_field _sym25[] = { { "1", 1 }, { "10", 10 }, { "2", 2 }, { "3", 3 }, { "4", 4 }, { "5", 5 }, { "6", 6 }, { "7", 7 }, { "8", 8 }, { "9", 9 }, };
static enum_fields _sym26 = { _sym25 , 10 };

// For field DIGIT_INDEX_imp_bits__23_20_
static enum_field _sym27[] = { { "1", 1 }, { "10", 10 }, { "2", 2 }, { "3", 3 }, { "4", 4 }, { "5", 5 }, { "6", 6 }, { "7", 7 }, { "8", 8 }, { "9", 9 }, };
static enum_fields _sym28 = { _sym27 , 10 };

// For field DST_REG
static enum_field _sym29[] = { { "a0", 0 }, { "a1", 1 }, { "a2", 9 }, { "a3", 10 }, { "as0", 4 }, { "as1", 5 }, { "as2", 6 }, { "as3", 7 }, { "elem_mask_ptr", 13 }, { "m0", 2 }, { "m1", 3 }, { "mem_elem_rd_ptr", 14 }, { "mem_elem_wr_ptr", 15 }, { "r_rd_ptr", 11 }, { "r_wr_ptr", 12 }, { "vindx_ptr", 8 }, };
static enum_fields _sym30 = { _sym29 , 16 };

// For field DST_REG_MX
static enum_field _sym31[] = { { "m0", 0 }, { "m1", 1 }, };
static enum_fields _sym32 = { _sym31 , 2 };

// For field DST_REG_MX_imp_bits__22_22_
static enum_field _sym33[] = { { "m0", 0 }, { "m1", 1 }, };
static enum_fields _sym34 = { _sym33 , 2 };

// For field DST_REG_NON_MX
static enum_field _sym35[] = { { "a0", 0 }, { "a1", 1 }, { "a2", 9 }, { "a3", 10 }, { "as0", 4 }, { "as1", 5 }, { "as2", 6 }, { "as3", 7 }, { "elem_mask_ptr", 13 }, { "mem_elem_rd_ptr", 14 }, { "mem_elem_wr_ptr", 15 }, { "r_rd_ptr", 11 }, { "r_wr_ptr", 12 }, { "vindx_ptr", 8 }, };
static enum_fields _sym36 = { _sym35 , 14 };

// For field DST_REG_NON_MX_imp_bits__25_22_
static enum_field _sym37[] = { { "a0", 0 }, { "a1", 1 }, { "a2", 9 }, { "a3", 10 }, { "as0", 4 }, { "as1", 5 }, { "as2", 6 }, { "as3", 7 }, { "elem_mask_ptr", 13 }, { "mem_elem_rd_ptr", 14 }, { "mem_elem_wr_ptr", 15 }, { "r_rd_ptr", 11 }, { "r_wr_ptr", 12 }, { "vindx_ptr", 8 }, };
static enum_fields _sym38 = { _sym37 , 14 };

// For field DST_REG_imp_bits__25_22_
static enum_field _sym39[] = { { "a0", 0 }, { "a1", 1 }, { "a2", 9 }, { "a3", 10 }, { "as0", 4 }, { "as1", 5 }, { "as2", 6 }, { "as3", 7 }, { "elem_mask_ptr", 13 }, { "m0", 2 }, { "m1", 3 }, { "mem_elem_rd_ptr", 14 }, { "mem_elem_wr_ptr", 15 }, { "r_rd_ptr", 11 }, { "r_wr_ptr", 12 }, { "vindx_ptr", 8 }, };
static enum_fields _sym40 = { _sym39 , 16 };

// For field ER_MODE
static enum_field _sym41[] = { { "er16", 5 }, { "er32", 4 }, { "er64", 3 }, };
static enum_fields _sym42 = { _sym41 , 3 };

// For field ER_MODE_imp_bits__7_4_
static enum_field _sym43[] = { { "er16", 5 }, { "er32", 4 }, { "er64", 3 }, };
static enum_fields _sym44 = { _sym43 , 3 };

// For field IDX_IPPU_VCPU
static enum_field _sym45[] = { { ".index.ippu", 0 }, { ".index.vcpu", 1 }, };
static enum_fields _sym46 = { _sym45 , 2 };

// For field IPPU_VCPU
static enum_field _sym47[] = { { ".ippu", 0 }, { ".vcpu", 1 }, };
static enum_fields _sym48 = { _sym47 , 2 };

// For field IV_MODE
static enum_field _sym49[] = { { "e32", 1 }, { "e64", 2 }, };
static enum_fields _sym50 = { _sym49 , 2 };

// For field IY
static enum_field _sym51[] = { { "i0", 0 }, { "i1", 1 }, };
static enum_fields _sym52 = { _sym51 , 2 };

// For field IY_imp_bits__25_25_
static enum_field _sym53[] = { { "i0", 0 }, { "i1", 1 }, };
static enum_fields _sym54 = { _sym53 , 2 };

// For field LATCH_MODE
static enum_field _sym55[] = { { "H2H", 11 }, { "H2L", 9 }, { "L2H", 8 }, { "L2L", 10 }, { "brmr", 12 }, { "e128", 2 }, { "e16", 5 }, { "e256", 1 }, { "e32", 4 }, { "e4", 7 }, { "e64", 3 }, { "e8", 6 }, { "er", 13 }, { "h2h", 11 }, { "h2l", 9 }, { "l2h", 8 }, { "l2l", 10 }, { "normal", 0 }, };
static enum_fields _sym56 = { _sym55 , 18 };

// For field LD_MODE
static enum_field _sym57[] = { { "br", 1 }, { "br_dr", 3 }, { "dr", 2 }, { "ind", 5 }, { "normal", 0 }, { "ri", 6 }, { "vindirect", 4 }, };
static enum_fields _sym58 = { _sym57 , 7 };

// For field LD_MODE_imp_bits__26_24_
static enum_field _sym59[] = { { "br", 1 }, { "br_dr", 3 }, { "dr", 2 }, { "ind", 5 }, { "normal", 0 }, { "ri", 6 }, { "vindirect", 4 }, };
static enum_fields _sym60 = { _sym59 , 7 };

// For field LD_MODE_imp_bits__28_26_
static enum_field _sym61[] = { { "br", 1 }, { "br_dr", 3 }, { "dr", 2 }, { "ind", 5 }, { "normal", 0 }, { "ri", 6 }, { "vindirect", 4 }, };
static enum_fields _sym62 = { _sym61 , 7 };

// For field LOOP_AS_IMM
static enum_field _sym63[] = { { "as", 1 }, { "imm", 0 }, };
static enum_fields _sym64 = { _sym63 , 2 };

// For field LOOP_AS_IMM_imp_bits__26_26_
static enum_field _sym65[] = { { "as", 1 }, { "imm", 0 }, };
static enum_fields _sym66 = { _sym65 , 2 };

// For field MASK_IPPU_VCPU
static enum_field _sym67[] = { { ".mask.ippu", 0 }, { ".mask.vcpu", 1 }, };
static enum_fields _sym68 = { _sym67 , 2 };

// For field MM
static enum_field _sym69[] = { { "m0", 0 }, { "m1", 1 }, };
static enum_fields _sym70 = { _sym69 , 2 };

// For field PLUS_MINUS
static enum_field _sym71[] = { { "+", 0 }, { "-", 1 }, };
static enum_fields _sym72 = { _sym71 , 2 };

// For field SRC_REG
static enum_field _sym73[] = { { "a0", 0 }, { "a1", 1 }, { "a2", 9 }, { "a3", 10 }, { "as0", 4 }, { "as1", 5 }, { "as2", 6 }, { "as3", 7 }, { "elem_mask_ptr", 13 }, { "m0", 2 }, { "m1", 3 }, { "mem_elem_rd_ptr", 14 }, { "mem_elem_wr_ptr", 15 }, { "r_rd_ptr", 11 }, { "r_wr_ptr", 12 }, { "vindx_ptr", 8 }, };
static enum_fields _sym74 = { _sym73 , 16 };

// For field SRC_REG_imp_bits__21_18_
static enum_field _sym75[] = { { "a0", 0 }, { "a1", 1 }, { "a2", 9 }, { "a3", 10 }, { "as0", 4 }, { "as1", 5 }, { "as2", 6 }, { "as3", 7 }, { "elem_mask_ptr", 13 }, { "m0", 2 }, { "m1", 3 }, { "mem_elem_rd_ptr", 14 }, { "mem_elem_wr_ptr", 15 }, { "r_rd_ptr", 11 }, { "r_wr_ptr", 12 }, { "vindx_ptr", 8 }, };
static enum_fields _sym76 = { _sym75 , 16 };

// For field ST_MODE
static enum_field _sym77[] = { { "br", 1 }, { "br_dr", 3 }, { "dr", 2 }, { "indirect", 5 }, { "normal", 0 }, { "ri", 6 }, };
static enum_fields _sym78 = { _sym77 , 6 };

// For field ST_MODE_imp_bits__28_26_
static enum_field _sym79[] = { { "br", 1 }, { "br_dr", 3 }, { "dr", 2 }, { "indirect", 5 }, { "normal", 0 }, { "ri", 6 }, };
static enum_fields _sym80 = { _sym79 , 6 };

// For field VINX_IPPU_VCPU
static enum_field _sym81[] = { { ".vinx.ippu", 0 }, { ".vinx.vcpu", 1 }, };
static enum_fields _sym82 = { _sym81 , 2 };

// For field WRITE_MODE
static enum_field _sym83[] = { { "e16", 2 }, { "e32", 1 }, { "normal", 0 }, { "r2", 5 }, { "r3", 6 }, };
static enum_fields _sym84 = { _sym83 , 5 };

// Instruction operands.
static struct adl_field ppc_operands [] = {
  {"AA_width_32",0,0,1,set_AA_width_32,clear_AA_width_32,0,-1,-1,0,-1,0,&_sym2,0},	// 0
  {"AM_width_32",1,1,2,set_AM_width_32,clear_AM_width_32,0,-1,-1,0,-1,0,&_sym4,0},	// 1
  {"ARG_IPPU_VCPU_width_32",2,2,1,set_ARG_IPPU_VCPU_width_32,clear_ARG_IPPU_VCPU_width_32,0,-1,-1,0,-1,0,&_sym6,0},	// 2
  {"AS",3,3,2,0,0,0,-1,-1,0,-1,0,&_sym8,0},	// 3
  {"AS2",4,4,2,0,0,0,-1,-1,0,-1,0,&_sym10,0},	// 4
  {"AS2_imp_bits__23_22__width_32",4,4,2,set_AS2_imp_bits__23_22__width_32,clear_AS2_imp_bits__23_22__width_32,0,-1,-1,0,-1,0,&_sym12,0},	// 5
  {"AS_IMM",6,6,1,0,0,0,-1,-1,0,-1,0,0,0},	// 6
  {"AS_imp_bits__25_24__width_32",3,3,2,set_AS_imp_bits__25_24__width_32,clear_AS_imp_bits__25_24__width_32,0,-1,-1,0,-1,0,&_sym14,0},	// 7
  {"BR_MODE_width_32",8,8,4,set_BR_MODE_width_32,clear_BR_MODE_width_32,0,-1,-1,0,-1,0,&_sym16,0},	// 8
  {"BR_MODE_imp_bits__7_4__width_32",8,8,4,set_BR_MODE_imp_bits__7_4__width_32,clear_BR_MODE_imp_bits__7_4__width_32,0,-1,-1,0,-1,0,&_sym18,0},	// 9
  {"CC_width_32",10,10,2,set_CC_width_32,clear_CC_width_32,0,-1,-1,0,-1,0,&_sym20,0},	// 10
  {"CLR_DST",11,11,4,0,0,0,-1,-1,0,-1,0,&_sym22,0},	// 11
  {"CLR_DST_imp_bits__6_3__width_32",11,11,4,set_CLR_DST_imp_bits__6_3__width_32,clear_CLR_DST_imp_bits__6_3__width_32,0,-1,-1,0,-1,0,&_sym24,0},	// 12
  {"DIGIT_INDEX",13,13,4,0,0,0,-1,-1,0,-1,0,&_sym26,0},	// 13
  {"DIGIT_INDEX_imp_bits__23_20__width_32",13,13,4,set_DIGIT_INDEX_imp_bits__23_20__width_32,clear_DIGIT_INDEX_imp_bits__23_20__width_32,0,-1,-1,0,-1,0,&_sym28,0},	// 14
  {"DST_REG",15,15,4,0,0,0,-1,-1,0,-1,0,&_sym30,0},	// 15
  {"DST_REG_MX",16,16,1,0,0,0,-1,-1,0,-1,0,&_sym32,0},	// 16
  {"DST_REG_MX_imp_bits__22_22__width_32",16,16,1,set_DST_REG_MX_imp_bits__22_22__width_32,clear_DST_REG_MX_imp_bits__22_22__width_32,0,-1,-1,0,-1,0,&_sym34,0},	// 17
  {"DST_REG_NON_MX",18,18,4,0,0,0,-1,-1,0,-1,0,&_sym36,0},	// 18
  {"DST_REG_NON_MX_imp_bits__25_22__width_32",18,18,4,set_DST_REG_NON_MX_imp_bits__25_22__width_32,clear_DST_REG_NON_MX_imp_bits__25_22__width_32,0,-1,-1,0,-1,0,&_sym38,0},	// 19
  {"DST_REG_imp_bits__25_22__width_32",15,15,4,set_DST_REG_imp_bits__25_22__width_32,clear_DST_REG_imp_bits__25_22__width_32,0,-1,-1,0,-1,0,&_sym40,0},	// 20
  {"ELEM_OFFSET_width_32",21,21,3,set_ELEM_OFFSET_width_32,clear_ELEM_OFFSET_width_32,0,-1,-1,0,-1,0,0,0},	// 21
  {"ER_MODE_width_32",22,22,4,set_ER_MODE_width_32,clear_ER_MODE_width_32,0,-1,-1,0,-1,0,&_sym42,0},	// 22
  {"ER_MODE_imp_bits__7_4__width_32",22,22,4,set_ER_MODE_imp_bits__7_4__width_32,clear_ER_MODE_imp_bits__7_4__width_32,0,-1,-1,0,-1,0,&_sym44,0},	// 23
  {"IDX_IPPU_VCPU_width_32",24,24,1,set_IDX_IPPU_VCPU_width_32,clear_IDX_IPPU_VCPU_width_32,0,-1,-1,0,-1,0,&_sym46,0},	// 24
  {"IM11",25,25,11,0,0,0,-1,-1,0,-1,0,0,0},	// 25
  {"IM11_imp_bits__14_4__width_32",25,25,11,set_IM11_imp_bits__14_4__width_32,clear_IM11_imp_bits__14_4__width_32,0,-1,-1,0,-1,0,0,0},	// 26
  {"IM12",27,27,12,0,0,0,-1,-1,0,-1,0,0,0},	// 27
  {"IM12_imp_bits__15_4__width_32",27,27,12,set_IM12_imp_bits__15_4__width_32,clear_IM12_imp_bits__15_4__width_32,0,-1,-1,0,-1,0,0,0},	// 28
  {"IM12s",29,29,12,0,0,0,-1,-1,0,-1,0,0,0},	// 29
  {"IM12s_imp_bits__15_4__width_32",29,29,12,set_IM12s_imp_bits__15_4__width_32,clear_IM12s_imp_bits__15_4__width_32,0,-1,-1,0,-1,0,0,0},	// 30
  {"IM16R16_width_32",31,31,16,set_IM16R16_width_32,clear_IM16R16_width_32,0,-1,16,0,-1,0,0,0},	// 31
  {"IM19s",32,32,19,0,0,0,-1,-1,0,-1,0,0,0},	// 32
  {"IM19sR17",33,33,19,0,0,0,-1,17,0,-1,0,0,0},	// 33
  {"IM19sR17_imp_bits__3_3_x_21_4__width_32",33,33,19,set_IM19sR17_imp_bits__3_3_x_21_4__width_32,clear_IM19sR17_imp_bits__3_3_x_21_4__width_32,0,-1,17,0,-1,0,0,0},	// 34
  {"IM19s_imp_bits__22_21_x_19_3__width_32",32,32,19,set_IM19s_imp_bits__22_21_x_19_3__width_32,clear_IM19s_imp_bits__22_21_x_19_3__width_32,0,-1,-1,0,-1,0,0,0},	// 35
  {"IM3",36,36,3,0,0,0,-1,-1,0,-1,0,0,0},	// 36
  {"IM3_imp_bits__18_16__width_32",36,36,3,set_IM3_imp_bits__18_16__width_32,clear_IM3_imp_bits__18_16__width_32,0,-1,-1,0,-1,0,0,0},	// 37
  {"IM4s",38,38,4,0,0,0,-1,-1,0,-1,0,0,0},	// 38
  {"IM4s_ofst",39,39,4,0,0,0,-1,-1,0,-1,0,0,0},	// 39
  {"IM4s_ofst_imp_bits__24_21__width_32",39,39,4,set_IM4s_ofst_imp_bits__24_21__width_32,clear_IM4s_ofst_imp_bits__24_21__width_32,0,-1,-1,0,-1,0,0,0},	// 40
  {"IM5s",41,41,5,0,0,0,-1,-1,0,-1,0,0,0},	// 41
  {"IM5s_ofst",42,42,5,0,0,0,-1,-1,0,-1,0,0,0},	// 42
  {"IM5s_ofst_imp_bits__25_21__width_32",42,42,5,set_IM5s_ofst_imp_bits__25_21__width_32,clear_IM5s_ofst_imp_bits__25_21__width_32,0,-1,-1,0,-1,0,0,0},	// 43
  {"IM6",44,44,6,0,0,0,-1,-1,0,-1,0,0,0},	// 44
  {"IM6_imp_bits__9_4__width_32",44,44,6,set_IM6_imp_bits__9_4__width_32,clear_IM6_imp_bits__9_4__width_32,0,-1,-1,0,-1,0,0,0},	// 45
  {"IM8",46,46,8,0,0,0,-1,-1,0,-1,0,0,0},	// 46
  {"IM8_imp_bits__11_4__width_32",46,46,8,set_IM8_imp_bits__11_4__width_32,clear_IM8_imp_bits__11_4__width_32,0,-1,-1,0,-1,0,0,0},	// 47
  {"IM8s",48,48,8,0,0,0,-1,-1,0,-1,0,0,0},	// 48
  {"IM8s_imp_bits__28_21__width_32",48,48,8,set_IM8s_imp_bits__28_21__width_32,clear_IM8s_imp_bits__28_21__width_32,0,-1,-1,0,-1,0,0,0},	// 49
  {"IM8s_ofst",50,50,8,0,0,0,-1,-1,0,-1,0,0,0},	// 50
  {"IM8s_ofst_imp_bits__28_21__width_32",50,50,8,set_IM8s_ofst_imp_bits__28_21__width_32,clear_IM8s_ofst_imp_bits__28_21__width_32,0,-1,-1,0,-1,0,0,0},	// 51
  {"IM9_1_256",52,52,9,0,0,0,-1,-1,0,-1,0,0,0},	// 52
  {"IM9s",53,53,9,0,0,0,-1,-1,0,-1,0,0,0},	// 53
  {"IM9s_imp_bits__15_7__width_32",53,53,9,set_IM9s_imp_bits__15_7__width_32,clear_IM9s_imp_bits__15_7__width_32,0,-1,-1,0,-1,0,0,0},	// 54
  {"IM9s_ofst",55,55,9,0,0,0,-1,-1,0,-1,0,0,0},	// 55
  {"IM9s_ofst_imp_bits__15_7__width_32",55,55,9,set_IM9s_ofst_imp_bits__15_7__width_32,clear_IM9s_ofst_imp_bits__15_7__width_32,0,-1,-1,0,-1,0,0,0},	// 56
  {"IPPU_VCPU_width_32",57,57,1,set_IPPU_VCPU_width_32,clear_IPPU_VCPU_width_32,0,-1,-1,0,-1,0,&_sym48,0},	// 57
  {"IV_MODE_width_32",58,58,2,set_IV_MODE_width_32,clear_IV_MODE_width_32,0,-1,-1,0,-1,0,&_sym50,0},	// 58
  {"IY_width_32",59,59,1,set_IY_width_32,clear_IY_width_32,0,-1,-1,0,-1,0,&_sym52,0},	// 59
  {"IY_imp_bits__25_25__width_32",59,59,1,set_IY_imp_bits__25_25__width_32,clear_IY_imp_bits__25_25__width_32,0,-1,-1,0,-1,0,&_sym54,0},	// 60
  {"LATCH_MODE_width_32",61,61,4,set_LATCH_MODE_width_32,clear_LATCH_MODE_width_32,0,-1,-1,0,-1,0,&_sym56,0},	// 61
  {"LD_MODE",62,62,3,0,0,0,-1,-1,0,-1,0,&_sym58,0},	// 62
  {"LD_MODE_imp_bits__26_24__width_32",62,62,3,set_LD_MODE_imp_bits__26_24__width_32,clear_LD_MODE_imp_bits__26_24__width_32,0,-1,-1,0,-1,0,&_sym60,0},	// 63
  {"LD_MODE_imp_bits__28_26__width_32",62,62,3,set_LD_MODE_imp_bits__28_26__width_32,clear_LD_MODE_imp_bits__28_26__width_32,0,-1,-1,0,-1,0,&_sym62,0},	// 64
  {"LOOP_AS_IMM",65,65,1,0,0,0,-1,-1,0,-1,0,&_sym64,0},	// 65
  {"LOOP_AS_IMM_imp_bits__26_26__width_32",65,65,1,set_LOOP_AS_IMM_imp_bits__26_26__width_32,clear_LOOP_AS_IMM_imp_bits__26_26__width_32,0,-1,-1,0,-1,0,&_sym66,0},	// 66
  {"LOOP_END",67,67,1,0,0,0,0,-1,0,-1,1,0,0},	// 67
  {"LOOP_END_imp_bits__0_0__width_32",67,67,1,set_LOOP_END_imp_bits__0_0__width_32,clear_LOOP_END_imp_bits__0_0__width_32,0,0,-1,0,-1,1,0,0},	// 68
  {"LOOP_INDEX",69,69,1,0,0,0,0,-1,0,-1,1,0,0},	// 69
  {"LOOP_INDEX_imp_bits__2_2__width_32",69,69,1,set_LOOP_INDEX_imp_bits__2_2__width_32,clear_LOOP_INDEX_imp_bits__2_2__width_32,0,0,-1,0,-1,1,0,0},	// 70
  {"LOOP_START",71,71,1,0,0,0,0,-1,0,-1,1,0,0},	// 71
  {"LOOP_START_imp_bits__1_1__width_32",71,71,1,set_LOOP_START_imp_bits__1_1__width_32,clear_LOOP_START_imp_bits__1_1__width_32,0,0,-1,0,-1,1,0,0},	// 72
  {"MASK_IPPU_VCPU_width_32",73,73,1,set_MASK_IPPU_VCPU_width_32,clear_MASK_IPPU_VCPU_width_32,0,-1,-1,0,-1,0,&_sym68,0},	// 73
  {"MM_width_32",74,74,1,set_MM_width_32,clear_MM_width_32,0,-1,-1,0,-1,0,&_sym70,0},	// 74
  {"PLUS_MINUS_width_32",75,75,1,set_PLUS_MINUS_width_32,clear_PLUS_MINUS_width_32,0,-1,-1,0,-1,0,&_sym72,0},	// 75
  {"RADIX",76,76,3,0,0,0,-1,-1,0,-1,0,0,0},	// 76
  {"RADIX_imp_bits__18_16__width_32",76,76,3,set_RADIX_imp_bits__18_16__width_32,clear_RADIX_imp_bits__18_16__width_32,0,-1,-1,0,-1,0,0,0},	// 77
  {"RD_OFFSET_width_32",78,78,9,set_RD_OFFSET_width_32,clear_RD_OFFSET_width_32,0,-1,-1,0,-1,0,0,0},	// 78
  {"SET_LOOP_INDEX",79,79,1,0,0,0,-1,-1,0,-1,0,0,0},	// 79
  {"SET_LOOP_INDEX_imp_bits__23_23__width_32",79,79,1,set_SET_LOOP_INDEX_imp_bits__23_23__width_32,clear_SET_LOOP_INDEX_imp_bits__23_23__width_32,0,-1,-1,0,-1,0,0,0},	// 80
  {"SRC_REG",81,81,4,0,0,0,-1,-1,0,-1,0,&_sym74,0},	// 81
  {"SRC_REG_imp_bits__21_18__width_32",81,81,4,set_SRC_REG_imp_bits__21_18__width_32,clear_SRC_REG_imp_bits__21_18__width_32,0,-1,-1,0,-1,0,&_sym76,0},	// 82
  {"ST_MODE",83,83,3,0,0,0,-1,-1,0,-1,0,&_sym78,0},	// 83
  {"ST_MODE_imp_bits__28_26__width_32",83,83,3,set_ST_MODE_imp_bits__28_26__width_32,clear_ST_MODE_imp_bits__28_26__width_32,0,-1,-1,0,-1,0,&_sym80,0},	// 84
  {"VINX_IPPU_VCPU_width_32",85,85,1,set_VINX_IPPU_VCPU_width_32,clear_VINX_IPPU_VCPU_width_32,0,-1,-1,0,-1,0,&_sym82,0},	// 85
  {"WRITE_MODE_width_32",100,86,3,set_WRITE_MODE_width_32,clear_WRITE_MODE_width_32,0,-1,-1,0,-1,0,&_sym84,0},	// 86
  {"WR_OFFSET_width_32",101,87,9,set_WR_OFFSET_width_32,clear_WR_OFFSET_width_32,0,-1,-1,0,-1,0,0,0},	// 87
  {"reserved_imp_bits__18_3__width_32",102,88,16,set_reserved_imp_bits__18_3__width_32,clear_reserved_imp_bits__18_3__width_32,0,-1,-1,0,-1,0,0,0},	// 88
  {"reserved_imp_bits__18_5__width_32",103,89,14,set_reserved_imp_bits__18_5__width_32,clear_reserved_imp_bits__18_5__width_32,0,-1,-1,0,-1,0,0,0},	// 89
  {"reserved_imp_bits__21_21__width_32",104,90,1,set_reserved_imp_bits__21_21__width_32,clear_reserved_imp_bits__21_21__width_32,0,-1,-1,0,-1,0,0,0},	// 90
  {"reserved_imp_bits__23_20_x_18_10_x_3_3__width_32",105,91,14,set_reserved_imp_bits__23_20_x_18_10_x_3_3__width_32,clear_reserved_imp_bits__23_20_x_18_10_x_3_3__width_32,0,-1,-1,0,-1,0,0,0},	// 91
  {"reserved_imp_bits__23_22_x_18_16__width_32",106,92,5,set_reserved_imp_bits__23_22_x_18_16__width_32,clear_reserved_imp_bits__23_22_x_18_16__width_32,0,-1,-1,0,-1,0,0,0},	// 92
  {"reserved_imp_bits__23_22_x_18_16_x_6_5__width_32",107,93,7,set_reserved_imp_bits__23_22_x_18_16_x_6_5__width_32,clear_reserved_imp_bits__23_22_x_18_16_x_6_5__width_32,0,-1,-1,0,-1,0,0,0},	// 93
  {"reserved_imp_bits__24_22_x_18_16__width_32",108,94,6,set_reserved_imp_bits__24_22_x_18_16__width_32,clear_reserved_imp_bits__24_22_x_18_16__width_32,0,-1,-1,0,-1,0,0,0},	// 94
  {"reserved_imp_bits__24_24_x_18_3__width_32",109,95,17,set_reserved_imp_bits__24_24_x_18_3__width_32,clear_reserved_imp_bits__24_24_x_18_3__width_32,0,-1,-1,0,-1,0,0,0},	// 95
};

static const int num_ppc_operands = 96;

static struct adl_name_pair ppc_operands_by_index [] = {
  { "AA", 0 },
  { "AM", 1 },
  { "ARG_IPPU_VCPU", 2 },
  { "AS", 3 },
  { "AS2", 4 },
  { "BR_MODE", 8 },
  { "CC", 10 },
  { "CLR_DST", 11 },
  { "DIGIT_INDEX", 13 },
  { "DST_REG", 15 },
  { "DST_REG_MX", 16 },
  { "DST_REG_NON_MX", 18 },
  { "ELEM_OFFSET", 21 },
  { "ER_MODE", 22 },
  { "IDX_IPPU_VCPU", 24 },
  { "IM11", 25 },
  { "IM12", 27 },
  { "IM12s", 29 },
  { "IM16R16", 31 },
  { "IM19s", 32 },
  { "IM19sR17", 33 },
  { "IM3", 36 },
  { "IM4s_ofst", 39 },
  { "IM5s_ofst", 42 },
  { "IM6", 44 },
  { "IM8", 46 },
  { "IM8s", 48 },
  { "IM8s_ofst", 50 },
  { "IM9s", 53 },
  { "IM9s_ofst", 55 },
  { "IPPU_VCPU", 57 },
  { "IV_MODE", 58 },
  { "IY", 59 },
  { "LATCH_MODE", 61 },
  { "LD_MODE", 62 },
  { "LOOP_AS_IMM", 65 },
  { "LOOP_END", 67 },
  { "LOOP_INDEX", 69 },
  { "LOOP_START", 71 },
  { "MASK_IPPU_VCPU", 73 },
  { "MM", 74 },
  { "PLUS_MINUS", 75 },
  { "RADIX", 76 },
  { "RD_OFFSET", 78 },
  { "SET_LOOP_INDEX", 79 },
  { "SRC_REG", 81 },
  { "ST_MODE", 83 },
  { "VINX_IPPU_VCPU", 85 },
  { "WRITE_MODE", 86 },
  { "WR_OFFSET", 87 },
  { "VarInstrOpcode_imp_bits__2_0_", 4294967295 },
};

static const int num_ppc_operands_by_index = 51;

enum InstrBlocks {
};


// Instruction add_aX_Is8
static adl_instr_attrs _sym85 = { ((uint64_t)(1ULL << instr_ippu)) , 0 };

// Instruction add_aX_Is8
static struct adl_operand _sym86_operands_operands[] = { {0, 0, ADL_REGISTER, 0, 0, 11, 0ull, 0x1ull, 0ull, 0, 0, 0, 0, 0,-1,-1,0},{49, 1, ADL_SIGNED, 0, 0, 3, ((bfd_int64_t)18446744073709551489ull-1), 127ull, 0ull, 0, 0, 0, 0, 0,-1,-1,0},{70, 2, 0, 0, 0, 29, 0ull, 0x1ull, 0ull, 0, 0, 0, 0, 0,-1,-1,0},{72, 3, 0, 0, 0, 30, 0ull, 0x1ull, 0ull, 0, 0, 0, 0, 0,-1,-1,0},{68, 4, 0, 0, 0, 31, 0ull, 0x1ull, 0ull, 0, 0, 0, 0, 0,-1,-1,0}, };
static struct enum_fields *_sym87[] = { &_sym2, 0,  (struct enum_fields *) -1,};

// Instruction add_aX_mY
static adl_instr_attrs _sym88 = { ((uint64_t)(1ULL << instr_ippu)) , 0 };

// Instruction add_aX_mY
static struct adl_operand _sym89_operands_operands[] = { {0, 0, ADL_REGISTER, 0, 0, 11, 0ull, 0x1ull, 0ull, 0, 0, 0, 0, 0,-1,-1,0},{74, 1, ADL_REGISTER, 0, 0, 9, 0ull, 0x1ull, 0ull, 0, 0, 0, 0, 0,-1,-1,0},{70, 2, 0, 0, 0, 29, 0ull, 0x1ull, 0ull, 0, 0, 0, 0, 0,-1,-1,0},{72, 3, 0, 0, 0, 30, 0ull, 0x1ull, 0ull, 0, 0, 0, 0, 0,-1,-1,0},{68, 4, 0, 0, 0, 31, 0ull, 0x1ull, 0ull, 0, 0, 0, 0, 0,-1,-1,0}, };
static struct enum_fields *_sym90[] = { &_sym2, &_sym70,  (struct enum_fields *) -1,};

// Instruction add_cb_aX_Is8
static adl_instr_attrs _sym91 = { ((uint64_t)(1ULL << instr_ippu)) , 0 };

// Instruction add_cb_aX_Is8
static struct adl_operand _sym92_operands_operands[] = { {0, 0, ADL_REGISTER, 0, 0, 11, 0ull, 0x1ull, 0ull, 0, 0, 0, 0, 0,-1,-1,0},{49, 1, ADL_SIGNED, 0, 0, 3, ((bfd_int64_t)18446744073709551489ull-1), 127ull, 0ull, 0, 0, 0, 0, 0,-1,-1,0},{70, 2, 0, 0, 0, 29, 0ull, 0x1ull, 0ull, 0, 0, 0, 0, 0,-1,-1,0},{72, 3, 0, 0, 0, 30, 0ull, 0x1ull, 0ull, 0, 0, 0, 0, 0,-1,-1,0},{68, 4, 0, 0, 0, 31, 0ull, 0x1ull, 0ull, 0, 0, 0, 0, 0,-1,-1,0}, };
static struct enum_fields *_sym93[] = { &_sym2, 0,  (struct enum_fields *) -1,};

// Instruction add_cb_aX_mY
static adl_instr_attrs _sym94 = { ((uint64_t)(1ULL << instr_ippu)) , 0 };

// Instruction add_cb_aX_mY
static struct adl_operand _sym95_operands_operands[] = { {0, 0, ADL_REGISTER, 0, 0, 11, 0ull, 0x1ull, 0ull, 0, 0, 0, 0, 0,-1,-1,0},{74, 1, ADL_REGISTER, 0, 0, 9, 0ull, 0x1ull, 0ull, 0, 0, 0, 0, 0,-1,-1,0},{70, 2, 0, 0, 0, 29, 0ull, 0x1ull, 0ull, 0, 0, 0, 0, 0,-1,-1,0},{72, 3, 0, 0, 0, 30, 0ull, 0x1ull, 0ull, 0, 0, 0, 0, 0,-1,-1,0},{68, 4, 0, 0, 0, 31, 0ull, 0x1ull, 0ull, 0, 0, 0, 0, 0,-1,-1,0}, };
static struct enum_fields *_sym96[] = { &_sym2, &_sym70,  (struct enum_fields *) -1,};

// Instruction clr_Rx
static adl_instr_attrs _sym97 = { ((uint64_t)(1ULL << instr_ippu)) , 0 };

// Instruction clr_Rx
static struct adl_operand _sym98_operands_operands[] = { {12, 0, 0, 0, 0, 25, 0ull, 0xfull, 0ull, 0, 0, 0, 0, 0,-1,-1,0},{70, 1, 0, 0, 0, 29, 0ull, 0x1ull, 0ull, 0, 0, 0, 0, 0,-1,-1,0},{72, 2, 0, 0, 0, 30, 0ull, 0x1ull, 0ull, 0, 0, 0, 0, 0,-1,-1,0},{68, 3, 0, 0, 0, 31, 0ull, 0x1ull, 0ull, 0, 0, 0, 0, 0,-1,-1,0}, };
static struct enum_fields *_sym99[] = { &_sym22,  (struct enum_fields *) -1,};

// Instruction clr_all
static adl_instr_attrs _sym100 = { ((uint64_t)(1ULL << instr_ippu)) , 0 };

// Shorthand:  clr_all -> clr_Rx;
static struct adl_operand _sym101_operands[] = { {70, 0, 0, 0, 0, 29, 0ull, 0x1ull, 0ull, 0, 0, 0, 0, 0,-1,-1,0},{72, 1, 0, 0, 0, 30, 0ull, 0x1ull, 0ull, 0, 0, 0, 0, 0,-1,-1,0},{68, 2, 0, 0, 0, 31, 0ull, 0x1ull, 0ull, 0, 0, 0, 0, 0,-1,-1,0}, };

// Instruction clr_all
static struct adl_operand _sym102_operands_operands[] = { {69, 0, 0, 0, 0, 0, 0ull, 0x1ull, 0ull, 0, 0, 0, 0, 0,-1,-1,0},{71, 1, 0, 0, 0, 0, 0ull, 0x1ull, 0ull, 0, 0, 0, 0, 0,-1,-1,0},{67, 2, 0, 0, 0, 0, 0ull, 0x1ull, 0ull, 0, 0, 0, 0, 0,-1,-1,0}, };
static struct adl_opcode _sym103[] = {
  // clr_Rx    (0)
  { "clr_Rx", 1, 4, 32, 32,  0x3, { 0x4f000078,},0, "", 0, 3, 3, 0, 0, 3, _sym101_operands,0,0,0, 0,0,&_sym100,0,{}, 0,0,0,0,0,-1, },
};

static struct enum_fields *_sym104[] = {  (struct enum_fields *) -1,};

// Instruction clr_mask_all
static adl_instr_attrs _sym105 = { ((uint64_t)(1ULL << instr_ippu)) , 0 };

// Instruction clr_mask_all
static struct adl_operand _sym106_operands_operands[] = { {70, 0, 0, 0, 0, 29, 0ull, 0x1ull, 0ull, 0, 0, 0, 0, 0,-1,-1,0},{72, 1, 0, 0, 0, 30, 0ull, 0x1ull, 0ull, 0, 0, 0, 0, 0,-1,-1,0},{68, 2, 0, 0, 0, 31, 0ull, 0x1ull, 0ull, 0, 0, 0, 0, 0,-1,-1,0}, };
static struct enum_fields *_sym107[] = {  (struct enum_fields *) -1,};

// Instruction clr_mask_bit
static adl_instr_attrs _sym108 = { ((uint64_t)(1ULL << instr_ippu)) , 0 };

// Instruction clr_mask_bit
static struct adl_operand _sym109_operands_operands[] = { {28, 0, 0, 0, 0, 16, 0ull, 0xfffull, 0ull, 0, 0, 0, 0, 0,-1,-1,0},{70, 1, 0, 0, 0, 29, 0ull, 0x1ull, 0ull, 0, 0, 0, 0, 0,-1,-1,0},{72, 2, 0, 0, 0, 30, 0ull, 0x1ull, 0ull, 0, 0, 0, 0, 0,-1,-1,0},{68, 3, 0, 0, 0, 31, 0ull, 0x1ull, 0ull, 0, 0, 0, 0, 0,-1,-1,0}, };
static struct enum_fields *_sym110[] = { 0,  (struct enum_fields *) -1,};

// Instruction cmp_bit
static adl_instr_attrs _sym111 = { ((uint64_t)(1ULL << instr_ippu)) , 0 };

// Instruction cmp_bit
static struct adl_operand _sym112_operands_operands[] = { {30, 0, ADL_EXT_SIGNED, 0, 0, 16, ((bfd_int64_t)18446744073709549569ull-1), 4095ull, 0ull, 0, 0, 0, 0, 0,-1,-1,0},{70, 1, 0, 0, 0, 29, 0ull, 0x1ull, 0ull, 0, 0, 0, 0, 0,-1,-1,0},{72, 2, 0, 0, 0, 30, 0ull, 0x1ull, 0ull, 0, 0, 0, 0, 0,-1,-1,0},{68, 3, 0, 0, 0, 31, 0ull, 0x1ull, 0ull, 0, 0, 0, 0, 0,-1,-1,0}, };
static struct enum_fields *_sym113[] = { 0,  (struct enum_fields *) -1,};

// Instruction done
static adl_instr_attrs _sym114 = { ((uint64_t)(1ULL << instr_ippu)) , 0 };

// Instruction done
static struct adl_operand _sym115_operands_operands[] = { {70, 0, 0, 0, 0, 29, 0ull, 0x1ull, 0ull, 0, 0, 0, 0, 0,-1,-1,0},{72, 1, 0, 0, 0, 30, 0ull, 0x1ull, 0ull, 0, 0, 0, 0, 0,-1,-1,0},{68, 2, 0, 0, 0, 31, 0ull, 0x1ull, 0ull, 0, 0, 0, 0, 0,-1,-1,0}, };
static struct enum_fields *_sym116[] = {  (struct enum_fields *) -1,};

// Instruction jmp
static adl_instr_attrs _sym117 = { ((uint64_t)(1ULL << instr_ippu)) , 0 };

// Instruction jmp
static struct adl_operand _sym118_operands_operands[] = { {10, 0, 0, 0, 0, 10, 0ull, 0x3ull, 0ull, 0, 0, 0, 0, 0,-1,-1,0},{31, 1, ADL_ABSOLUTE, 2, 0, 12, 0ull, 0x3ffffull, 0x3ull, 0, 0, 0, 0, 0,-1,-1,0},{70, 2, 0, 0, 0, 29, 0ull, 0x1ull, 0ull, 0, 0, 0, 0, 0,-1,-1,0},{72, 3, 0, 0, 0, 30, 0ull, 0x1ull, 0ull, 0, 0, 0, 0, 0,-1,-1,0},{68, 4, 0, 0, 0, 31, 0ull, 0x1ull, 0ull, 0, 0, 0, 0, 0,-1,-1,0}, };
static struct enum_fields *_sym119[] = { &_sym20, 0,  (struct enum_fields *) -1,};

// Instruction jsr
static adl_instr_attrs _sym120 = { ((uint64_t)(1ULL << instr_ippu)) , 0 };

// Instruction jsr
static struct adl_operand _sym121_operands_operands[] = { {10, 0, 0, 0, 0, 10, 0ull, 0x3ull, 0ull, 0, 0, 0, 0, 0,-1,-1,0},{31, 1, ADL_ABSOLUTE, 2, 0, 12, 0ull, 0x3ffffull, 0x3ull, 0, 0, 0, 0, 0,-1,-1,0},{70, 2, 0, 0, 0, 29, 0ull, 0x1ull, 0ull, 0, 0, 0, 0, 0,-1,-1,0},{72, 3, 0, 0, 0, 30, 0ull, 0x1ull, 0ull, 0, 0, 0, 0, 0,-1,-1,0},{68, 4, 0, 0, 0, 31, 0ull, 0x1ull, 0ull, 0, 0, 0, 0, 0,-1,-1,0}, };
static struct enum_fields *_sym122[] = { &_sym20, 0,  (struct enum_fields *) -1,};

// Instruction ld_aX_Is5
static adl_instr_attrs _sym123 = { ((uint64_t)(1ULL << instr_ippu)) , 0 };

// Instruction ld_aX_Is5
static struct adl_operand _sym124_operands_operands[] = { {57, 0, 0, 0, 0, 12, 0ull, 0x1ull, 0ull, 0, 0, 0, 0, 0,-1,-1,0},{0, 1, ADL_REGISTER, 0, 0, 11, 0ull, 0x1ull, 0ull, 0, 0, 0, 0, 0,-1,-1,0},{43, 2, ADL_SIGNED, 0, 0, 6, ((bfd_int64_t)18446744073709551601ull-1), 15ull, 0ull, 0, 0, 0, 0, 0,-1,-1,0},{21, 3, ADL_SIGNED, 0, 0, 13, ((bfd_int64_t)18446744073709551613ull-1), 3ull, 0ull, 0, 0, 0, 0, 0,-1,-1,0},{64, 4, 0, 0, 0, 3, 0ull, 0x7ull, 0ull, 0, 0, 0, 0, 0,-1,-1,0},{87, 5, ADL_SIGNED, 0, 0, 16, ((bfd_int64_t)18446744073709551361ull-1), 255ull, 0ull, 0, 0, 0, 0, 0,-1,-1,0},{61, 6, 0, 0, 0, 25, 0ull, 0xfull, 0ull, 0, 0, 0, 0, 0,-1,-1,0},{70, 7, 0, 0, 0, 29, 0ull, 0x1ull, 0ull, 0, 0, 0, 0, 0,-1,-1,0},{72, 8, 0, 0, 0, 30, 0ull, 0x1ull, 0ull, 0, 0, 0, 0, 0,-1,-1,0},{68, 9, 0, 0, 0, 31, 0ull, 0x1ull, 0ull, 0, 0, 0, 0, 0,-1,-1,0}, };
static struct enum_fields *_sym125[] = { &_sym48, &_sym2, 0, 0, &_sym58, 0, &_sym56,  (struct enum_fields *) -1,};

// Instruction ld_aX_Is8
static adl_instr_attrs _sym126 = { ((uint64_t)(1ULL << instr_ippu)) , 0 };

// Instruction ld_aX_Is8
static struct adl_operand _sym127_operands_operands[] = { {57, 0, 0, 0, 0, 12, 0ull, 0x1ull, 0ull, 0, 0, 0, 0, 0,-1,-1,0},{0, 1, ADL_REGISTER, 0, 0, 11, 0ull, 0x1ull, 0ull, 0, 0, 0, 0, 0,-1,-1,0},{51, 2, ADL_SIGNED, 0, 0, 3, ((bfd_int64_t)18446744073709551489ull-1), 127ull, 0ull, 0, 0, 0, 0, 0,-1,-1,0},{21, 3, ADL_SIGNED, 0, 0, 13, ((bfd_int64_t)18446744073709551613ull-1), 3ull, 0ull, 0, 0, 0, 0, 0,-1,-1,0},{87, 4, ADL_SIGNED, 0, 0, 16, ((bfd_int64_t)18446744073709551361ull-1), 255ull, 0ull, 0, 0, 0, 0, 0,-1,-1,0},{61, 5, 0, 0, 0, 25, 0ull, 0xfull, 0ull, 0, 0, 0, 0, 0,-1,-1,0},{70, 6, 0, 0, 0, 29, 0ull, 0x1ull, 0ull, 0, 0, 0, 0, 0,-1,-1,0},{72, 7, 0, 0, 0, 30, 0ull, 0x1ull, 0ull, 0, 0, 0, 0, 0,-1,-1,0},{68, 8, 0, 0, 0, 31, 0ull, 0x1ull, 0ull, 0, 0, 0, 0, 0,-1,-1,0}, };
static struct enum_fields *_sym128[] = { &_sym48, &_sym2, 0, 0, 0, &_sym56,  (struct enum_fields *) -1,};

// Instruction ld_aX_iY_Is4
static adl_instr_attrs _sym129 = { ((uint64_t)(1ULL << instr_ippu)) , 0 };

// Instruction ld_aX_iY_Is4
static struct adl_operand _sym130_operands_operands[] = { {57, 0, 0, 0, 0, 12, 0ull, 0x1ull, 0ull, 0, 0, 0, 0, 0,-1,-1,0},{0, 1, ADL_REGISTER, 0, 0, 11, 0ull, 0x1ull, 0ull, 0, 0, 0, 0, 0,-1,-1,0},{59, 2, ADL_REGISTER, 0, 0, 6, 0ull, 0x1ull, 0ull, 0, 0, 0, 0, 0,-1,-1,0},{40, 3, ADL_SIGNED, 0, 0, 7, ((bfd_int64_t)18446744073709551609ull-1), 7ull, 0ull, 0, 0, 0, 0, 0,-1,-1,0},{21, 4, ADL_SIGNED, 0, 0, 13, ((bfd_int64_t)18446744073709551613ull-1), 3ull, 0ull, 0, 0, 0, 0, 0,-1,-1,0},{87, 5, ADL_SIGNED, 0, 0, 16, ((bfd_int64_t)18446744073709551361ull-1), 255ull, 0ull, 0, 0, 0, 0, 0,-1,-1,0},{61, 6, 0, 0, 0, 25, 0ull, 0xfull, 0ull, 0, 0, 0, 0, 0,-1,-1,0},{70, 7, 0, 0, 0, 29, 0ull, 0x1ull, 0ull, 0, 0, 0, 0, 0,-1,-1,0},{72, 8, 0, 0, 0, 30, 0ull, 0x1ull, 0ull, 0, 0, 0, 0, 0,-1,-1,0},{68, 9, 0, 0, 0, 31, 0ull, 0x1ull, 0ull, 0, 0, 0, 0, 0,-1,-1,0}, };
static struct enum_fields *_sym131[] = { &_sym48, &_sym2, &_sym52, 0, 0, 0, &_sym56,  (struct enum_fields *) -1,};

// Instruction ld_aX_mX
static adl_instr_attrs _sym132 = { ((uint64_t)(1ULL << instr_ippu)) , 0 };

// Instruction ld_aX_mX
static struct adl_operand _sym133_operands_operands[] = { {57, 0, 0, 0, 0, 12, 0ull, 0x1ull, 0ull, 0, 0, 0, 0, 0,-1,-1,0},{0, 1, ADL_REGISTER, 0, 0, 11, 0ull, 0x1ull, 0ull, 0, 0, 0, 0, 0,-1,-1,0},{75, 2, 0, 0, 0, 8, 0ull, 0x1ull, 0ull, 0, 0, 0, 0, 0,-1,-1,0},{74, 3, ADL_REGISTER, 0, 0, 9, 0ull, 0x1ull, 0ull, 0, 0, 0, 0, 0,-1,-1,0},{21, 4, ADL_SIGNED, 0, 0, 13, ((bfd_int64_t)18446744073709551613ull-1), 3ull, 0ull, 0, 0, 0, 0, 0,-1,-1,0},{63, 5, 0, 0, 0, 5, 0ull, 0x7ull, 0ull, 0, 0, 0, 0, 0,-1,-1,0},{87, 6, ADL_SIGNED, 0, 0, 16, ((bfd_int64_t)18446744073709551361ull-1), 255ull, 0ull, 0, 0, 0, 0, 0,-1,-1,0},{61, 7, 0, 0, 0, 25, 0ull, 0xfull, 0ull, 0, 0, 0, 0, 0,-1,-1,0},{70, 8, 0, 0, 0, 29, 0ull, 0x1ull, 0ull, 0, 0, 0, 0, 0,-1,-1,0},{72, 9, 0, 0, 0, 30, 0ull, 0x1ull, 0ull, 0, 0, 0, 0, 0,-1,-1,0},{68, 10, 0, 0, 0, 31, 0ull, 0x1ull, 0ull, 0, 0, 0, 0, 0,-1,-1,0}, };
static struct enum_fields *_sym134[] = { &_sym48, &_sym2, &_sym72, &_sym70, 0, &_sym58, 0, &_sym56,  (struct enum_fields *) -1,};

// Instruction ld_arg_asX_Iu6
static adl_instr_attrs _sym135 = { ((uint64_t)(1ULL << instr_ippu)) , 0 };

// Instruction ld_arg_asX_Iu6
static struct adl_operand _sym136_operands_operands[] = { {2, 0, 0, 0, 0, 12, 0ull, 0x1ull, 0ull, 0, 0, 0, 0, 0,-1,-1,0},{7, 1, ADL_REGISTER, 0, 0, 6, 0ull, 0x3ull, 0ull, 0, 0, 0, 0, 0,-1,-1,0},{45, 2, 0, 0, 0, 22, 0ull, 0x3full, 0ull, 0, 0, 0, 0, 0,-1,-1,0},{70, 3, 0, 0, 0, 29, 0ull, 0x1ull, 0ull, 0, 0, 0, 0, 0,-1,-1,0},{72, 4, 0, 0, 0, 30, 0ull, 0x1ull, 0ull, 0, 0, 0, 0, 0,-1,-1,0},{68, 5, 0, 0, 0, 31, 0ull, 0x1ull, 0ull, 0, 0, 0, 0, 0,-1,-1,0}, };
static struct enum_fields *_sym137[] = { &_sym6, &_sym8, 0,  (struct enum_fields *) -1,};

// Instruction ld_index_aX_Is9
static adl_instr_attrs _sym138 = { ((uint64_t)(1ULL << instr_ippu)) , 0 };

// Instruction ld_index_aX_Is9
static struct adl_operand _sym139_operands_operands[] = { {24, 0, 0, 0, 0, 12, 0ull, 0x1ull, 0ull, 0, 0, 0, 0, 0,-1,-1,0},{1, 1, ADL_REGISTER, 0, 0, 10, 0ull, 0x3ull, 0ull, 0, 0, 0, 0, 0,-1,-1,0},{56, 2, ADL_SIGNED, 0, 0, 16, ((bfd_int64_t)18446744073709551361ull-1), 255ull, 0ull, 0, 0, 0, 0, 0,-1,-1,0},{70, 3, 0, 0, 0, 29, 0ull, 0x1ull, 0ull, 0, 0, 0, 0, 0,-1,-1,0},{72, 4, 0, 0, 0, 30, 0ull, 0x1ull, 0ull, 0, 0, 0, 0, 0,-1,-1,0},{68, 5, 0, 0, 0, 31, 0ull, 0x1ull, 0ull, 0, 0, 0, 0, 0,-1,-1,0}, };
static struct enum_fields *_sym140[] = { &_sym46, &_sym4, 0,  (struct enum_fields *) -1,};

// Instruction ld_index_aX_mX
static adl_instr_attrs _sym141 = { ((uint64_t)(1ULL << instr_ippu)) , 0 };

// Instruction ld_index_aX_mX
static struct adl_operand _sym142_operands_operands[] = { {24, 0, 0, 0, 0, 12, 0ull, 0x1ull, 0ull, 0, 0, 0, 0, 0,-1,-1,0},{1, 1, ADL_REGISTER, 0, 0, 10, 0ull, 0x3ull, 0ull, 0, 0, 0, 0, 0,-1,-1,0},{75, 2, 0, 0, 0, 8, 0ull, 0x1ull, 0ull, 0, 0, 0, 0, 0,-1,-1,0},{74, 3, ADL_REGISTER, 0, 0, 9, 0ull, 0x1ull, 0ull, 0, 0, 0, 0, 0,-1,-1,0},{70, 4, 0, 0, 0, 29, 0ull, 0x1ull, 0ull, 0, 0, 0, 0, 0,-1,-1,0},{72, 5, 0, 0, 0, 30, 0ull, 0x1ull, 0ull, 0, 0, 0, 0, 0,-1,-1,0},{68, 6, 0, 0, 0, 31, 0ull, 0x1ull, 0ull, 0, 0, 0, 0, 0,-1,-1,0}, };
static struct enum_fields *_sym143[] = { &_sym46, &_sym4, &_sym72, &_sym70,  (struct enum_fields *) -1,};

// Instruction ld_mask_aX_Is9
static adl_instr_attrs _sym144 = { ((uint64_t)(1ULL << instr_ippu)) , 0 };

// Instruction ld_mask_aX_Is9
static struct adl_operand _sym145_operands_operands[] = { {73, 0, 0, 0, 0, 12, 0ull, 0x1ull, 0ull, 0, 0, 0, 0, 0,-1,-1,0},{1, 1, ADL_REGISTER, 0, 0, 10, 0ull, 0x3ull, 0ull, 0, 0, 0, 0, 0,-1,-1,0},{54, 2, ADL_SIGNED, 0, 0, 16, ((bfd_int64_t)18446744073709551361ull-1), 255ull, 0ull, 0, 0, 0, 0, 0,-1,-1,0},{70, 3, 0, 0, 0, 29, 0ull, 0x1ull, 0ull, 0, 0, 0, 0, 0,-1,-1,0},{72, 4, 0, 0, 0, 30, 0ull, 0x1ull, 0ull, 0, 0, 0, 0, 0,-1,-1,0},{68, 5, 0, 0, 0, 31, 0ull, 0x1ull, 0ull, 0, 0, 0, 0, 0,-1,-1,0}, };
static struct enum_fields *_sym146[] = { &_sym68, &_sym4, 0,  (struct enum_fields *) -1,};

// Instruction ld_mask_aX_mX
static adl_instr_attrs _sym147 = { ((uint64_t)(1ULL << instr_ippu)) , 0 };

// Instruction ld_mask_aX_mX
static struct adl_operand _sym148_operands_operands[] = { {73, 0, 0, 0, 0, 12, 0ull, 0x1ull, 0ull, 0, 0, 0, 0, 0,-1,-1,0},{1, 1, ADL_REGISTER, 0, 0, 10, 0ull, 0x3ull, 0ull, 0, 0, 0, 0, 0,-1,-1,0},{75, 2, 0, 0, 0, 8, 0ull, 0x1ull, 0ull, 0, 0, 0, 0, 0,-1,-1,0},{74, 3, ADL_REGISTER, 0, 0, 9, 0ull, 0x1ull, 0ull, 0, 0, 0, 0, 0,-1,-1,0},{70, 4, 0, 0, 0, 29, 0ull, 0x1ull, 0ull, 0, 0, 0, 0, 0,-1,-1,0},{72, 5, 0, 0, 0, 30, 0ull, 0x1ull, 0ull, 0, 0, 0, 0, 0,-1,-1,0},{68, 6, 0, 0, 0, 31, 0ull, 0x1ull, 0ull, 0, 0, 0, 0, 0,-1,-1,0}, };
static struct enum_fields *_sym149[] = { &_sym68, &_sym4, &_sym72, &_sym70,  (struct enum_fields *) -1,};

// Instruction ld_vinx_aX_Is9
static adl_instr_attrs _sym150 = { ((uint64_t)(1ULL << instr_ippu)) , 0 };

// Instruction ld_vinx_aX_Is9
static struct adl_operand _sym151_operands_operands[] = { {85, 0, 0, 0, 0, 12, 0ull, 0x1ull, 0ull, 0, 0, 0, 0, 0,-1,-1,0},{1, 1, ADL_REGISTER, 0, 0, 10, 0ull, 0x3ull, 0ull, 0, 0, 0, 0, 0,-1,-1,0},{56, 2, ADL_SIGNED, 0, 0, 16, ((bfd_int64_t)18446744073709551361ull-1), 255ull, 0ull, 0, 0, 0, 0, 0,-1,-1,0},{58, 3, 0, 0, 0, 27, 0ull, 0x3ull, 0ull, 0, 0, 0, 0, 0,-1,-1,0},{70, 4, 0, 0, 0, 29, 0ull, 0x1ull, 0ull, 0, 0, 0, 0, 0,-1,-1,0},{72, 5, 0, 0, 0, 30, 0ull, 0x1ull, 0ull, 0, 0, 0, 0, 0,-1,-1,0},{68, 6, 0, 0, 0, 31, 0ull, 0x1ull, 0ull, 0, 0, 0, 0, 0,-1,-1,0}, };
static struct enum_fields *_sym152[] = { &_sym82, &_sym4, 0, &_sym50,  (struct enum_fields *) -1,};

// Instruction ld_vinx_aX_mX
static adl_instr_attrs _sym153 = { ((uint64_t)(1ULL << instr_ippu)) , 0 };

// Instruction ld_vinx_aX_mX
static struct adl_operand _sym154_operands_operands[] = { {85, 0, 0, 0, 0, 12, 0ull, 0x1ull, 0ull, 0, 0, 0, 0, 0,-1,-1,0},{1, 1, ADL_REGISTER, 0, 0, 10, 0ull, 0x3ull, 0ull, 0, 0, 0, 0, 0,-1,-1,0},{75, 2, 0, 0, 0, 8, 0ull, 0x1ull, 0ull, 0, 0, 0, 0, 0,-1,-1,0},{74, 3, ADL_REGISTER, 0, 0, 9, 0ull, 0x1ull, 0ull, 0, 0, 0, 0, 0,-1,-1,0},{58, 4, 0, 0, 0, 27, 0ull, 0x3ull, 0ull, 0, 0, 0, 0, 0,-1,-1,0},{70, 5, 0, 0, 0, 29, 0ull, 0x1ull, 0ull, 0, 0, 0, 0, 0,-1,-1,0},{72, 6, 0, 0, 0, 30, 0ull, 0x1ull, 0ull, 0, 0, 0, 0, 0,-1,-1,0},{68, 7, 0, 0, 0, 31, 0ull, 0x1ull, 0ull, 0, 0, 0, 0, 0,-1,-1,0}, };
static struct enum_fields *_sym155[] = { &_sym82, &_sym4, &_sym72, &_sym70, &_sym50,  (struct enum_fields *) -1,};

// Instruction mv_ippu_reg
static adl_instr_attrs _sym156 = { ((uint64_t)(1ULL << instr_ippu)) , 0 };

// Instruction mv_ippu_reg
static struct adl_operand _sym157_operands_operands[] = { {20, 0, 0, 0, 0, 6, 0ull, 0xfull, 0ull, 0, 0, 0, 0, 0,-1,-1,0},{82, 1, 0, 0, 0, 10, 0ull, 0xfull, 0ull, 0, 0, 0, 0, 0,-1,-1,0},{70, 2, 0, 0, 0, 29, 0ull, 0x1ull, 0ull, 0, 0, 0, 0, 0,-1,-1,0},{72, 3, 0, 0, 0, 30, 0ull, 0x1ull, 0ull, 0, 0, 0, 0, 0,-1,-1,0},{68, 4, 0, 0, 0, 31, 0ull, 0x1ull, 0ull, 0, 0, 0, 0, 0,-1,-1,0}, };
static struct enum_fields *_sym158[] = { &_sym30, &_sym74,  (struct enum_fields *) -1,};

// Instruction mv_ippu_reg_Is19_mX
static adl_instr_attrs _sym159 = { ((uint64_t)(1ULL << instr_ippu)) , 0 };

// Instruction mv_ippu_reg_Is19_mX
static struct adl_operand _sym160_operands_operands[] = { {17, 0, 0, 0, 0, 9, 0ull, 0x1ull, 0ull, 0, 0, 0, 0, 0,-1,-1,0},{34, 1, ADL_EXT_SIGNED, 0, 0, 10, ((bfd_int64_t)18446744073709289473ull-1), 524287ull, 0ull, 0, 0, 0, 0, 0,-1,-1,0},{70, 2, 0, 0, 0, 29, 0ull, 0x1ull, 0ull, 0, 0, 0, 0, 0,-1,-1,0},{72, 3, 0, 0, 0, 30, 0ull, 0x1ull, 0ull, 0, 0, 0, 0, 0,-1,-1,0},{68, 4, 0, 0, 0, 31, 0ull, 0x1ull, 0ull, 0, 0, 0, 0, 0,-1,-1,0}, };
static struct enum_fields *_sym161[] = { &_sym32, 0,  (struct enum_fields *) -1,};

// Instruction mv_ippu_reg_Is19_non_mX
static adl_instr_attrs _sym162 = { ((uint64_t)(1ULL << instr_ippu)) , 0 };

// Instruction mv_ippu_reg_Is19_non_mX
static struct adl_operand _sym163_operands_operands[] = { {19, 0, 0, 0, 0, 6, 0ull, 0xfull, 0ull, 0, 0, 0, 0, 0,-1,-1,0},{34, 1, ADL_EXT_SIGNED, 0, 0, 10, ((bfd_int64_t)18446744073709289473ull-1), 524287ull, 0ull, 0, 0, 0, 0, 0,-1,-1,0},{70, 2, 0, 0, 0, 29, 0ull, 0x1ull, 0ull, 0, 0, 0, 0, 0,-1,-1,0},{72, 3, 0, 0, 0, 30, 0ull, 0x1ull, 0ull, 0, 0, 0, 0, 0,-1,-1,0},{68, 4, 0, 0, 0, 31, 0ull, 0x1ull, 0ull, 0, 0, 0, 0, 0,-1,-1,0}, };
static struct enum_fields *_sym164[] = { &_sym36, 0,  (struct enum_fields *) -1,};

// Instruction nop
static adl_instr_attrs _sym165 = { ((uint64_t)(1ULL << instr_ippu)) , 0 };

// Instruction nop
static struct adl_operand _sym166_operands_operands[] = { {70, 0, 0, 0, 0, 29, 0ull, 0x1ull, 0ull, 0, 0, 0, 0, 0,-1,-1,0},{72, 1, 0, 0, 0, 30, 0ull, 0x1ull, 0ull, 0, 0, 0, 0, 0,-1,-1,0},{68, 2, 0, 0, 0, 31, 0ull, 0x1ull, 0ull, 0, 0, 0, 0, 0,-1,-1,0}, };
static struct enum_fields *_sym167[] = {  (struct enum_fields *) -1,};

// Instruction rts
static adl_instr_attrs _sym168 = { ((uint64_t)(1ULL << instr_ippu)) , 0 };

// Instruction rts
static struct adl_operand _sym169_operands_operands[] = { {10, 0, 0, 0, 0, 10, 0ull, 0x3ull, 0ull, 0, 0, 0, 0, 0,-1,-1,0},{70, 1, 0, 0, 0, 29, 0ull, 0x1ull, 0ull, 0, 0, 0, 0, 0,-1,-1,0},{72, 2, 0, 0, 0, 30, 0ull, 0x1ull, 0ull, 0, 0, 0, 0, 0,-1,-1,0},{68, 3, 0, 0, 0, 31, 0ull, 0x1ull, 0ull, 0, 0, 0, 0, 0,-1,-1,0}, };
static struct enum_fields *_sym170[] = { &_sym20,  (struct enum_fields *) -1,};

// Instruction set_br_aX_mode
static adl_instr_attrs _sym171 = { ((uint64_t)(1ULL << instr_ippu)) , 0 };

// Instruction set_br_aX_mode
static struct adl_operand _sym172_operands_operands[] = { {0, 0, ADL_REGISTER, 0, 0, 11, 0ull, 0x1ull, 0ull, 0, 0, 0, 0, 0,-1,-1,0},{8, 1, 0, 0, 0, 24, 0ull, 0xfull, 0ull, 0, 0, 0, 0, 0,-1,-1,0},{70, 2, 0, 0, 0, 29, 0ull, 0x1ull, 0ull, 0, 0, 0, 0, 0,-1,-1,0},{72, 3, 0, 0, 0, 30, 0ull, 0x1ull, 0ull, 0, 0, 0, 0, 0,-1,-1,0},{68, 4, 0, 0, 0, 31, 0ull, 0x1ull, 0ull, 0, 0, 0, 0, 0,-1,-1,0}, };
static struct enum_fields *_sym173[] = { &_sym2, &_sym16,  (struct enum_fields *) -1,};

// Instruction set_dr_config
static adl_instr_attrs _sym174 = { ((uint64_t)(1ULL << instr_ippu)) , 0 };

// Instruction set_dr_config
static struct adl_operand _sym175_operands_operands[] = { {14, 0, 0, 0, 0, 8, 0ull, 0xfull, 0ull, 0, 0, 0, 0, 0,-1,-1,0},{37, 1, 0, 0, 0, 13, 0ull, 0x7ull, 0ull, 0, 0, 0, 0, 0,-1,-1,0},{26, 2, 0, 0, 0, 17, 0ull, 0x7ffull, 0ull, 0, 0, 0, 0, 0,-1,-1,0},{70, 3, 0, 0, 0, 29, 0ull, 0x1ull, 0ull, 0, 0, 0, 0, 0,-1,-1,0},{72, 4, 0, 0, 0, 30, 0ull, 0x1ull, 0ull, 0, 0, 0, 0, 0,-1,-1,0},{68, 5, 0, 0, 0, 31, 0ull, 0x1ull, 0ull, 0, 0, 0, 0, 0,-1,-1,0}, };
static struct enum_fields *_sym176[] = { &_sym26, 0, 0,  (struct enum_fields *) -1,};

// Instruction set_dr_radix
static adl_instr_attrs _sym177 = { ((uint64_t)(1ULL << instr_ippu)) , 0 };

// Instruction set_dr_radix
static struct adl_operand _sym178_operands_operands[] = { {14, 0, 0, 0, 0, 8, 0ull, 0xfull, 0ull, 0, 0, 0, 0, 0,-1,-1,0},{77, 1, 0, 0, 0, 13, 0ull, 0x7ull, 0ull, 0, 0, 0, 0, 0,-1,-1,0},{26, 2, 0, 0, 0, 17, 0ull, 0x7ffull, 0ull, 0, 0, 0, 0, 0,-1,-1,0},{70, 3, 0, 0, 0, 29, 0ull, 0x1ull, 0ull, 0, 0, 0, 0, 0,-1,-1,0},{72, 4, 0, 0, 0, 30, 0ull, 0x1ull, 0ull, 0, 0, 0, 0, 0,-1,-1,0},{68, 5, 0, 0, 0, 31, 0ull, 0x1ull, 0ull, 0, 0, 0, 0, 0,-1,-1,0}, };
static struct enum_fields *_sym179[] = { &_sym26, 0, 0,  (struct enum_fields *) -1,};

// Instruction set_er
static adl_instr_attrs _sym180 = { ((uint64_t)(1ULL << instr_ippu)) , 0 };

// Instruction set_er
static struct adl_operand _sym181_operands_operands[] = { {22, 0, 0, 0, 0, 24, 0ull, 0xfull, 0ull, 0, 0, 0, 0, 0,-1,-1,0},{70, 1, 0, 0, 0, 29, 0ull, 0x1ull, 0ull, 0, 0, 0, 0, 0,-1,-1,0},{72, 2, 0, 0, 0, 30, 0ull, 0x1ull, 0ull, 0, 0, 0, 0, 0,-1,-1,0},{68, 3, 0, 0, 0, 31, 0ull, 0x1ull, 0ull, 0, 0, 0, 0, 0,-1,-1,0}, };
static struct enum_fields *_sym182[] = { &_sym42,  (struct enum_fields *) -1,};

// Instruction set_loop
static adl_instr_attrs _sym183 = { ((uint64_t)(1ULL << instr_ippu)) , 0 };

// Instruction set_loop
static struct adl_operand _sym184_operands_operands[] = { {66, 0, 0, 0, 0, 5, 0ull, 0x1ull, 0ull, 0, 0, 0, 0, 0,-1,-1,0},{7, 1, ADL_REGISTER, 0, 0, 6, 0ull, 0x3ull, 0ull, 0, 0, 0, 0, 0,-1,-1,0},{80, 2, 0, 0, 0, 8, 0ull, 0x1ull, 0ull, 0, 0, 0, 0, 0,-1,-1,0},{47, 3, 0, 0, 0, 20, 0ull, 0xffull, 0ull, 0, 0, 0, 0, 0,-1,-1,0},{70, 4, 0, 0, 0, 29, 0ull, 0x1ull, 0ull, 0, 0, 0, 0, 0,-1,-1,0},{72, 5, 0, 0, 0, 30, 0ull, 0x1ull, 0ull, 0, 0, 0, 0, 0,-1,-1,0},{68, 6, 0, 0, 0, 31, 0ull, 0x1ull, 0ull, 0, 0, 0, 0, 0,-1,-1,0}, };
static struct enum_fields *_sym185[] = { &_sym66, &_sym14, 0, 0, 0, 0, 0,  (struct enum_fields *) -1,};

// Instruction set_loop_Iu1_Iu8
static adl_instr_attrs _sym186 = { ((uint64_t)(1ULL << instr_ippu)) , 0 };

// Shorthand:  set_loop_Iu1_Iu8 -> set_loop;

static bfd_uint64_t _sym188_modifier (const expressionS *operands, unsigned __cia ATTRIBUTE_UNUSED) { return (IM9_1_256_checker((operands[1].X_add_number),FALSE)) - 1; }

static int _sym188_mod_indices[] = { 1,  -1 };
static struct adl_operand _sym187_operands[] = { {80, 0, 0, 0, 0, 8, 0ull, 0x1ull, 0ull, 0, 0, 0, 0, 0,-1,-1,0},{47, -1, 0, 0, 0, 0, 0, 0, 0, _sym188_modifier, _sym188_mod_indices, 0, 0,0, -1,-1,0},{70, 2, 0, 0, 0, 29, 0ull, 0x1ull, 0ull, 0, 0, 0, 0, 0,-1,-1,0},{72, 3, 0, 0, 0, 30, 0ull, 0x1ull, 0ull, 0, 0, 0, 0, 0,-1,-1,0},{68, 4, 0, 0, 0, 31, 0ull, 0x1ull, 0ull, 0, 0, 0, 0, 0,-1,-1,0}, };

// Instruction set_loop_Iu1_Iu8
static struct adl_operand _sym189_operands_operands[] = { {79, 0, 0, 0, 0, 0, 0ull, 0x1ull, 0ull, 0, 0, 0, 0, 0,-1,-1,0},{52, 1, 0, 0, 0, 0, 0ull, 0x1ffull, 0ull, 0, 0, 0,IM9_1_256_checker, 0,-1,-1,0},{69, 2, 0, 0, 0, 0, 0ull, 0x1ull, 0ull, 0, 0, 0, 0, 0,-1,-1,0},{71, 3, 0, 0, 0, 0, 0ull, 0x1ull, 0ull, 0, 0, 0, 0, 0,-1,-1,0},{67, 4, 0, 0, 0, 0, 0ull, 0x1ull, 0ull, 0, 0, 0, 0, 0,-1,-1,0}, };
static struct adl_opcode _sym190[] = {
  // set_loop    (0)
  { "set_loop", 1, 4, 32, 32,  0x3, { 0x18000000,},0, "", 0, 5, 5, 0, 0, 3, _sym187_operands,0,0,0, 0,0,&_sym186,0,{}, 0,0,0,0,0,-1, },
};

static struct enum_fields *_sym191[] = { 0, 0,  (struct enum_fields *) -1,};

// Instruction set_loop_Iu1_asX
static adl_instr_attrs _sym192 = { ((uint64_t)(1ULL << instr_ippu)) , 0 };

// Shorthand:  set_loop_Iu1_asX -> set_loop;
static struct adl_operand _sym193_operands[] = { {7, 1, ADL_REGISTER, 0, 0, 6, 0ull, 0x3ull, 0ull, 0, 0, 0, 0, 0,-1,-1,0},{80, 0, 0, 0, 0, 8, 0ull, 0x1ull, 0ull, 0, 0, 0, 0, 0,-1,-1,0},{70, 2, 0, 0, 0, 29, 0ull, 0x1ull, 0ull, 0, 0, 0, 0, 0,-1,-1,0},{72, 3, 0, 0, 0, 30, 0ull, 0x1ull, 0ull, 0, 0, 0, 0, 0,-1,-1,0},{68, 4, 0, 0, 0, 31, 0ull, 0x1ull, 0ull, 0, 0, 0, 0, 0,-1,-1,0}, };

// Instruction set_loop_Iu1_asX
static struct adl_operand _sym194_operands_operands[] = { {79, 0, 0, 0, 0, 0, 0ull, 0x1ull, 0ull, 0, 0, 0, 0, 0,-1,-1,0},{3, 1, ADL_REGISTER, 0, 0, 0, 0ull, 0x3ull, 0ull, 0, 0, 0, 0, 0,-1,-1,0},{69, 2, 0, 0, 0, 0, 0ull, 0x1ull, 0ull, 0, 0, 0, 0, 0,-1,-1,0},{71, 3, 0, 0, 0, 0, 0ull, 0x1ull, 0ull, 0, 0, 0, 0, 0,-1,-1,0},{67, 4, 0, 0, 0, 0, 0ull, 0x1ull, 0ull, 0, 0, 0, 0, 0,-1,-1,0}, };
static struct adl_opcode _sym195[] = {
  // set_loop    (0)
  { "set_loop", 1, 4, 32, 32,  0x3, { 0x1c000000,},0, "", 0, 5, 5, 0, 0, 3, _sym193_operands,0,0,0, 0,0,&_sym192,0,{}, 0,0,0,0,0,-1, },
};

static struct enum_fields *_sym196[] = { 0, &_sym8,  (struct enum_fields *) -1,};

// Instruction set_mask_all
static adl_instr_attrs _sym197 = { ((uint64_t)(1ULL << instr_ippu)) , 0 };

// Instruction set_mask_all
static struct adl_operand _sym198_operands_operands[] = { {70, 0, 0, 0, 0, 29, 0ull, 0x1ull, 0ull, 0, 0, 0, 0, 0,-1,-1,0},{72, 1, 0, 0, 0, 30, 0ull, 0x1ull, 0ull, 0, 0, 0, 0, 0,-1,-1,0},{68, 2, 0, 0, 0, 31, 0ull, 0x1ull, 0ull, 0, 0, 0, 0, 0,-1,-1,0}, };
static struct enum_fields *_sym199[] = {  (struct enum_fields *) -1,};

// Instruction set_mask_bit
static adl_instr_attrs _sym200 = { ((uint64_t)(1ULL << instr_ippu)) , 0 };

// Instruction set_mask_bit
static struct adl_operand _sym201_operands_operands[] = { {28, 0, 0, 0, 0, 16, 0ull, 0xfffull, 0ull, 0, 0, 0, 0, 0,-1,-1,0},{70, 1, 0, 0, 0, 29, 0ull, 0x1ull, 0ull, 0, 0, 0, 0, 0,-1,-1,0},{72, 2, 0, 0, 0, 30, 0ull, 0x1ull, 0ull, 0, 0, 0, 0, 0,-1,-1,0},{68, 3, 0, 0, 0, 31, 0ull, 0x1ull, 0ull, 0, 0, 0, 0, 0,-1,-1,0}, };
static struct enum_fields *_sym202[] = { 0,  (struct enum_fields *) -1,};

// Instruction set_range_aY_asA_Is19
static adl_instr_attrs _sym203 = { ((uint64_t)(1ULL << instr_ippu)) , 0 };

// Instruction set_range_aY_asA_Is19
static struct adl_operand _sym204_operands_operands[] = { {0, 0, ADL_REGISTER, 0, 0, 11, 0ull, 0x1ull, 0ull, 0, 0, 0, 0, 0,-1,-1,0},{7, 1, ADL_REGISTER, 0, 0, 6, 0ull, 0x3ull, 0ull, 0, 0, 0, 0, 0,-1,-1,0},{35, 2, ADL_EXT_SIGNED, 0, 0, 9, ((bfd_int64_t)18446744073709289473ull-1), 524287ull, 0ull, 0, 0, 0, 0, 0,-1,-1,0},{70, 3, 0, 0, 0, 29, 0ull, 0x1ull, 0ull, 0, 0, 0, 0, 0,-1,-1,0},{72, 4, 0, 0, 0, 30, 0ull, 0x1ull, 0ull, 0, 0, 0, 0, 0,-1,-1,0},{68, 5, 0, 0, 0, 31, 0ull, 0x1ull, 0ull, 0, 0, 0, 0, 0,-1,-1,0}, };
static struct enum_fields *_sym205[] = { &_sym2, &_sym8, 0,  (struct enum_fields *) -1,};

// Instruction set_range_aY_asA_asB
static adl_instr_attrs _sym206 = { ((uint64_t)(1ULL << instr_ippu)) , 0 };

// Instruction set_range_aY_asA_asB
static struct adl_operand _sym207_operands_operands[] = { {0, 0, ADL_REGISTER, 0, 0, 11, 0ull, 0x1ull, 0ull, 0, 0, 0, 0, 0,-1,-1,0},{7, 1, ADL_REGISTER, 0, 0, 6, 0ull, 0x3ull, 0ull, 0, 0, 0, 0, 0,-1,-1,0},{5, 2, ADL_REGISTER, 0, 0, 8, 0ull, 0x3ull, 0ull, 0, 0, 0, 0, 0,-1,-1,0},{70, 3, 0, 0, 0, 29, 0ull, 0x1ull, 0ull, 0, 0, 0, 0, 0,-1,-1,0},{72, 4, 0, 0, 0, 30, 0ull, 0x1ull, 0ull, 0, 0, 0, 0, 0,-1,-1,0},{68, 5, 0, 0, 0, 31, 0ull, 0x1ull, 0ull, 0, 0, 0, 0, 0,-1,-1,0}, };
static struct enum_fields *_sym208[] = { &_sym2, &_sym8, &_sym10,  (struct enum_fields *) -1,};

// Instruction st_aX_Is5
static adl_instr_attrs _sym209 = { ((uint64_t)(1ULL << instr_ippu)) , 0 };

// Instruction st_aX_Is5
static struct adl_operand _sym210_operands_operands[] = { {57, 0, 0, 0, 0, 12, 0ull, 0x1ull, 0ull, 0, 0, 0, 0, 0,-1,-1,0},{0, 1, ADL_REGISTER, 0, 0, 11, 0ull, 0x1ull, 0ull, 0, 0, 0, 0, 0,-1,-1,0},{43, 2, ADL_SIGNED, 0, 0, 6, ((bfd_int64_t)18446744073709551601ull-1), 15ull, 0ull, 0, 0, 0, 0, 0,-1,-1,0},{21, 3, ADL_SIGNED, 0, 0, 13, ((bfd_int64_t)18446744073709551613ull-1), 3ull, 0ull, 0, 0, 0, 0, 0,-1,-1,0},{84, 4, 0, 0, 0, 3, 0ull, 0x7ull, 0ull, 0, 0, 0, 0, 0,-1,-1,0},{78, 5, ADL_SIGNED, 0, 0, 16, ((bfd_int64_t)18446744073709551361ull-1), 255ull, 0ull, 0, 0, 0, 0, 0,-1,-1,0},{86, 6, 0, 0, 0, 26, 0ull, 0x7ull, 0ull, 0, 0, 0, 0, 0,-1,-1,0},{70, 7, 0, 0, 0, 29, 0ull, 0x1ull, 0ull, 0, 0, 0, 0, 0,-1,-1,0},{72, 8, 0, 0, 0, 30, 0ull, 0x1ull, 0ull, 0, 0, 0, 0, 0,-1,-1,0},{68, 9, 0, 0, 0, 31, 0ull, 0x1ull, 0ull, 0, 0, 0, 0, 0,-1,-1,0}, };
static struct enum_fields *_sym211[] = { &_sym48, &_sym2, 0, 0, &_sym78, 0, &_sym84,  (struct enum_fields *) -1,};

// Instruction st_aX_Is8
static adl_instr_attrs _sym212 = { ((uint64_t)(1ULL << instr_ippu)) , 0 };

// Instruction st_aX_Is8
static struct adl_operand _sym213_operands_operands[] = { {57, 0, 0, 0, 0, 12, 0ull, 0x1ull, 0ull, 0, 0, 0, 0, 0,-1,-1,0},{0, 1, ADL_REGISTER, 0, 0, 11, 0ull, 0x1ull, 0ull, 0, 0, 0, 0, 0,-1,-1,0},{51, 2, ADL_SIGNED, 0, 0, 3, ((bfd_int64_t)18446744073709551489ull-1), 127ull, 0ull, 0, 0, 0, 0, 0,-1,-1,0},{21, 3, ADL_SIGNED, 0, 0, 13, ((bfd_int64_t)18446744073709551613ull-1), 3ull, 0ull, 0, 0, 0, 0, 0,-1,-1,0},{78, 4, ADL_SIGNED, 0, 0, 16, ((bfd_int64_t)18446744073709551361ull-1), 255ull, 0ull, 0, 0, 0, 0, 0,-1,-1,0},{86, 5, 0, 0, 0, 26, 0ull, 0x7ull, 0ull, 0, 0, 0, 0, 0,-1,-1,0},{70, 6, 0, 0, 0, 29, 0ull, 0x1ull, 0ull, 0, 0, 0, 0, 0,-1,-1,0},{72, 7, 0, 0, 0, 30, 0ull, 0x1ull, 0ull, 0, 0, 0, 0, 0,-1,-1,0},{68, 8, 0, 0, 0, 31, 0ull, 0x1ull, 0ull, 0, 0, 0, 0, 0,-1,-1,0}, };
static struct enum_fields *_sym214[] = { &_sym48, &_sym2, 0, 0, 0, &_sym84,  (struct enum_fields *) -1,};

// Instruction st_aX_iY_Is4
static adl_instr_attrs _sym215 = { ((uint64_t)(1ULL << instr_ippu)) , 0 };

// Instruction st_aX_iY_Is4
static struct adl_operand _sym216_operands_operands[] = { {57, 0, 0, 0, 0, 12, 0ull, 0x1ull, 0ull, 0, 0, 0, 0, 0,-1,-1,0},{0, 1, ADL_REGISTER, 0, 0, 11, 0ull, 0x1ull, 0ull, 0, 0, 0, 0, 0,-1,-1,0},{59, 2, ADL_REGISTER, 0, 0, 6, 0ull, 0x1ull, 0ull, 0, 0, 0, 0, 0,-1,-1,0},{40, 3, ADL_SIGNED, 0, 0, 7, ((bfd_int64_t)18446744073709551609ull-1), 7ull, 0ull, 0, 0, 0, 0, 0,-1,-1,0},{21, 4, ADL_SIGNED, 0, 0, 13, ((bfd_int64_t)18446744073709551613ull-1), 3ull, 0ull, 0, 0, 0, 0, 0,-1,-1,0},{78, 5, ADL_SIGNED, 0, 0, 16, ((bfd_int64_t)18446744073709551361ull-1), 255ull, 0ull, 0, 0, 0, 0, 0,-1,-1,0},{86, 6, 0, 0, 0, 26, 0ull, 0x7ull, 0ull, 0, 0, 0, 0, 0,-1,-1,0},{70, 7, 0, 0, 0, 29, 0ull, 0x1ull, 0ull, 0, 0, 0, 0, 0,-1,-1,0},{72, 8, 0, 0, 0, 30, 0ull, 0x1ull, 0ull, 0, 0, 0, 0, 0,-1,-1,0},{68, 9, 0, 0, 0, 31, 0ull, 0x1ull, 0ull, 0, 0, 0, 0, 0,-1,-1,0}, };
static struct enum_fields *_sym217[] = { &_sym48, &_sym2, &_sym52, 0, 0, 0, &_sym84,  (struct enum_fields *) -1,};

// Instruction st_aX_mX
static adl_instr_attrs _sym218 = { ((uint64_t)(1ULL << instr_ippu)) , 0 };

// Instruction st_aX_mX
static struct adl_operand _sym219_operands_operands[] = { {57, 0, 0, 0, 0, 12, 0ull, 0x1ull, 0ull, 0, 0, 0, 0, 0,-1,-1,0},{0, 1, ADL_REGISTER, 0, 0, 11, 0ull, 0x1ull, 0ull, 0, 0, 0, 0, 0,-1,-1,0},{75, 2, 0, 0, 0, 8, 0ull, 0x1ull, 0ull, 0, 0, 0, 0, 0,-1,-1,0},{74, 3, ADL_REGISTER, 0, 0, 9, 0ull, 0x1ull, 0ull, 0, 0, 0, 0, 0,-1,-1,0},{21, 4, ADL_SIGNED, 0, 0, 13, ((bfd_int64_t)18446744073709551613ull-1), 3ull, 0ull, 0, 0, 0, 0, 0,-1,-1,0},{84, 5, 0, 0, 0, 3, 0ull, 0x7ull, 0ull, 0, 0, 0, 0, 0,-1,-1,0},{78, 6, ADL_SIGNED, 0, 0, 16, ((bfd_int64_t)18446744073709551361ull-1), 255ull, 0ull, 0, 0, 0, 0, 0,-1,-1,0},{86, 7, 0, 0, 0, 26, 0ull, 0x7ull, 0ull, 0, 0, 0, 0, 0,-1,-1,0},{70, 8, 0, 0, 0, 29, 0ull, 0x1ull, 0ull, 0, 0, 0, 0, 0,-1,-1,0},{72, 9, 0, 0, 0, 30, 0ull, 0x1ull, 0ull, 0, 0, 0, 0, 0,-1,-1,0},{68, 10, 0, 0, 0, 31, 0ull, 0x1ull, 0ull, 0, 0, 0, 0, 0,-1,-1,0}, };
static struct enum_fields *_sym220[] = { &_sym48, &_sym2, &_sym72, &_sym70, 0, &_sym78, 0, &_sym84,  (struct enum_fields *) -1,};

// Instruction loop_begin_0
static adl_instr_attrs _sym221 = { ((uint64_t)(1ULL << instr_loop_begin)) , 0 };

// Instruction loop_begin_0
static struct enum_fields *_sym223[] = {  (struct enum_fields *) -1,};

// Instruction loop_begin_1
static adl_instr_attrs _sym224 = { ((uint64_t)(1ULL << instr_loop_begin)) | ((uint64_t)(1ULL << instr_loop_1)) , 0 };

// Instruction loop_begin_1
static struct enum_fields *_sym226[] = {  (struct enum_fields *) -1,};

// Instruction loop_end_0
static adl_instr_attrs _sym227 = { ((uint64_t)(1ULL << instr_loop_end)) , 0 };

// Instruction loop_end_0
static struct enum_fields *_sym229[] = {  (struct enum_fields *) -1,};

// Instruction loop_end_1
static adl_instr_attrs _sym230 = { ((uint64_t)(1ULL << instr_loop_end)) | ((uint64_t)(1ULL << instr_loop_1)) , 0 };

// Instruction loop_end_1
static struct enum_fields *_sym232[] = {  (struct enum_fields *) -1,};

// Instructions named 'add'.
static struct adl_opcode _sym233[] = {
  // add_aX_mY    (0)
  { "add_aX_mY", 1, 4, 32, 32,  0x0, { 0x70080078,},_sym90, "^ *(a0|a1),(m0|m1)$", 0, 5, 5, 0, 0, 3, _sym89_operands_operands,0,0,0, 0,0,&_sym88,0,{}, 0,0,0,0,0,-1, },
  // add_aX_Is8    (1)
  { "add_aX_Is8", 1, 4, 32, 32,  0x0, { 0xe0080078,},_sym87, "^ *(a0|a1),([^},[, ]+)$", 0, 5, 5, 0, 0, 3, _sym86_operands_operands,0,0,0, 0,0,&_sym85,0,{}, 0,0,0,0,0,1, },
};

// Instructions named 'add.cb'.
static struct adl_opcode _sym234[] = {
  // add_cb_aX_mY    (0)
  { "add_cb_aX_mY", 1, 4, 32, 32,  0x0, { 0x70000078,},_sym96, "^ *(a0|a1),(m0|m1)$", 0, 5, 5, 0, 0, 3, _sym95_operands_operands,0,0,0, 0,0,&_sym94,0,{}, 0,0,0,0,0,-1, },
  // add_cb_aX_Is8    (1)
  { "add_cb_aX_Is8", 1, 4, 32, 32,  0x0, { 0xe0000078,},_sym93, "^ *(a0|a1),([^},[, ]+)$", 0, 5, 5, 0, 0, 3, _sym92_operands_operands,0,0,0, 0,0,&_sym91,0,{}, 0,0,0,0,0,1, },
};

// Instructions named 'clr'.
static struct adl_opcode _sym235[] = {
  // clr_Rx    (0)
  { "clr_Rx", 1, 4, 32, 32,  0x0, { 0x4f000000,},_sym99, "^ *(r0|r1|r0,r1|r1,r0|r2|r0,r2|r2,r0|r1,r2|r2,r1|r0,r1,r2|r0,r2,r1|r1,r0,r2|r1,r2,r0|r2,r0,r1|r2,r1,r0|r3|r0,r3|r3,r0|r1,r3|r3,r1|r0,r1,r3|r0,r3,r1|r1,r0,r3|r1,r3,r0|r3,r0,r1|r3,r1,r0|r2,r3|r3,r2|r0,r2,r3|r0,r3,r2|r2,r0,r3|r2,r3,r0|r3,r0,r2|r3,r2,r0|r1,r2,r3|r1,r3,r2|r2,r1,r3|r2,r3,r1|r3,r1,r2|r3,r2,r1|r0,r1,r2,r3|r0,r1,r3,r2|r0,r2,r1,r3|r0,r2,r3,r1|r0,r3,r1,r2|r0,r3,r2,r1|r1,r0,r2,r3|r1,r0,r3,r2|r1,r2,r0,r3|r1,r2,r3,r0|r1,r3,r0,r2|r1,r3,r2,r0|r2,r0,r1,r3|r2,r0,r3,r1|r2,r1,r0,r3|r2,r1,r3,r0|r2,r3,r0,r1|r2,r3,r1,r0|r3,r0,r1,r2|r3,r0,r2,r1|r3,r1,r0,r2|r3,r1,r2,r0|r3,r2,r0,r1|r3,r2,r1,r0)$", 0, 4, 4, 0, 0, 3, _sym98_operands_operands,0,0,0, 0,0,&_sym97,0,{}, 0,0,0,0,0,0, },
  // clr_all    (1)
  { "clr_all", 1, 0, 32, 32,  0x0, { 0 },_sym104, "^ *all$", 0, 3, 3, 0, 0, 3, _sym102_operands_operands,_sym103,1,0, 0,0,&_sym100,0,{}, 0,0,0,0,0,-1, },
};

// Instructions named 'clr.mask'.
static struct adl_opcode _sym236[] = {
  // clr_mask_bit    (0)
  { "clr_mask_bit", 1, 4, 32, 32,  0x0, { 0x41000000,},_sym110, "^ *([^},[ ]+)$", 0, 4, 4, 0, 0, 3, _sym109_operands_operands,0,0,0, 0,0,&_sym108,0,{}, 0,0,0,0,0,0, },
};

// Instructions named 'clr.mask.all'.
static struct adl_opcode _sym237[] = {
  // clr_mask_all    (0)
  { "clr_mask_all", 1, 4, 32, 32,  0x0, { 0x44000000,},_sym107, "$", 0, 3, 3, 0, 0, 3, _sym106_operands_operands,0,0,0, 0,0,&_sym105,0,{}, 0,0,0,0,0,-1, },
};

// Instructions named 'cmp.bit'.
static struct adl_opcode _sym238[] = {
  // cmp_bit    (0)
  { "cmp_bit", 1, 4, 32, 32,  0x0, { 0x40000000,},_sym113, "^ *([^},[ ]+)$", 0, 4, 4, 0, 0, 3, _sym112_operands_operands,0,0,0, 0,0,&_sym111,0,{}, 0,0,0,0,0,0, },
};

// Instructions named 'done'.
static struct adl_opcode _sym239[] = {
  // done    (0)
  { "done", 1, 4, 32, 32,  0x0, { 0x8000000,},_sym116, "$", 0, 3, 3, 0, 0, 3, _sym115_operands_operands,0,0,0, 0,0,&_sym114,0,{}, 0,0,0,0,0,-1, },
};

// Instructions named 'jmp'.
static struct adl_opcode _sym240[] = {
  // jmp    (0)
  { "jmp", 1, 4, 32, 32,  0x0, { 0x10000000,},_sym119, "^ *(\\.z|\\.nz|) ([^},[  ]+)$", 0, 5, 5, 0, 0, 3, _sym118_operands_operands,0,0,0, 0,0,&_sym117,0,{}, 0,0,0,0,0,0, },
};

// Instructions named 'jsr'.
static struct adl_opcode _sym241[] = {
  // jsr    (0)
  { "jsr", 1, 4, 32, 32,  0x0, { 0x10400000,},_sym122, "^ *(\\.z|\\.nz|) ([^},[  ]+)$", 0, 5, 5, 0, 0, 3, _sym121_operands_operands,0,0,0, 0,0,&_sym120,0,{}, 0,0,0,0,0,0, },
};

// Instructions named 'ld'.
static struct adl_opcode _sym242[] = {
  // ld_aX_mX    (0)
  { "ld_aX_mX", 1, 4, 32, 32,  0x0, { 0x70000000,},_sym134, "^ *(\\.ippu|\\.vcpu) \\[(a0|a1)\\](\\+|\\-)(m0|m1),([^},[[ ,,,, ]+),(normal|br|dr|br_dr|vindirect|ind|ri),([^},[[ ,,,, ]+),(normal|e256|e128|e64|e32|e16|e8|e4|L2H|l2h|H2L|h2l|L2L|l2l|H2H|h2h|brmr|er)$", 0, 11, 11, 0, 0, 3, _sym133_operands_operands,0,0,0, 0,0,&_sym132,0,{}, 0,0,0,0,0,0, },
// ld_vinx_aX_mX    (1)
{ "ld_vinx_aX_mX", 1, 4, 32, 32,  0x0, { 0x7f000000,},_sym155, "^ *(\\.vinx\\.ippu|\\.vinx\\.vcpu) \\[(a0|a1|a2|a3)\\](\\+|\\-)(m0|m1),(e32|e64)$", 0, 8, 8, 0, 0, 3, _sym154_operands_operands,0,0,0, 0,0,&_sym153,0,{}, 0,0,0,0,0,1, },
// ld_aX_Is5    (2)
{ "ld_aX_Is5", 1, 4, 32, 32,  0x0, { 0xc0000000,},_sym125, "^ *(\\.ippu|\\.vcpu) \\[(a0|a1)\\]([+-][^},[[ ,,,, ]+),([^},[[ ,,,, ]+),(normal|br|dr|br_dr|vindirect|ind|ri),([^},[[ ,,,, ]+),(normal|e256|e128|e64|e32|e16|e8|e4|L2H|l2h|H2L|h2l|L2L|l2l|H2H|h2h|brmr|er)$", 0, 10, 10, 0, 0, 3, _sym124_operands_operands,0,0,0, 0,0,&_sym123,0,{}, 0,0,0,0,0,2, },
// ld_aX_iY_Is4    (3)
{ "ld_aX_iY_Is4", 1, 4, 32, 32,  0x0, { 0xd8000000,},_sym131, "^ *(\\.ippu|\\.vcpu) \\[(a0|a1)\\+(i0|i1)\\]([+-][^},[[ ,,, ]+),([^},[[ ,,, ]+),([^},[[ ,,, ]+),(normal|e256|e128|e64|e32|e16|e8|e4|L2H|l2h|H2L|h2l|L2L|l2l|H2H|h2h|brmr|er)$", 0, 10, 10, 0, 0, 3, _sym130_operands_operands,0,0,0, 0,0,&_sym129,0,{}, 0,0,0,0,0,3, },
// ld_index_aX_mX    (4)
{ "ld_index_aX_mX", 1, 4, 32, 32,  0x0, { 0x7e000000,},_sym143, "^ *(\\.index\\.ippu|\\.index\\.vcpu) \\[(a0|a1|a2|a3)\\](\\+|\\-)(m0|m1)$", 0, 7, 7, 0, 0, 3, _sym142_operands_operands,0,0,0, 0,0,&_sym141,0,{}, 0,0,0,0,0,4, },
// ld_mask_aX_mX    (5)
{ "ld_mask_aX_mX", 1, 4, 32, 32,  0x0, { 0x7a000000,},_sym149, "^ *(\\.mask\\.ippu|\\.mask\\.vcpu) \\[(a0|a1|a2|a3)\\](\\+|\\-)(m0|m1)$", 0, 7, 7, 0, 0, 3, _sym148_operands_operands,0,0,0, 0,0,&_sym147,0,{}, 0,0,0,0,0,5, },
// ld_aX_Is8    (6)
{ "ld_aX_Is8", 1, 4, 32, 32,  0x0, { 0xe0000000,},_sym128, "^ *(\\.ippu|\\.vcpu) \\[(a0|a1)\\]([+-][^},[[ ,,, ]+),([^},[[ ,,, ]+),([^},[[ ,,, ]+),(normal|e256|e128|e64|e32|e16|e8|e4|L2H|l2h|H2L|h2l|L2L|l2l|H2H|h2h|brmr|er)$", 0, 9, 9, 0, 0, 3, _sym127_operands_operands,0,0,0, 0,0,&_sym126,0,{}, 0,0,0,0,0,6, },
// ld_vinx_aX_Is9    (7)
{ "ld_vinx_aX_Is9", 1, 4, 32, 32,  0x0, { 0x7d000000,},_sym152, "^ *(\\.vinx\\.ippu|\\.vinx\\.vcpu) \\[(a0|a1|a2|a3)\\]([+-][^},[[ ,  ]+),(e32|e64)$", 0, 7, 7, 0, 0, 3, _sym151_operands_operands,0,0,0, 0,0,&_sym150,0,{}, 0,0,0,0,0,7, },
// ld_index_aX_Is9    (8)
{ "ld_index_aX_Is9", 1, 4, 32, 32,  0x0, { 0x7c000000,},_sym140, "^ *(\\.index\\.ippu|\\.index\\.vcpu) \\[(a0|a1|a2|a3)\\]([+-][^},[[  ]+)$", 0, 6, 6, 0, 0, 3, _sym139_operands_operands,0,0,0, 0,0,&_sym138,0,{}, 0,0,0,0,0,8, },
// ld_mask_aX_Is9    (9)
{ "ld_mask_aX_Is9", 1, 4, 32, 32,  0x0, { 0x78000000,},_sym146, "^ *(\\.mask\\.ippu|\\.mask\\.vcpu) \\[(a0|a1|a2|a3)\\]([^},[[  ]+)$", 0, 6, 6, 0, 0, 3, _sym145_operands_operands,0,0,0, 0,0,&_sym144,0,{}, 0,0,0,0,0,9, },
// ld_arg_asX_Iu6    (10)
{ "ld_arg_asX_Iu6", 1, 4, 32, 32,  0x0, { 0x50000000,},_sym137, "^ *(\\.arg\\.ippu|\\.ippu|\\.arg\\.vcpu|\\.vcpu) (as0|as1|as2|as3),([^},[ , ]+)$", 0, 6, 6, 0, 0, 3, _sym136_operands_operands,0,0,0, 0,0,&_sym135,0,{}, 0,0,0,0,0,10, },
};

// Instructions named 'loop_begin'.
static struct adl_opcode _sym243[] = {
  // loop_begin_0    (0)
  { "loop_begin_0", 1, 1, 3, 32,  0x0, { 0x40000000,},_sym223, "^ *0$", 0, 0, 0, 0, 0, 0, 0,0,0,0, 0,0,&_sym221,0,{}, 0,0,0,0,0,-1, },
  // loop_begin_1    (1)
  { "loop_begin_1", 1, 1, 8, 32,  0x0, { 0x6000000,},_sym226, "^ *1$", 0, 0, 0, 0, 0, 0, 0,0,0,0, 0,0,&_sym224,0,{}, 0,0,0,0,0,-1, },
};

// Instructions named 'loop_end'.
static struct adl_opcode _sym244[] = {
  // loop_end_0    (0)
  { "loop_end_0", 1, 1, 3, 32,  0x0, { 0x20000000,},_sym229, "^ *0$", 0, 0, 0, 0, 0, 0, 0,0,0,0, 0,0,&_sym227,0,{}, 0,0,0,0,0,-1, },
  // loop_end_1    (1)
  { "loop_end_1", 1, 1, 8, 32,  0x0, { 0x5000000,},_sym232, "^ *1$", 0, 0, 0, 0, 0, 0, 0,0,0,0, 0,0,&_sym230,0,{}, 0,0,0,0,0,-1, },
};

// Instructions named 'mv'.
static struct adl_opcode _sym245[] = {
  // mv_ippu_reg    (0)
  { "mv_ippu_reg", 1, 4, 32, 32,  0x0, { 0x54000000,},_sym158, "^ *(a0|a1|m0|m1|as0|as1|as2|as3|vindx_ptr|a2|a3|r_rd_ptr|r_wr_ptr|elem_mask_ptr|mem_elem_rd_ptr|mem_elem_wr_ptr),(a0|a1|m0|m1|as0|as1|as2|as3|vindx_ptr|a2|a3|r_rd_ptr|r_wr_ptr|elem_mask_ptr|mem_elem_rd_ptr|mem_elem_wr_ptr)$", 0, 5, 5, 0, 0, 3, _sym157_operands_operands,0,0,0, 0,0,&_sym156,0,{}, 0,0,0,0,0,0, },
  // mv_ippu_reg_Is19_mX    (1)
  { "mv_ippu_reg_Is19_mX", 1, 4, 32, 32,  0x0, { 0x60800000,},_sym161, "^ *(m0|m1),([^},[, ]+)$", 0, 5, 5, 0, 0, 3, _sym160_operands_operands,0,0,0, 0,0,&_sym159,0,{}, 0,0,0,0,0,1, },
// mv_ippu_reg_Is19_non_mX    (2)
{ "mv_ippu_reg_Is19_non_mX", 1, 4, 32, 32,  0x0, { 0x60000000,},_sym164, "^ *(a0|a1|as0|as1|as2|as3|vindx_ptr|a2|a3|r_rd_ptr|r_wr_ptr|elem_mask_ptr|mem_elem_rd_ptr|mem_elem_wr_ptr),([^},[, ]+)$", 0, 5, 5, 0, 0, 3, _sym163_operands_operands,0,0,0, 0,0,&_sym162,0,{}, 0,0,0,0,0,2, },
};

// Instructions named 'nop'.
static struct adl_opcode _sym246[] = {
  // nop    (0)
  { "nop", 1, 4, 32, 32,  0x0, { },_sym167, "$", 0, 3, 3, 0, 0, 3, _sym166_operands_operands,0,0,0, 0,0,&_sym165,0,{}, 0,0,0,0,0,-1, },
};

// Instructions named 'rts'.
static struct adl_opcode _sym247[] = {
  // rts    (0)
  { "rts", 1, 4, 32, 32,  0x0, { 0x10c00000,},_sym170, "^ *(\\.z|\\.nz|)$", 0, 4, 4, 0, 0, 3, _sym169_operands_operands,0,0,0, 0,0,&_sym168,0,{}, 0,0,0,0,0,0, },
};

// Instructions named 'set.br'.
static struct adl_opcode _sym248[] = {
  // set_br_aX_mode    (0)
  { "set_br_aX_mode", 1, 4, 32, 32,  0x0, { 0x5c000000,},_sym173, "^ *(a0|a1),(mode0|fft32|mode1|fft64|mode2|fft128|mode3|fft256|mode4|fft512|mode5|fft1024|mode6|fft2048|mode7|fft4096|mode8|fft8192|mode9|fft16384)$", 0, 5, 5, 0, 0, 3, _sym172_operands_operands,0,0,0, 0,0,&_sym171,0,{}, 0,0,0,0,0,0, },
};

// Instructions named 'set.dr.config'.
static struct adl_opcode _sym249[] = {
  // set_dr_config    (0)
  { "set_dr_config", 1, 4, 32, 32,  0x0, { 0x58000000,},_sym176, "^ *(1|2|3|4|5|6|7|8|9|10),([^},[,, ]+),([^},[,, ]+)$", 0, 6, 6, 0, 0, 3, _sym175_operands_operands,0,0,0, 0,0,&_sym174,0,{}, 0,0,0,0,0,0, },
};

// Instructions named 'set.dr.radix'.
static struct adl_opcode _sym250[] = {
  // set_dr_radix    (0)
  { "set_dr_radix", 1, 4, 32, 32,  0x0, { 0x5a000000,},_sym179, "^ *(1|2|3|4|5|6|7|8|9|10),([^},[,, ]+),([^},[,, ]+)$", 0, 6, 6, 0, 0, 3, _sym178_operands_operands,0,0,0, 0,0,&_sym177,0,{}, 0,0,0,0,0,0, },
};

// Instructions named 'set.er'.
static struct adl_opcode _sym251[] = {
  // set_er    (0)
  { "set_er", 1, 4, 32, 32,  0x0, { 0x5e000000,},_sym182, "^ *(er64|er32|er16)$", 0, 4, 4, 0, 0, 3, _sym181_operands_operands,0,0,0, 0,0,&_sym180,0,{}, 0,0,0,0,0,0, },
};

// Instructions named 'set.loop'.
static struct adl_opcode _sym252[] = {
  // set_loop_Iu1_asX    (0)
  { "set_loop_Iu1_asX", 1, 0, 32, 32,  0x0, { 0 },_sym196, "^ *([^},[, ]+),(as0|as1|as2|as3)$", 0, 5, 5, 0, 0, 3, _sym194_operands_operands,_sym195,1,0, 0,0,&_sym192,0,{}, 0,0,0,0,0,0, },
// set_loop_Iu1_Iu8    (1)
{ "set_loop_Iu1_Iu8", 1, 0, 32, 32,  0x0, { 0 },_sym191, "^ *([^},[, ]+),([^},[, ]+)$", 0, 5, 5, 0, 0, 3, _sym189_operands_operands,_sym190,1,0, 0,0,&_sym186,0,{}, 0,0,0,0,0,1, },
};

// Instructions named 'set.mask'.
static struct adl_opcode _sym253[] = {
  // set_mask_bit    (0)
  { "set_mask_bit", 1, 4, 32, 32,  0x0, { 0x42000000,},_sym202, "^ *([^},[ ]+)$", 0, 4, 4, 0, 0, 3, _sym201_operands_operands,0,0,0, 0,0,&_sym200,0,{}, 0,0,0,0,0,0, },
};

// Instructions named 'set.mask.all'.
static struct adl_opcode _sym254[] = {
  // set_mask_all    (0)
  { "set_mask_all", 1, 4, 32, 32,  0x0, { 0x45000000,},_sym199, "$", 0, 3, 3, 0, 0, 3, _sym198_operands_operands,0,0,0, 0,0,&_sym197,0,{}, 0,0,0,0,0,-1, },
};

// Instructions named 'set.range'.
static struct adl_opcode _sym255[] = {
  // set_range_aY_asA_asB    (0)
  { "set_range_aY_asA_asB", 1, 4, 32, 32,  0x0, { 0x6c000000,},_sym208, "^ *(a0|a1),(as0|as1|as2|as3),(as0|as1|as2|as3)$", 0, 6, 6, 0, 0, 3, _sym207_operands_operands,0,0,0, 0,0,&_sym206,0,{}, 0,0,0,0,0,-1, },
  // set_range_aY_asA_Is19    (1)
  { "set_range_aY_asA_Is19", 1, 4, 32, 32,  0x0, { 0x68000000,},_sym205, "^ *(a0|a1),(as0|as1|as2|as3),([^},[,, ]+)$", 0, 6, 6, 0, 0, 3, _sym204_operands_operands,0,0,0, 0,0,&_sym203,0,{}, 0,0,0,0,0,1, },
};

// Instructions named 'set_loop'.
static struct adl_opcode _sym256[] = {
  // set_loop    (0)
  { "set_loop", 1, 4, 32, 32,  0x0, { 0x18000000,},_sym185, "^ *([^} ,\t,]+),([^} ,\t,]+),([^} ,\t,]+),([^} ,\t,]+)$", 0, 7, 11, 0, 0, 7, _sym184_operands_operands,0,0,0, 0,0,&_sym183,0,{}, 0,0,0,0,0,0, },
};

// Instructions named 'st'.
static struct adl_opcode _sym257[] = {
  // st_aX_mX    (0)
  { "st_aX_mX", 1, 4, 32, 32,  0x0, { 0x80000040,},_sym220, "^ *(\\.ippu|\\.vcpu) \\[(a0|a1)\\](\\+|\\-)(m0|m1),([^},[[ ,,,, ]+),(normal|br|dr|br_dr|indirect|ri),([^},[[ ,,,, ]+),(normal|e32|e16|r2|r3)$", 0, 11, 11, 0, 1, 3, _sym219_operands_operands,0,0,1, 0,0,&_sym218,0,{}, 0,0,0,0,0,0, },
// st_aX_Is5    (1)
{ "st_aX_Is5", 1, 4, 32, 32,  0x0, { 0xa0000040,},_sym211, "^ *(\\.ippu|\\.vcpu) \\[(a0|a1)\\]([+-][^},[[ ,,,, ]+),([^},[[ ,,,, ]+),(normal|br|dr|br_dr|indirect|ri),([^},[[ ,,,, ]+),(normal|e32|e16|r2|r3)$", 0, 10, 10, 0, 1, 3, _sym210_operands_operands,0,0,1, 0,0,&_sym209,0,{}, 0,0,0,0,0,1, },
// st_aX_iY_Is4    (2)
{ "st_aX_iY_Is4", 1, 4, 32, 32,  0x0, { 0xb8000040,},_sym217, "^ *(\\.ippu|\\.vcpu) \\[(a0|a1)\\+(i0|i1)\\]([+-][^},[[ ,,, ]+),([^},[[ ,,, ]+),([^},[[ ,,, ]+),(normal|e32|e16|r2|r3)$", 0, 10, 10, 0, 1, 3, _sym216_operands_operands,0,0,1, 0,0,&_sym215,0,{}, 0,0,0,0,0,2, },
// st_aX_Is8    (3)
{ "st_aX_Is8", 1, 4, 32, 32,  0x0, { 0xa0000000,},_sym214, "^ *(\\.ippu|\\.vcpu) \\[(a0|a1)\\]([+-][^},[[ ,,, ]+),([^},[[ ,,, ]+),([^},[[ ,,, ]+),(normal|e32|e16|r2|r3)$", 0, 9, 9, 0, 1, 3, _sym213_operands_operands,0,0,1, 0,0,&_sym212,0,{}, 0,0,0,0,0,3, },
};

// Instruction table.
static struct adl_instr other_instructions [] = {
  { "add", 2, _sym233 },
  { "add.cb", 2, _sym234 },
  { "clr", 2, _sym235 },
  { "clr.mask", 1, _sym236 },
  { "clr.mask.all", 1, _sym237 },
  { "cmp.bit", 1, _sym238 },
  { "done", 1, _sym239 },
  { "jmp", 1, _sym240 },
  { "jsr", 1, _sym241 },
  { "ld", 11, _sym242 },
  { "loop_begin", 2, _sym243 },
  { "loop_end", 2, _sym244 },
  { "mv", 3, _sym245 },
  { "nop", 1, _sym246 },
  { "rts", 1, _sym247 },
  { "set.br", 1, _sym248 },
  { "set.dr.config", 1, _sym249 },
  { "set.dr.radix", 1, _sym250 },
  { "set.er", 1, _sym251 },
  { "set.loop", 2, _sym252 },
  { "set.mask", 1, _sym253 },
  { "set.mask.all", 1, _sym254 },
  { "set.range", 2, _sym255 },
  { "set_loop", 1, _sym256 },
  { "st", 4, _sym257 },
};

static const int num_other_instructions = 25;

static const struct adl_name_pair ppc_regnames[] = {
  {"a0",0},
  {"a1",1},
  {"a2",2},
  {"a3",3},
  {"as0",0},
  {"as1",1},
  {"as2",2},
  {"as3",3},
  {"m0",0},
  {"m1",1},
  {"normal",0},
  {"br",1},
  {"dr",2},
  {"br_dr",3},
  {"vindirect",4},
  {"indirect",5},
  {"l2h",6},
  {"h2l",7},
  {"l2l",8},
  {"h2h",9},
  {"e256",10},
  {"e128",11},
  {"e64",12},
  {"e32",13},
  {"e16",14},
  {"e8",15},
  {"e4",16},
  {"fft32",17},
  {"fft64",18},
  {"fft128",19},
  {"fft256",20},
  {"fft512",21},
  {"fft1024",22},
  {"fft2048",23},
  {"fft4096",24},
  {"fft8192",25},
  {"fft16384",26},
  {"imm",27},
};

static const int num_ppc_regnames = 38;

static const char *ppc_itnames[] = {
  "default",
};


static reloc_howto_type ppc_elf_howto_table[] = {
  HOWTO(17,0,3,19,0,0,complain_overflow_signed,bfd_elf_generic_reloc,"R_IPPU_DMEM_19",0,0x0,0x7ffff,0), // relocation R_IPPU_DMEM_19 (R_IPPU_DMEM_19)
  HOWTO(16,2,1,16,0,0,complain_overflow_unsigned,bfd_elf_generic_reloc,"R_IPPU_PRAM_16",0,0x0,0xffff,0), // relocation R_IPPU_PRAM_16 (R_IPPU_PRAM_16)
  EMPTY_HOWTO(-1)
};

static unsigned num_ppc_elf_howtos ATTRIBUTE_UNUSED = 3;
extern "C" int ippu_adl_size_lookup(unsigned size)
{
  switch (size) {
    case 1:
    return BFD_RELOC_8;
    break;
    case 2:
    return BFD_RELOC_16;
    break;
    case 3:
    return BFD_RELOC_24;
    break;
    case 4:
    return BFD_RELOC_32;
    break;
    case 8:
    return BFD_RELOC_64;
    break;
    default:
    return -1;
  }
}


// Relocations ordered by name, for fast name -> type searches.
static struct adl_reloc_name ppc_relocs_by_index [] = {
   { "R_IPPU_DMEM_19", 0, 34, false }, // R_IPPU_DMEM_19
   { "R_IPPU_PRAM_16", 1, 31, false }, // R_IPPU_PRAM_16
};

static const int num_ppc_relocs_by_index = 2;

static const char *instr_names[] = {
  "add",
  "add.cb",
  "clr",
  "clr.mask",
  "clr.mask.all",
  "cmp.bit",
  "done",
  "jmp",
  "jsr",
  "ld",
  "loop_begin",
  "loop_end",
  "mv",
  "nop",
  "rts",
  "set.br",
  "set.dr.config",
  "set.dr.radix",
  "set.er",
  "set.loop",
  "set.mask",
  "set.mask.all",
  "set.range",
  "set_loop",
  "st",
};

static int num_instr_names = 25;

static const char *instr_pfx_fields[] ATTRIBUTE_UNUSED = {
   0 };

static int num_instr_pfx_fields ATTRIBUTE_UNUSED = 0;

//
// Helper code.
//


static void post_packet_asm(adl::InstrBundle & b,int current_position ATTRIBUTE_UNUSED)
{
       adl::InstrBundle bb ;
       adl::InstrInfo ii ;
       bool extIPPU = false , extLoopBegin = false , extLoopEnd = false ;
       bool extLoopBegin1 = false , extLoopEnd1 = false ;
       int posIPPU = - 1 ;
       int Size = b . size (  ) ;
       bool extFlag ;
      if ( ( Size < 1 ) || ( Size > 3 ) ) {
            { std::ostringstream ss; ss    <<  "Invalid instruction formation size: "  <<  Size ; error(ss.str().c_str(),adl_get_current_pos(),adl_get_current_group()); } ;
        } else {
            for (  int i = 0 ; i < Size ; ++ i ) {
                  extFlag = false ;
                  if ( b [ i ] . instrHasAttr ( instr_ippu ) ) {
                        if ( extIPPU ) {
                              { std::ostringstream ss; ss    <<  "Invalid IPPU instruction at the position of "  <<  i + 1 ; error(ss.str().c_str(),adl_get_current_pos(),adl_get_current_group()); } ;
                          } else {
                              extIPPU = true ;
                              posIPPU = i ;
                          }
                        extFlag = true ;
                    }
                  if ( b [ i ] . instrHasAttr ( instr_loop_begin ) ) {
                        if ( extLoopBegin ) {
                              { std::ostringstream ss; ss    <<  "Invalid loop_begin at the position of "  <<  i + 1 ; error(ss.str().c_str(),adl_get_current_pos(),adl_get_current_group()); } ;
                          } else {
                              extLoopBegin = true ;
                              if ( b [ i ] . instrHasAttr ( instr_loop_1 ) ) {
                                    extLoopBegin1 = true ;
                                }
                          }
                        extFlag = true ;
                    }
                  if ( b [ i ] . instrHasAttr ( instr_loop_end ) ) {
                        if ( extLoopEnd ) {
                              { std::ostringstream ss; ss    <<  "Invalid loop_end at the position of "  <<  i + 1 ; error(ss.str().c_str(),adl_get_current_pos(),adl_get_current_group()); } ;
                          } else {
                              extLoopEnd = true ;
                              if ( b [ i ] . instrHasAttr ( instr_loop_1 ) ) {
                                    extLoopEnd1 = true ;
                                }
                          }
                        extFlag = true ;
                    }
                  if ( ! extFlag ) {
                        { std::ostringstream ss; ss    <<  "Invalid instruction at the position of "  <<  i + 1 ; error(ss.str().c_str(),adl_get_current_pos(),adl_get_current_group()); } ;
                    }
              }
            if ( ! extIPPU && ( extLoopBegin || extLoopEnd ) ) {
                  ii = createInstr ( "nop" , 0 , 0 , 0 ) ;
              } else if ( extIPPU ) {
                  ii = b [ posIPPU ] ;
              }
            if ( extLoopBegin ) {
                  adl_set_field(71,71,1,ii) ;
                  if ( extLoopBegin1 ) {
                        adl_set_field(69,69,1,ii) ;
                    }
              }
            if ( extLoopEnd ) {
                  adl_set_field(67,67,1,ii) ;
                  if ( extLoopEnd1 ) {
                        adl_set_field(69,69,1,ii) ;
                    }
              }
        }
      bb . push_back ( ii ) ;
      b = bb ;
}
static struct adl_asm_instr asm_instrs[] ATTRIBUTE_UNUSED = {
   {"",0 } 
};
static int num_asm_instrs ATTRIBUTE_UNUSED = 0;
static int internal_current_table = 0;
static bool show_warnings = false;
static struct hash_control *instr_hash[1];

static struct hash_control *reg_hash;

static struct hash_control *asm_instr_hash;

static struct hash_control *instr_pfx_fields_hash;

static const char *terminating_chars     = "\t .{}\n";

static const char *min_terminating_chars = "\t {}\n";

static bool setup_endianness()
{
  adl_setup_endianness(false); return true;
}

static bool setup_endianness_var ATTRIBUTE_UNUSED = setup_endianness();

void ippu_md_begin()
{
  adl_setup_general(min_terminating_chars,terminating_chars,1,0,0,post_packet_asm,0,init_queue_size, init_queue_offset, show_warnings, true,1);
  adl_setup_comments(init_comment_strs, init_num_comment_strs, init_line_comment_strs, init_num_line_comment_strs);
  adl_setup_instrfields(ppc_operands, num_ppc_operands,ppc_operands_by_index, num_ppc_operands_by_index);
  adl_setup_grouping(packet_begin_chars, packet_end_chars);
  adl_setup_prefix(pfx_queue, 0,0,0,reset_prefix_counters);
  adl_setup_instr_separators(instr_separator_chars);
  adl_setup_relocations(ppc_elf_howto_table,num_ppc_elf_howtos,ppc_relocs_by_index,num_ppc_relocs_by_index);
  instr_hash[0] = adl_setup_instructions(other_instructions,num_other_instructions,ppc_operands);
  reg_hash = adl_setup_name_hash(ppc_regnames,num_ppc_regnames,"register");
  asm_instr_hash = 0;
  instr_pfx_fields_hash = 0;
  adl_setup_finish();
}


extern "C" void ippu_md_assemble(char *str)
{
  adl_assemble(str,instr_hash[internal_current_table],asm_instr_hash,reg_hash,instr_pfx_fields_hash,11,internal_current_table,ppc_itnames[internal_current_table]);
}

extern "C" void ippu_md_apply_fix (fixS *fixP ,valueT *valP ,segT seg)
{
  if (!acb_apply_fix(fixP,valP,seg)) {
    adl_apply_fix(fixP,valP,seg);
  }
}

int adl_parse_option(int,char*);

extern "C" int ippu_md_parse_option (int c,char *arg)
{
  if (c == 'd') {
    show_warnings = TRUE;
    return 1;
  } else if (c == 'm') {
    if (!strcmp(arg,"default")) {
      internal_current_table = 0;
      return 1;
    }
     else if (!strcmp(arg,"instr_loop")) {
      internal_current_table = 1;
      return 1;
    }
  }
  return adl_parse_option(c,arg);
}

void adl_show_usage(FILE*);

extern "C" void ippu_md_show_usage (FILE *stream ATTRIBUTE_UNUSED)
{
  fprintf (stream,
  "\nInstruction-selection options:\n\n"
  "-mdefault		Select the default instruction table.\n"
  "-minstr_loop		Select the 'instr_loop' instruction table.\n"
  "-d			Show debugging warnings about undefined symbols.\n"
  );
  adl_show_usage(stream);
}

extern "C" void ippu_adl_get_instr_names(const char ***names, int *num_names)
{
  *names = instr_names;
  *num_names = num_instr_names;
};

extern "C" void ippu_adl_get_instr_ops(const struct adl_name_pair **names, int* num_names)
{
  *names = ppc_regnames;
  *num_names = num_ppc_regnames;
}

extern "C" bfd_boolean  ippu_dt_debug(void);

extern "C" bfd_boolean  ippu_dt_debug(void)
{
  #ifdef _DEVTECH_DEBUG_
  return TRUE;
  #else
  return FALSE;
  #endif
}

#include "ippu-assembler.inc"

const size_t idx_list_0[] = { 1 };

size_t num_ippu_modifiers = 1;
struct modifier_info ippu_modifiers[] = {
	{ _sym188_modifier, 1, idx_list_0 },
	{ NULL, 0, NULL, },
};
